function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */
/* eslint-env jasmine, atomtest */

/*
  This file contains verifying specs for:
  https://github.com/sindresorhus/atom-editorconfig/issues/108
*/

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var projectRoot = _path2['default'].join(__dirname, 'fixtures');
var filePath = _path2['default'].join(projectRoot, 'test.iss108');

describe('editorconfig', function () {
	var textEditor = undefined;
	var textWithManyFinalNewlines = 'I\nam\nProvidence.\n\r\n\r\r\n\n\n';
	var textWithOneFinalNewline = 'I\nam\nProvidence.\n';
	var textWithoutFinalNewline = 'I\nam\nProvidence.';

	beforeEach(function () {
		waitsForPromise(function () {
			return Promise.all([atom.packages.activatePackage('editorconfig'), atom.workspace.open(filePath)]).then(function (results) {
				textEditor = results[1];
			});
		});
	});

	afterEach(function () {
		// remove the created fixture, if it exists
		runs(function () {
			_fs2['default'].stat(filePath, function (err, stats) {
				if (!err && stats.isFile()) {
					_fs2['default'].unlink(filePath);
				}
			});
		});

		waitsFor(function () {
			try {
				return _fs2['default'].statSync(filePath).isFile() === false;
			} catch (err) {
				return true;
			}
		}, 5000, 'removed ' + filePath);
	});

	describe('Atom being set to insert **no** final newline', function () {
		beforeEach(function () {
			// eslint-disable-next-line camelcase
			textEditor.getBuffer().editorconfig.settings.end_of_line = '\n';
			// eslint-disable-next-line camelcase
			textEditor.getBuffer().editorconfig.settings.insert_final_newline = false;
		});

		it('should leave the missing newline.', function () {
			textEditor.setText(textWithoutFinalNewline);
			textEditor.save();
			expect(textEditor.getText().length).toEqual(textWithoutFinalNewline.length);
		});
		it('should strip one odd newline.', function () {
			textEditor.setText(textWithOneFinalNewline);
			textEditor.save();
			expect(textEditor.getText().length).toEqual(textWithoutFinalNewline.length);
		});
		it('should strip many odd newlines.', function () {
			textEditor.setText(textWithManyFinalNewlines);
			textEditor.save();
			expect(textEditor.getText().length).toEqual(textWithoutFinalNewline.length);
		});
	});

	describe('Atom being set to insert a final newline', function () {
		beforeEach(function () {
			// eslint-disable-next-line camelcase
			textEditor.getBuffer().editorconfig.settings.insert_final_newline = true;
			// eslint-disable-next-line camelcase
			textEditor.getBuffer().editorconfig.settings.end_of_line = '\n';
		});

		it('should insert a final newline.', function () {
			textEditor.setText(textWithoutFinalNewline);
			textEditor.save();
			expect(textEditor.getText().length).toEqual(textWithOneFinalNewline.length);
		});
		it('should leave one final newline.', function () {
			textEditor.setText(textWithOneFinalNewline);
			textEditor.save();
			expect(textEditor.getText().length).toEqual(textWithOneFinalNewline.length);
		});
		it('should strip many odd final newline.', function () {
			textEditor.setText(textWithManyFinalNewlines);
			textEditor.save();
			expect(textEditor.getText().length).toEqual(textWithOneFinalNewline.length);
		});
	});
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/stefano/.atom/packages/editorconfig/spec/iss108-spec.js
