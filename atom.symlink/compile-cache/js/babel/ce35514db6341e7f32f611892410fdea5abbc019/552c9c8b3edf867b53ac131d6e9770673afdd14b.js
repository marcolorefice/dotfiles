function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */
/* eslint-env jasmine, atomtest */

/*
  This file contains verifying specs for:
  https://github.com/sindresorhus/atom-editorconfig/issues/121

  Due to a bad implementation of the `insert_final_newline`-logic the final newline
  is unecessarily stripped and appended even if a single final newline already exists.
  This messes the undo-history up.
*/

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var projectRoot = _path2['default'].join(__dirname, 'fixtures');
var filePath = _path2['default'].join(projectRoot, 'test.' + _path2['default'].basename(__filename).split('-').shift());

describe('editorconfig', function () {
	var textEditor = undefined;
	var textWithOneFinalNewline = '\nThis is a text\nwith a lot of lines,\nwhich have a lot of\ntrailing spaces.\n';

	beforeEach(function () {
		waitsForPromise(function () {
			return Promise.all([atom.packages.activatePackage('editorconfig'), atom.workspace.open(filePath)]).then(function (results) {
				textEditor = results[1];
			});
		});
	});

	afterEach(function () {
		// remove the created fixture, if it exists
		runs(function () {
			_fs2['default'].stat(filePath, function (err, stats) {
				if (!err && stats.isFile()) {
					_fs2['default'].unlink(filePath);
				}
			});
		});

		waitsFor(function () {
			try {
				return _fs2['default'].statSync(filePath).isFile() === false;
			} catch (err) {
				return true;
			}
		}, 5000, 'removed ' + filePath);
	});

	describe('Atom being set to insert a final newline', function () {
		beforeEach(function () {
			Object.assign(textEditor.getBuffer().editorconfig.settings, {
				trim_trailing_whitespace: true, // eslint-disable-line camelcase
				insert_final_newline: true // eslint-disable-line camelcase
			});
		});

		it('should strip not extend the undo-history if a final newline already exists', function () {
			var buffer = textEditor.getBuffer();

			textEditor.setText(textWithOneFinalNewline);

			var checkpoint = buffer.createCheckpoint();
			textEditor.save();
			expect(buffer.getChangesSinceCheckpoint(checkpoint).length).toEqual(0);
		});
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3N0ZWZhbm8vLmRvdGZpbGVzL2F0b20uc3ltbGluay9wYWNrYWdlcy9lZGl0b3Jjb25maWcvc3BlYy9pc3MxMjEtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztrQkFZZSxJQUFJOzs7O29CQUNGLE1BQU07Ozs7QUFFdkIsSUFBTSxXQUFXLEdBQUcsa0JBQUssSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNyRCxJQUFNLFFBQVEsR0FBRyxrQkFBSyxJQUFJLENBQ3pCLFdBQVcsWUFDSCxrQkFBSyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUNwRCxDQUFDOztBQUVGLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtBQUM5QixLQUFJLFVBQVUsWUFBQSxDQUFDO0FBQ2YsS0FBTSx1QkFBdUIsb0ZBSVgsQ0FBQzs7QUFFbkIsV0FBVSxDQUFDLFlBQU07QUFDaEIsaUJBQWUsQ0FBQztVQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FDWCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsRUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzdCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPLEVBQUk7QUFDbEIsY0FBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QixDQUFDO0dBQUEsQ0FDRixDQUFDO0VBQ0YsQ0FBQyxDQUFDOztBQUVILFVBQVMsQ0FBQyxZQUFNOztBQUVmLE1BQUksQ0FBQyxZQUFNO0FBQ1YsbUJBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUs7QUFDakMsUUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7QUFDM0IscUJBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3BCO0lBQ0QsQ0FBQyxDQUFDO0dBQ0gsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxZQUFNO0FBQ2QsT0FBSTtBQUNILFdBQU8sZ0JBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLEtBQUssQ0FBQztJQUNoRCxDQUFDLE9BQU8sR0FBRyxFQUFFO0FBQ2IsV0FBTyxJQUFJLENBQUM7SUFDWjtHQUNELEVBQUUsSUFBSSxlQUFhLFFBQVEsQ0FBRyxDQUFDO0VBQ2hDLENBQUMsQ0FBQzs7QUFFSCxTQUFRLENBQUMsMENBQTBDLEVBQUUsWUFBTTtBQUMxRCxZQUFVLENBQUMsWUFBTTtBQUNoQixTQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO0FBQzNELDRCQUF3QixFQUFFLElBQUk7QUFDOUIsd0JBQW9CLEVBQUUsSUFBSTtJQUMxQixDQUFDLENBQUM7R0FDSCxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDRFQUE0RSxFQUFFLFlBQU07QUFDdEYsT0FBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDOztBQUV0QyxhQUFVLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7O0FBRTVDLE9BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQzdDLGFBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQixTQUFNLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUN2RSxDQUFDLENBQUM7RUFDSCxDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJmaWxlIjoiL2hvbWUvc3RlZmFuby8uZG90ZmlsZXMvYXRvbS5zeW1saW5rL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9zcGVjL2lzczEyMS1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBiYWJlbCAqL1xuLyogZXNsaW50LWVudiBqYXNtaW5lLCBhdG9tdGVzdCAqL1xuXG4vKlxuICBUaGlzIGZpbGUgY29udGFpbnMgdmVyaWZ5aW5nIHNwZWNzIGZvcjpcbiAgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hdG9tLWVkaXRvcmNvbmZpZy9pc3N1ZXMvMTIxXG5cbiAgRHVlIHRvIGEgYmFkIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgaW5zZXJ0X2ZpbmFsX25ld2xpbmVgLWxvZ2ljIHRoZSBmaW5hbCBuZXdsaW5lXG4gIGlzIHVuZWNlc3NhcmlseSBzdHJpcHBlZCBhbmQgYXBwZW5kZWQgZXZlbiBpZiBhIHNpbmdsZSBmaW5hbCBuZXdsaW5lIGFscmVhZHkgZXhpc3RzLlxuICBUaGlzIG1lc3NlcyB0aGUgdW5kby1oaXN0b3J5IHVwLlxuKi9cblxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBwcm9qZWN0Um9vdCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycpO1xuY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oXG5cdHByb2plY3RSb290LFxuXHRgdGVzdC4ke3BhdGguYmFzZW5hbWUoX19maWxlbmFtZSkuc3BsaXQoJy0nKS5zaGlmdCgpfWBcbik7XG5cbmRlc2NyaWJlKCdlZGl0b3Jjb25maWcnLCAoKSA9PiB7XG5cdGxldCB0ZXh0RWRpdG9yO1xuXHRjb25zdCB0ZXh0V2l0aE9uZUZpbmFsTmV3bGluZSA9IGBcblRoaXMgaXMgYSB0ZXh0XG53aXRoIGEgbG90IG9mIGxpbmVzLFxud2hpY2ggaGF2ZSBhIGxvdCBvZlxudHJhaWxpbmcgc3BhY2VzLlxcbmA7XG5cblx0YmVmb3JlRWFjaCgoKSA9PiB7XG5cdFx0d2FpdHNGb3JQcm9taXNlKCgpID0+XG5cdFx0XHRQcm9taXNlLmFsbChbXG5cdFx0XHRcdGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKCdlZGl0b3Jjb25maWcnKSxcblx0XHRcdFx0YXRvbS53b3Jrc3BhY2Uub3BlbihmaWxlUGF0aClcblx0XHRcdF0pLnRoZW4ocmVzdWx0cyA9PiB7XG5cdFx0XHRcdHRleHRFZGl0b3IgPSByZXN1bHRzWzFdO1xuXHRcdFx0fSlcblx0XHQpO1xuXHR9KTtcblxuXHRhZnRlckVhY2goKCkgPT4ge1xuXHRcdC8vIHJlbW92ZSB0aGUgY3JlYXRlZCBmaXh0dXJlLCBpZiBpdCBleGlzdHNcblx0XHRydW5zKCgpID0+IHtcblx0XHRcdGZzLnN0YXQoZmlsZVBhdGgsIChlcnIsIHN0YXRzKSA9PiB7XG5cdFx0XHRcdGlmICghZXJyICYmIHN0YXRzLmlzRmlsZSgpKSB7XG5cdFx0XHRcdFx0ZnMudW5saW5rKGZpbGVQYXRoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR3YWl0c0ZvcigoKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyZXR1cm4gZnMuc3RhdFN5bmMoZmlsZVBhdGgpLmlzRmlsZSgpID09PSBmYWxzZTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9LCA1MDAwLCBgcmVtb3ZlZCAke2ZpbGVQYXRofWApO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnQXRvbSBiZWluZyBzZXQgdG8gaW5zZXJ0IGEgZmluYWwgbmV3bGluZScsICgpID0+IHtcblx0XHRiZWZvcmVFYWNoKCgpID0+IHtcblx0XHRcdE9iamVjdC5hc3NpZ24odGV4dEVkaXRvci5nZXRCdWZmZXIoKS5lZGl0b3Jjb25maWcuc2V0dGluZ3MsIHtcblx0XHRcdFx0dHJpbV90cmFpbGluZ193aGl0ZXNwYWNlOiB0cnVlLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXHRcdFx0XHRpbnNlcnRfZmluYWxfbmV3bGluZTogdHJ1ZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRpdCgnc2hvdWxkIHN0cmlwIG5vdCBleHRlbmQgdGhlIHVuZG8taGlzdG9yeSBpZiBhIGZpbmFsIG5ld2xpbmUgYWxyZWFkeSBleGlzdHMnLCAoKSA9PiB7XG5cdFx0XHRjb25zdCBidWZmZXIgPSB0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpO1xuXG5cdFx0XHR0ZXh0RWRpdG9yLnNldFRleHQodGV4dFdpdGhPbmVGaW5hbE5ld2xpbmUpO1xuXG5cdFx0XHRjb25zdCBjaGVja3BvaW50ID0gYnVmZmVyLmNyZWF0ZUNoZWNrcG9pbnQoKTtcblx0XHRcdHRleHRFZGl0b3Iuc2F2ZSgpO1xuXHRcdFx0ZXhwZWN0KGJ1ZmZlci5nZXRDaGFuZ2VzU2luY2VDaGVja3BvaW50KGNoZWNrcG9pbnQpLmxlbmd0aCkudG9FcXVhbCgwKTtcblx0XHR9KTtcblx0fSk7XG59KTtcbiJdfQ==
//# sourceURL=/home/stefano/.dotfiles/atom.symlink/packages/editorconfig/spec/iss121-spec.js
