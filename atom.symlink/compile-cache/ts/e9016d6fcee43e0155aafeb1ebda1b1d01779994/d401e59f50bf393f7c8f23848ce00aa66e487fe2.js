// Type definitions for jQuery 1.10.x / 2.0.x
// Project: http://jquery.com/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Christian Hoffmeister <https://github.com/choffmeister>, Steve Fenton <https://github.com/Steve-Fenton>, Diullei Gomes <https://github.com/Diullei>, Tass Iliopoulos <https://github.com/tasoili>, Jason Swearingen <https://github.com/jasons-novaleaf>, Sean Hill <https://github.com/seanski>, Guus Goossens <https://github.com/Guuz>, Kelly Summerlin <https://github.com/ksummerlin>, Basarat Ali Syed <https://github.com/basarat>, Nicholas Wolverson <https://github.com/nwolverson>, Derek Cicerone <https://github.com/derekcicerone>, Andrew Gaspar <https://github.com/AndrewGaspar>, James Harrison Fisher <https://github.com/jameshfisher>, Seikichi Kondo <https://github.com/seikichi>, Benjamin Jackman <https://github.com/benjaminjackman>, Poul Sorensen <https://github.com/s093294>, Josh Strobl <https://github.com/JoshStrobl>, John Reilly <https://github.com/johnnyreilly/>, Dick van den Brink <https://github.com/DickvdBrink>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvc3RlZmFuby8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL3R5cGluZ3MvanF1ZXJ5L2pxdWVyeS5kLnRzIiwic291cmNlcyI6WyIvaG9tZS9zdGVmYW5vLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9saWIvdHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkNBQTZDO0FBQzdDLDhCQUE4QjtBQUM5QixnK0JBQWcrQjtBQUNoK0IsOERBQThEO0FBNm1HbEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlIGRlZmluaXRpb25zIGZvciBqUXVlcnkgMS4xMC54IC8gMi4wLnhcbi8vIFByb2plY3Q6IGh0dHA6Ly9qcXVlcnkuY29tL1xuLy8gRGVmaW5pdGlvbnMgYnk6IEJvcmlzIFlhbmtvdiA8aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzeWFua292Lz4sIENocmlzdGlhbiBIb2ZmbWVpc3RlciA8aHR0cHM6Ly9naXRodWIuY29tL2Nob2ZmbWVpc3Rlcj4sIFN0ZXZlIEZlbnRvbiA8aHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlLUZlbnRvbj4sIERpdWxsZWkgR29tZXMgPGh0dHBzOi8vZ2l0aHViLmNvbS9EaXVsbGVpPiwgVGFzcyBJbGlvcG91bG9zIDxodHRwczovL2dpdGh1Yi5jb20vdGFzb2lsaT4sIEphc29uIFN3ZWFyaW5nZW4gPGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbnMtbm92YWxlYWY+LCBTZWFuIEhpbGwgPGh0dHBzOi8vZ2l0aHViLmNvbS9zZWFuc2tpPiwgR3V1cyBHb29zc2VucyA8aHR0cHM6Ly9naXRodWIuY29tL0d1dXo+LCBLZWxseSBTdW1tZXJsaW4gPGh0dHBzOi8vZ2l0aHViLmNvbS9rc3VtbWVybGluPiwgQmFzYXJhdCBBbGkgU3llZCA8aHR0cHM6Ly9naXRodWIuY29tL2Jhc2FyYXQ+LCBOaWNob2xhcyBXb2x2ZXJzb24gPGh0dHBzOi8vZ2l0aHViLmNvbS9ud29sdmVyc29uPiwgRGVyZWsgQ2ljZXJvbmUgPGh0dHBzOi8vZ2l0aHViLmNvbS9kZXJla2NpY2Vyb25lPiwgQW5kcmV3IEdhc3BhciA8aHR0cHM6Ly9naXRodWIuY29tL0FuZHJld0dhc3Bhcj4sIEphbWVzIEhhcnJpc29uIEZpc2hlciA8aHR0cHM6Ly9naXRodWIuY29tL2phbWVzaGZpc2hlcj4sIFNlaWtpY2hpIEtvbmRvIDxodHRwczovL2dpdGh1Yi5jb20vc2Vpa2ljaGk+LCBCZW5qYW1pbiBKYWNrbWFuIDxodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5qYWNrbWFuPiwgUG91bCBTb3JlbnNlbiA8aHR0cHM6Ly9naXRodWIuY29tL3MwOTMyOTQ+LCBKb3NoIFN0cm9ibCA8aHR0cHM6Ly9naXRodWIuY29tL0pvc2hTdHJvYmw+LCBKb2huIFJlaWxseSA8aHR0cHM6Ly9naXRodWIuY29tL2pvaG5ueXJlaWxseS8+LCBEaWNrIHZhbiBkZW4gQnJpbmsgPGh0dHBzOi8vZ2l0aHViLmNvbS9EaWNrdmRCcmluaz5cbi8vIERlZmluaXRpb25zOiBodHRwczovL2dpdGh1Yi5jb20vYm9yaXN5YW5rb3YvRGVmaW5pdGVseVR5cGVkXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblRISVMgQ09ERSBJUyBQUk9WSURFRCAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxuXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBBSkFYIHNldHRpbmcgdGhhdCB3aWxsIGNvbmZpZ3VyZSB0aGUgQUpBWCByZXF1ZXN0XG4gKi9cbmludGVyZmFjZSBKUXVlcnlBamF4U2V0dGluZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IHR5cGUgc2VudCBpbiB0aGUgcmVxdWVzdCBoZWFkZXIgdGhhdCB0ZWxscyB0aGUgc2VydmVyIHdoYXQga2luZCBvZiByZXNwb25zZSBpdCB3aWxsIGFjY2VwdCBpbiByZXR1cm4uIElmIHRoZSBhY2NlcHRzIHNldHRpbmcgbmVlZHMgbW9kaWZpY2F0aW9uLCBpdCBpcyByZWNvbW1lbmRlZCB0byBkbyBzbyBvbmNlIGluIHRoZSAkLmFqYXhTZXR1cCgpIG1ldGhvZC5cbiAgICAgKi9cbiAgICBhY2NlcHRzPzogYW55O1xuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIGFsbCByZXF1ZXN0cyBhcmUgc2VudCBhc3luY2hyb25vdXNseSAoaS5lLiB0aGlzIGlzIHNldCB0byB0cnVlIGJ5IGRlZmF1bHQpLiBJZiB5b3UgbmVlZCBzeW5jaHJvbm91cyByZXF1ZXN0cywgc2V0IHRoaXMgb3B0aW9uIHRvIGZhbHNlLiBDcm9zcy1kb21haW4gcmVxdWVzdHMgYW5kIGRhdGFUeXBlOiBcImpzb25wXCIgcmVxdWVzdHMgZG8gbm90IHN1cHBvcnQgc3luY2hyb25vdXMgb3BlcmF0aW9uLiBOb3RlIHRoYXQgc3luY2hyb25vdXMgcmVxdWVzdHMgbWF5IHRlbXBvcmFyaWx5IGxvY2sgdGhlIGJyb3dzZXIsIGRpc2FibGluZyBhbnkgYWN0aW9ucyB3aGlsZSB0aGUgcmVxdWVzdCBpcyBhY3RpdmUuIEFzIG9mIGpRdWVyeSAxLjgsIHRoZSB1c2Ugb2YgYXN5bmM6IGZhbHNlIHdpdGgganFYSFIgKCQuRGVmZXJyZWQpIGlzIGRlcHJlY2F0ZWQ7IHlvdSBtdXN0IHVzZSB0aGUgc3VjY2Vzcy9lcnJvci9jb21wbGV0ZSBjYWxsYmFjayBvcHRpb25zIGluc3RlYWQgb2YgdGhlIGNvcnJlc3BvbmRpbmcgbWV0aG9kcyBvZiB0aGUganFYSFIgb2JqZWN0IHN1Y2ggYXMganFYSFIuZG9uZSgpIG9yIHRoZSBkZXByZWNhdGVkIGpxWEhSLnN1Y2Nlc3MoKS5cbiAgICAgKi9cbiAgICBhc3luYz86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQSBwcmUtcmVxdWVzdCBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIG1vZGlmeSB0aGUganFYSFIgKGluIGpRdWVyeSAxLjQueCwgWE1MSFRUUFJlcXVlc3QpIG9iamVjdCBiZWZvcmUgaXQgaXMgc2VudC4gVXNlIHRoaXMgdG8gc2V0IGN1c3RvbSBoZWFkZXJzLCBldGMuIFRoZSBqcVhIUiBhbmQgc2V0dGluZ3Mgb2JqZWN0cyBhcmUgcGFzc2VkIGFzIGFyZ3VtZW50cy4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LiBSZXR1cm5pbmcgZmFsc2UgaW4gdGhlIGJlZm9yZVNlbmQgZnVuY3Rpb24gd2lsbCBjYW5jZWwgdGhlIHJlcXVlc3QuIEFzIG9mIGpRdWVyeSAxLjUsIHRoZSBiZWZvcmVTZW5kIG9wdGlvbiB3aWxsIGJlIGNhbGxlZCByZWdhcmRsZXNzIG9mIHRoZSB0eXBlIG9mIHJlcXVlc3QuXG4gICAgICovXG4gICAgYmVmb3JlU2VuZD8gKGpxWEhSOiBKUXVlcnlYSFIsIHNldHRpbmdzOiBKUXVlcnlBamF4U2V0dGluZ3MpOiBhbnk7XG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIGZhbHNlLCBpdCB3aWxsIGZvcmNlIHJlcXVlc3RlZCBwYWdlcyBub3QgdG8gYmUgY2FjaGVkIGJ5IHRoZSBicm93c2VyLiBOb3RlOiBTZXR0aW5nIGNhY2hlIHRvIGZhbHNlIHdpbGwgb25seSB3b3JrIGNvcnJlY3RseSB3aXRoIEhFQUQgYW5kIEdFVCByZXF1ZXN0cy4gSXQgd29ya3MgYnkgYXBwZW5kaW5nIFwiXz17dGltZXN0YW1wfVwiIHRvIHRoZSBHRVQgcGFyYW1ldGVycy4gVGhlIHBhcmFtZXRlciBpcyBub3QgbmVlZGVkIGZvciBvdGhlciB0eXBlcyBvZiByZXF1ZXN0cywgZXhjZXB0IGluIElFOCB3aGVuIGEgUE9TVCBpcyBtYWRlIHRvIGEgVVJMIHRoYXQgaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWQgYnkgYSBHRVQuXG4gICAgICovXG4gICAgY2FjaGU/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgZmluaXNoZXMgKGFmdGVyIHN1Y2Nlc3MgYW5kIGVycm9yIGNhbGxiYWNrcyBhcmUgZXhlY3V0ZWQpLiBUaGUgZnVuY3Rpb24gZ2V0cyBwYXNzZWQgdHdvIGFyZ3VtZW50czogVGhlIGpxWEhSIChpbiBqUXVlcnkgMS40LngsIFhNTEhUVFBSZXF1ZXN0KSBvYmplY3QgYW5kIGEgc3RyaW5nIGNhdGVnb3JpemluZyB0aGUgc3RhdHVzIG9mIHRoZSByZXF1ZXN0IChcInN1Y2Nlc3NcIiwgXCJub3Rtb2RpZmllZFwiLCBcImVycm9yXCIsIFwidGltZW91dFwiLCBcImFib3J0XCIsIG9yIFwicGFyc2VyZXJyb3JcIikuIEFzIG9mIGpRdWVyeSAxLjUsIHRoZSBjb21wbGV0ZSBzZXR0aW5nIGNhbiBhY2NlcHQgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLiBFYWNoIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGluIHR1cm4uIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKi9cbiAgICBjb21wbGV0ZT8gKGpxWEhSOiBKUXVlcnlYSFIsIHRleHRTdGF0dXM6IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3Qgb2Ygc3RyaW5nL3JlZ3VsYXItZXhwcmVzc2lvbiBwYWlycyB0aGF0IGRldGVybWluZSBob3cgalF1ZXJ5IHdpbGwgcGFyc2UgdGhlIHJlc3BvbnNlLCBnaXZlbiBpdHMgY29udGVudCB0eXBlLiAodmVyc2lvbiBhZGRlZDogMS41KVxuICAgICAqL1xuICAgIGNvbnRlbnRzPzogeyBba2V5OiBzdHJpbmddOiBhbnk7IH07XG4gICAgLy9BY2NvcmRpbmcgdG8galF1ZXJ5LmFqYXggc291cmNlIGNvZGUsIGFqYXgncyBvcHRpb24gYWN0dWFsbHkgYWxsb3dzIGNvbnRlbnRUeXBlIHRvIHNldCB0byBcImZhbHNlXCJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYm9yaXN5YW5rb3YvRGVmaW5pdGVseVR5cGVkL2lzc3Vlcy83NDJcbiAgICAvKipcbiAgICAgKiBXaGVuIHNlbmRpbmcgZGF0YSB0byB0aGUgc2VydmVyLCB1c2UgdGhpcyBjb250ZW50IHR5cGUuIERlZmF1bHQgaXMgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIiwgd2hpY2ggaXMgZmluZSBmb3IgbW9zdCBjYXNlcy4gSWYgeW91IGV4cGxpY2l0bHkgcGFzcyBpbiBhIGNvbnRlbnQtdHlwZSB0byAkLmFqYXgoKSwgdGhlbiBpdCBpcyBhbHdheXMgc2VudCB0byB0aGUgc2VydmVyIChldmVuIGlmIG5vIGRhdGEgaXMgc2VudCkuIFRoZSBXM0MgWE1MSHR0cFJlcXVlc3Qgc3BlY2lmaWNhdGlvbiBkaWN0YXRlcyB0aGF0IHRoZSBjaGFyc2V0IGlzIGFsd2F5cyBVVEYtODsgc3BlY2lmeWluZyBhbm90aGVyIGNoYXJzZXQgd2lsbCBub3QgZm9yY2UgdGhlIGJyb3dzZXIgdG8gY2hhbmdlIHRoZSBlbmNvZGluZy5cbiAgICAgKi9cbiAgICBjb250ZW50VHlwZT86IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGlzIG9iamVjdCB3aWxsIGJlIG1hZGUgdGhlIGNvbnRleHQgb2YgYWxsIEFqYXgtcmVsYXRlZCBjYWxsYmFja3MuIEJ5IGRlZmF1bHQsIHRoZSBjb250ZXh0IGlzIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGFqYXggc2V0dGluZ3MgdXNlZCBpbiB0aGUgY2FsbCAoJC5hamF4U2V0dGluZ3MgbWVyZ2VkIHdpdGggdGhlIHNldHRpbmdzIHBhc3NlZCB0byAkLmFqYXgpLlxuICAgICAqL1xuICAgIGNvbnRleHQ/OiBhbnk7XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YVR5cGUtdG8tZGF0YVR5cGUgY29udmVydGVycy4gRWFjaCBjb252ZXJ0ZXIncyB2YWx1ZSBpcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgb2YgdGhlIHJlc3BvbnNlLiAodmVyc2lvbiBhZGRlZDogMS41KVxuICAgICAqL1xuICAgIGNvbnZlcnRlcnM/OiB7IFtrZXk6IHN0cmluZ106IGFueTsgfTtcbiAgICAvKipcbiAgICAgKiBJZiB5b3Ugd2lzaCB0byBmb3JjZSBhIGNyb3NzRG9tYWluIHJlcXVlc3QgKHN1Y2ggYXMgSlNPTlApIG9uIHRoZSBzYW1lIGRvbWFpbiwgc2V0IHRoZSB2YWx1ZSBvZiBjcm9zc0RvbWFpbiB0byB0cnVlLiBUaGlzIGFsbG93cywgZm9yIGV4YW1wbGUsIHNlcnZlci1zaWRlIHJlZGlyZWN0aW9uIHRvIGFub3RoZXIgZG9tYWluLiAodmVyc2lvbiBhZGRlZDogMS41KVxuICAgICAqL1xuICAgIGNyb3NzRG9tYWluPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEYXRhIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlci4gSXQgaXMgY29udmVydGVkIHRvIGEgcXVlcnkgc3RyaW5nLCBpZiBub3QgYWxyZWFkeSBhIHN0cmluZy4gSXQncyBhcHBlbmRlZCB0byB0aGUgdXJsIGZvciBHRVQtcmVxdWVzdHMuIFNlZSBwcm9jZXNzRGF0YSBvcHRpb24gdG8gcHJldmVudCB0aGlzIGF1dG9tYXRpYyBwcm9jZXNzaW5nLiBPYmplY3QgbXVzdCBiZSBLZXkvVmFsdWUgcGFpcnMuIElmIHZhbHVlIGlzIGFuIEFycmF5LCBqUXVlcnkgc2VyaWFsaXplcyBtdWx0aXBsZSB2YWx1ZXMgd2l0aCBzYW1lIGtleSBiYXNlZCBvbiB0aGUgdmFsdWUgb2YgdGhlIHRyYWRpdGlvbmFsIHNldHRpbmcgKGRlc2NyaWJlZCBiZWxvdykuXG4gICAgICovXG4gICAgZGF0YT86IGFueTtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGJlIHVzZWQgdG8gaGFuZGxlIHRoZSByYXcgcmVzcG9uc2UgZGF0YSBvZiBYTUxIdHRwUmVxdWVzdC5UaGlzIGlzIGEgcHJlLWZpbHRlcmluZyBmdW5jdGlvbiB0byBzYW5pdGl6ZSB0aGUgcmVzcG9uc2UuIFlvdSBzaG91bGQgcmV0dXJuIHRoZSBzYW5pdGl6ZWQgZGF0YS4gVGhlIGZ1bmN0aW9uIGFjY2VwdHMgdHdvIGFyZ3VtZW50czogVGhlIHJhdyBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBhbmQgdGhlICdkYXRhVHlwZScgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGRhdGFGaWx0ZXI/IChkYXRhOiBhbnksIHR5OiBhbnkpOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgZGF0YSB0aGF0IHlvdSdyZSBleHBlY3RpbmcgYmFjayBmcm9tIHRoZSBzZXJ2ZXIuIElmIG5vbmUgaXMgc3BlY2lmaWVkLCBqUXVlcnkgd2lsbCB0cnkgdG8gaW5mZXIgaXQgYmFzZWQgb24gdGhlIE1JTUUgdHlwZSBvZiB0aGUgcmVzcG9uc2UgKGFuIFhNTCBNSU1FIHR5cGUgd2lsbCB5aWVsZCBYTUwsIGluIDEuNCBKU09OIHdpbGwgeWllbGQgYSBKYXZhU2NyaXB0IG9iamVjdCwgaW4gMS40IHNjcmlwdCB3aWxsIGV4ZWN1dGUgdGhlIHNjcmlwdCwgYW5kIGFueXRoaW5nIGVsc2Ugd2lsbCBiZSByZXR1cm5lZCBhcyBhIHN0cmluZykuIFxuICAgICAqL1xuICAgIGRhdGFUeXBlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGlmIHRoZSByZXF1ZXN0IGZhaWxzLiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgdGhyZWUgYXJndW1lbnRzOiBUaGUganFYSFIgKGluIGpRdWVyeSAxLjQueCwgWE1MSHR0cFJlcXVlc3QpIG9iamVjdCwgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkIGFuZCBhbiBvcHRpb25hbCBleGNlcHRpb24gb2JqZWN0LCBpZiBvbmUgb2NjdXJyZWQuIFBvc3NpYmxlIHZhbHVlcyBmb3IgdGhlIHNlY29uZCBhcmd1bWVudCAoYmVzaWRlcyBudWxsKSBhcmUgXCJ0aW1lb3V0XCIsIFwiZXJyb3JcIiwgXCJhYm9ydFwiLCBhbmQgXCJwYXJzZXJlcnJvclwiLiBXaGVuIGFuIEhUVFAgZXJyb3Igb2NjdXJzLCBlcnJvclRocm93biByZWNlaXZlcyB0aGUgdGV4dHVhbCBwb3J0aW9uIG9mIHRoZSBIVFRQIHN0YXR1cywgc3VjaCBhcyBcIk5vdCBGb3VuZFwiIG9yIFwiSW50ZXJuYWwgU2VydmVyIEVycm9yLlwiIEFzIG9mIGpRdWVyeSAxLjUsIHRoZSBlcnJvciBzZXR0aW5nIGNhbiBhY2NlcHQgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLiBFYWNoIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGluIHR1cm4uIE5vdGU6IFRoaXMgaGFuZGxlciBpcyBub3QgY2FsbGVkIGZvciBjcm9zcy1kb21haW4gc2NyaXB0IGFuZCBjcm9zcy1kb21haW4gSlNPTlAgcmVxdWVzdHMuIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKi9cbiAgICBlcnJvcj8gKGpxWEhSOiBKUXVlcnlYSFIsIHRleHRTdGF0dXM6IHN0cmluZywgZXJyb3JUaHJvd246IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHRyaWdnZXIgZ2xvYmFsIEFqYXggZXZlbnQgaGFuZGxlcnMgZm9yIHRoaXMgcmVxdWVzdC4gVGhlIGRlZmF1bHQgaXMgdHJ1ZS4gU2V0IHRvIGZhbHNlIHRvIHByZXZlbnQgdGhlIGdsb2JhbCBoYW5kbGVycyBsaWtlIGFqYXhTdGFydCBvciBhamF4U3RvcCBmcm9tIGJlaW5nIHRyaWdnZXJlZC4gVGhpcyBjYW4gYmUgdXNlZCB0byBjb250cm9sIHZhcmlvdXMgQWpheCBFdmVudHMuXG4gICAgICovXG4gICAgZ2xvYmFsPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3Qgb2YgYWRkaXRpb25hbCBoZWFkZXIga2V5L3ZhbHVlIHBhaXJzIHRvIHNlbmQgYWxvbmcgd2l0aCByZXF1ZXN0cyB1c2luZyB0aGUgWE1MSHR0cFJlcXVlc3QgdHJhbnNwb3J0LiBUaGUgaGVhZGVyIFgtUmVxdWVzdGVkLVdpdGg6IFhNTEh0dHBSZXF1ZXN0IGlzIGFsd2F5cyBhZGRlZCwgYnV0IGl0cyBkZWZhdWx0IFhNTEh0dHBSZXF1ZXN0IHZhbHVlIGNhbiBiZSBjaGFuZ2VkIGhlcmUuIFZhbHVlcyBpbiB0aGUgaGVhZGVycyBzZXR0aW5nIGNhbiBhbHNvIGJlIG92ZXJ3cml0dGVuIGZyb20gd2l0aGluIHRoZSBiZWZvcmVTZW5kIGZ1bmN0aW9uLiAodmVyc2lvbiBhZGRlZDogMS41KVxuICAgICAqL1xuICAgIGhlYWRlcnM/OiB7IFtrZXk6IHN0cmluZ106IGFueTsgfTtcbiAgICAvKipcbiAgICAgKiBBbGxvdyB0aGUgcmVxdWVzdCB0byBiZSBzdWNjZXNzZnVsIG9ubHkgaWYgdGhlIHJlc3BvbnNlIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHJlcXVlc3QuIFRoaXMgaXMgZG9uZSBieSBjaGVja2luZyB0aGUgTGFzdC1Nb2RpZmllZCBoZWFkZXIuIERlZmF1bHQgdmFsdWUgaXMgZmFsc2UsIGlnbm9yaW5nIHRoZSBoZWFkZXIuIEluIGpRdWVyeSAxLjQgdGhpcyB0ZWNobmlxdWUgYWxzbyBjaGVja3MgdGhlICdldGFnJyBzcGVjaWZpZWQgYnkgdGhlIHNlcnZlciB0byBjYXRjaCB1bm1vZGlmaWVkIGRhdGEuXG4gICAgICovXG4gICAgaWZNb2RpZmllZD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQWxsb3cgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgdG8gYmUgcmVjb2duaXplZCBhcyBcImxvY2FsLFwiIChlLmcuIHRoZSBmaWxlc3lzdGVtKSwgZXZlbiBpZiBqUXVlcnkgZG9lcyBub3QgcmVjb2duaXplIGl0IGFzIHN1Y2ggYnkgZGVmYXVsdC4gVGhlIGZvbGxvd2luZyBwcm90b2NvbHMgYXJlIGN1cnJlbnRseSByZWNvZ25pemVkIGFzIGxvY2FsOiBmaWxlLCAqLWV4dGVuc2lvbiwgYW5kIHdpZGdldC4gSWYgdGhlIGlzTG9jYWwgc2V0dGluZyBuZWVkcyBtb2RpZmljYXRpb24sIGl0IGlzIHJlY29tbWVuZGVkIHRvIGRvIHNvIG9uY2UgaW4gdGhlICQuYWpheFNldHVwKCkgbWV0aG9kLiAodmVyc2lvbiBhZGRlZDogMS41LjEpXG4gICAgICovXG4gICAgaXNMb2NhbD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIG5hbWUgaW4gYSBqc29ucCByZXF1ZXN0LiBUaGlzIHZhbHVlIHdpbGwgYmUgdXNlZCBpbnN0ZWFkIG9mICdjYWxsYmFjaycgaW4gdGhlICdjYWxsYmFjaz0/JyBwYXJ0IG9mIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIHVybC4gU28ge2pzb25wOidvbkpTT05QTG9hZCd9IHdvdWxkIHJlc3VsdCBpbiAnb25KU09OUExvYWQ9PycgcGFzc2VkIHRvIHRoZSBzZXJ2ZXIuIEFzIG9mIGpRdWVyeSAxLjUsIHNldHRpbmcgdGhlIGpzb25wIG9wdGlvbiB0byBmYWxzZSBwcmV2ZW50cyBqUXVlcnkgZnJvbSBhZGRpbmcgdGhlIFwiP2NhbGxiYWNrXCIgc3RyaW5nIHRvIHRoZSBVUkwgb3IgYXR0ZW1wdGluZyB0byB1c2UgXCI9P1wiIGZvciB0cmFuc2Zvcm1hdGlvbi4gSW4gdGhpcyBjYXNlLCB5b3Ugc2hvdWxkIGFsc28gZXhwbGljaXRseSBzZXQgdGhlIGpzb25wQ2FsbGJhY2sgc2V0dGluZy4gRm9yIGV4YW1wbGUsIHsganNvbnA6IGZhbHNlLCBqc29ucENhbGxiYWNrOiBcImNhbGxiYWNrTmFtZVwiIH1cbiAgICAgKi9cbiAgICBqc29ucD86IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbiBuYW1lIGZvciBhIEpTT05QIHJlcXVlc3QuIFRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIHJhbmRvbSBuYW1lIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IGpRdWVyeS4gSXQgaXMgcHJlZmVyYWJsZSB0byBsZXQgalF1ZXJ5IGdlbmVyYXRlIGEgdW5pcXVlIG5hbWUgYXMgaXQnbGwgbWFrZSBpdCBlYXNpZXIgdG8gbWFuYWdlIHRoZSByZXF1ZXN0cyBhbmQgcHJvdmlkZSBjYWxsYmFja3MgYW5kIGVycm9yIGhhbmRsaW5nLiBZb3UgbWF5IHdhbnQgdG8gc3BlY2lmeSB0aGUgY2FsbGJhY2sgd2hlbiB5b3Ugd2FudCB0byBlbmFibGUgYmV0dGVyIGJyb3dzZXIgY2FjaGluZyBvZiBHRVQgcmVxdWVzdHMuIEFzIG9mIGpRdWVyeSAxLjUsIHlvdSBjYW4gYWxzbyB1c2UgYSBmdW5jdGlvbiBmb3IgdGhpcyBzZXR0aW5nLCBpbiB3aGljaCBjYXNlIHRoZSB2YWx1ZSBvZiBqc29ucENhbGxiYWNrIGlzIHNldCB0byB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoYXQgZnVuY3Rpb24uXG4gICAgICovXG4gICAganNvbnBDYWxsYmFjaz86IGFueTtcbiAgICAvKipcbiAgICAgKiBBIG1pbWUgdHlwZSB0byBvdmVycmlkZSB0aGUgWEhSIG1pbWUgdHlwZS4gKHZlcnNpb24gYWRkZWQ6IDEuNS4xKVxuICAgICAqL1xuICAgIG1pbWVUeXBlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEEgcGFzc3dvcmQgdG8gYmUgdXNlZCB3aXRoIFhNTEh0dHBSZXF1ZXN0IGluIHJlc3BvbnNlIHRvIGFuIEhUVFAgYWNjZXNzIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuXG4gICAgICovXG4gICAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgZGF0YSBwYXNzZWQgaW4gdG8gdGhlIGRhdGEgb3B0aW9uIGFzIGFuIG9iamVjdCAodGVjaG5pY2FsbHksIGFueXRoaW5nIG90aGVyIHRoYW4gYSBzdHJpbmcpIHdpbGwgYmUgcHJvY2Vzc2VkIGFuZCB0cmFuc2Zvcm1lZCBpbnRvIGEgcXVlcnkgc3RyaW5nLCBmaXR0aW5nIHRvIHRoZSBkZWZhdWx0IGNvbnRlbnQtdHlwZSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLiBJZiB5b3Ugd2FudCB0byBzZW5kIGEgRE9NRG9jdW1lbnQsIG9yIG90aGVyIG5vbi1wcm9jZXNzZWQgZGF0YSwgc2V0IHRoaXMgb3B0aW9uIHRvIGZhbHNlLlxuICAgICAqL1xuICAgIHByb2Nlc3NEYXRhPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPbmx5IGFwcGxpZXMgd2hlbiB0aGUgXCJzY3JpcHRcIiB0cmFuc3BvcnQgaXMgdXNlZCAoZS5nLiwgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIHdpdGggXCJqc29ucFwiIG9yIFwic2NyaXB0XCIgZGF0YVR5cGUgYW5kIFwiR0VUXCIgdHlwZSkuIFNldHMgdGhlIGNoYXJzZXQgYXR0cmlidXRlIG9uIHRoZSBzY3JpcHQgdGFnIHVzZWQgaW4gdGhlIHJlcXVlc3QuIFVzZWQgd2hlbiB0aGUgY2hhcmFjdGVyIHNldCBvbiB0aGUgbG9jYWwgcGFnZSBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIG9uZSBvbiB0aGUgcmVtb3RlIHNjcmlwdC5cbiAgICAgKi9cbiAgICBzY3JpcHRDaGFyc2V0Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBvZiBudW1lcmljIEhUVFAgY29kZXMgYW5kIGZ1bmN0aW9ucyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVzcG9uc2UgaGFzIHRoZSBjb3JyZXNwb25kaW5nIGNvZGUuIGYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bCwgdGhlIHN0YXR1cyBjb2RlIGZ1bmN0aW9ucyB0YWtlIHRoZSBzYW1lIHBhcmFtZXRlcnMgYXMgdGhlIHN1Y2Nlc3MgY2FsbGJhY2s7IGlmIGl0IHJlc3VsdHMgaW4gYW4gZXJyb3IgKGluY2x1ZGluZyAzeHggcmVkaXJlY3QpLCB0aGV5IHRha2UgdGhlIHNhbWUgcGFyYW1ldGVycyBhcyB0aGUgZXJyb3IgY2FsbGJhY2suICh2ZXJzaW9uIGFkZGVkOiAxLjUpXG4gICAgICovXG4gICAgc3RhdHVzQ29kZT86IHsgW2tleTogc3RyaW5nXTogYW55OyB9O1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLiBUaGUgZnVuY3Rpb24gZ2V0cyBwYXNzZWQgdGhyZWUgYXJndW1lbnRzOiBUaGUgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXIsIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIGRhdGFUeXBlIHBhcmFtZXRlcjsgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgc3RhdHVzOyBhbmQgdGhlIGpxWEhSIChpbiBqUXVlcnkgMS40LngsIFhNTEh0dHBSZXF1ZXN0KSBvYmplY3QuIEFzIG9mIGpRdWVyeSAxLjUsIHRoZSBzdWNjZXNzIHNldHRpbmcgY2FuIGFjY2VwdCBhbiBhcnJheSBvZiBmdW5jdGlvbnMuIEVhY2ggZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdHVybi4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LlxuICAgICAqL1xuICAgIHN1Y2Nlc3M/IChkYXRhOiBhbnksIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUik6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXQgYSB0aW1lb3V0IChpbiBtaWxsaXNlY29uZHMpIGZvciB0aGUgcmVxdWVzdC4gVGhpcyB3aWxsIG92ZXJyaWRlIGFueSBnbG9iYWwgdGltZW91dCBzZXQgd2l0aCAkLmFqYXhTZXR1cCgpLiBUaGUgdGltZW91dCBwZXJpb2Qgc3RhcnRzIGF0IHRoZSBwb2ludCB0aGUgJC5hamF4IGNhbGwgaXMgbWFkZTsgaWYgc2V2ZXJhbCBvdGhlciByZXF1ZXN0cyBhcmUgaW4gcHJvZ3Jlc3MgYW5kIHRoZSBicm93c2VyIGhhcyBubyBjb25uZWN0aW9ucyBhdmFpbGFibGUsIGl0IGlzIHBvc3NpYmxlIGZvciBhIHJlcXVlc3QgdG8gdGltZSBvdXQgYmVmb3JlIGl0IGNhbiBiZSBzZW50LiBJbiBqUXVlcnkgMS40LnggYW5kIGJlbG93LCB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IHdpbGwgYmUgaW4gYW4gaW52YWxpZCBzdGF0ZSBpZiB0aGUgcmVxdWVzdCB0aW1lcyBvdXQ7IGFjY2Vzc2luZyBhbnkgb2JqZWN0IG1lbWJlcnMgbWF5IHRocm93IGFuIGV4Y2VwdGlvbi4gSW4gRmlyZWZveCAzLjArIG9ubHksIHNjcmlwdCBhbmQgSlNPTlAgcmVxdWVzdHMgY2Fubm90IGJlIGNhbmNlbGxlZCBieSBhIHRpbWVvdXQ7IHRoZSBzY3JpcHQgd2lsbCBydW4gZXZlbiBpZiBpdCBhcnJpdmVzIGFmdGVyIHRoZSB0aW1lb3V0IHBlcmlvZC5cbiAgICAgKi9cbiAgICB0aW1lb3V0PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdpc2ggdG8gdXNlIHRoZSB0cmFkaXRpb25hbCBzdHlsZSBvZiBwYXJhbSBzZXJpYWxpemF0aW9uLlxuICAgICAqL1xuICAgIHRyYWRpdGlvbmFsPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiByZXF1ZXN0IHRvIG1ha2UgKFwiUE9TVFwiIG9yIFwiR0VUXCIpLCBkZWZhdWx0IGlzIFwiR0VUXCIuIE5vdGU6IE90aGVyIEhUVFAgcmVxdWVzdCBtZXRob2RzLCBzdWNoIGFzIFBVVCBhbmQgREVMRVRFLCBjYW4gYWxzbyBiZSB1c2VkIGhlcmUsIGJ1dCB0aGV5IGFyZSBub3Qgc3VwcG9ydGVkIGJ5IGFsbCBicm93c2Vycy5cbiAgICAgKi9cbiAgICB0eXBlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqL1xuICAgIHVybD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIHVzZXJuYW1lIHRvIGJlIHVzZWQgd2l0aCBYTUxIdHRwUmVxdWVzdCBpbiByZXNwb25zZSB0byBhbiBIVFRQIGFjY2VzcyBhdXRoZW50aWNhdGlvbiByZXF1ZXN0LlxuICAgICAqL1xuICAgIHVzZXJuYW1lPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGZvciBjcmVhdGluZyB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LiBEZWZhdWx0cyB0byB0aGUgQWN0aXZlWE9iamVjdCB3aGVuIGF2YWlsYWJsZSAoSUUpLCB0aGUgWE1MSHR0cFJlcXVlc3Qgb3RoZXJ3aXNlLiBPdmVycmlkZSB0byBwcm92aWRlIHlvdXIgb3duIGltcGxlbWVudGF0aW9uIGZvciBYTUxIdHRwUmVxdWVzdCBvciBlbmhhbmNlbWVudHMgdG8gdGhlIGZhY3RvcnkuXG4gICAgICovXG4gICAgeGhyPzogYW55O1xuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBvZiBmaWVsZE5hbWUtZmllbGRWYWx1ZSBwYWlycyB0byBzZXQgb24gdGhlIG5hdGl2ZSBYSFIgb2JqZWN0LiBGb3IgZXhhbXBsZSwgeW91IGNhbiB1c2UgaXQgdG8gc2V0IHdpdGhDcmVkZW50aWFscyB0byB0cnVlIGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMgaWYgbmVlZGVkLiBJbiBqUXVlcnkgMS41LCB0aGUgd2l0aENyZWRlbnRpYWxzIHByb3BlcnR5IHdhcyBub3QgcHJvcGFnYXRlZCB0byB0aGUgbmF0aXZlIFhIUiBhbmQgdGh1cyBDT1JTIHJlcXVlc3RzIHJlcXVpcmluZyBpdCB3b3VsZCBpZ25vcmUgdGhpcyBmbGFnLiBGb3IgdGhpcyByZWFzb24sIHdlIHJlY29tbWVuZCB1c2luZyBqUXVlcnkgMS41LjErIHNob3VsZCB5b3UgcmVxdWlyZSB0aGUgdXNlIG9mIGl0LiAodmVyc2lvbiBhZGRlZDogMS41LjEpXG4gICAgICovXG4gICAgeGhyRmllbGRzPzogeyBba2V5OiBzdHJpbmddOiBhbnk7IH07XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciB0aGUganFYSFIgb2JqZWN0XG4gKi9cbmludGVyZmFjZSBKUXVlcnlYSFIgZXh0ZW5kcyBYTUxIdHRwUmVxdWVzdCwgSlF1ZXJ5UHJvbWlzZTxhbnk+IHtcbiAgICAvKipcbiAgICAgKiBUaGUgLm92ZXJyaWRlTWltZVR5cGUoKSBtZXRob2QgbWF5IGJlIHVzZWQgaW4gdGhlIGJlZm9yZVNlbmQoKSBjYWxsYmFjayBmdW5jdGlvbiwgZm9yIGV4YW1wbGUsIHRvIG1vZGlmeSB0aGUgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlci4gQXMgb2YgalF1ZXJ5IDEuNS4xLCB0aGUganFYSFIgb2JqZWN0IGFsc28gY29udGFpbnMgdGhlIG92ZXJyaWRlTWltZVR5cGUoKSBtZXRob2QgKGl0IHdhcyBhdmFpbGFibGUgaW4galF1ZXJ5IDEuNC54LCBhcyB3ZWxsLCBidXQgd2FzIHRlbXBvcmFyaWx5IHJlbW92ZWQgaW4galF1ZXJ5IDEuNSkuIFxuICAgICAqL1xuICAgIG92ZXJyaWRlTWltZVR5cGUobWltZVR5cGU6IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBDYW5jZWwgdGhlIHJlcXVlc3QuIFxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXR1c1RleHQgQSBzdHJpbmcgcGFzc2VkIGFzIHRoZSB0ZXh0U3RhdHVzIHBhcmFtZXRlciBmb3IgdGhlIGRvbmUgY2FsbGJhY2suIERlZmF1bHQgdmFsdWU6IFwiY2FuY2VsZWRcIlxuICAgICAqL1xuICAgIGFib3J0KHN0YXR1c1RleHQ/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEluY29ycG9yYXRlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiB0aGUgLmRvbmUoKSBhbmQgLmZhaWwoKSBtZXRob2RzLCBhbGxvd2luZyAoYXMgb2YgalF1ZXJ5IDEuOCkgdGhlIHVuZGVybHlpbmcgUHJvbWlzZSB0byBiZSBtYW5pcHVsYXRlZC4gUmVmZXIgdG8gZGVmZXJyZWQudGhlbigpIGZvciBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLlxuICAgICAqL1xuICAgIHRoZW4oZG9uZUNhbGxiYWNrOiAoZGF0YTogYW55LCB0ZXh0U3RhdHVzOiBzdHJpbmcsIGpxWEhSOiBKUXVlcnlYSFIpID0+IHZvaWQsIGZhaWxDYWxsYmFjaz86IChqcVhIUjogSlF1ZXJ5WEhSLCB0ZXh0U3RhdHVzOiBzdHJpbmcsIGVycm9yVGhyb3duOiBhbnkpID0+IHZvaWQpOiBKUXVlcnlQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY29udGFpbmluZyB0aGUgcGFyc2VkIHJlc3BvbnNlIGlmIHRoZSByZXNwb25zZSBDb250ZW50LVR5cGUgaXMganNvblxuICAgICAqL1xuICAgIHJlc3BvbnNlSlNPTj86IGFueTtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBKUXVlcnkgY2FsbGJhY2tcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeUNhbGxiYWNrIHtcbiAgICAvKipcbiAgICAgKiBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIGEgY2FsbGJhY2sgbGlzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgdG8gYmUgYWRkZWQgdG8gdGhlIGNhbGxiYWNrIGxpc3QuXG4gICAgICovXG4gICAgYWRkKGNhbGxiYWNrczogRnVuY3Rpb24pOiBKUXVlcnlDYWxsYmFjaztcbiAgICAvKipcbiAgICAgKiBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIGEgY2FsbGJhY2sgbGlzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgdG8gYmUgYWRkZWQgdG8gdGhlIGNhbGxiYWNrIGxpc3QuXG4gICAgICovXG4gICAgYWRkKGNhbGxiYWNrczogRnVuY3Rpb25bXSk6IEpRdWVyeUNhbGxiYWNrO1xuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBhIGNhbGxiYWNrIGxpc3QgZnJvbSBkb2luZyBhbnl0aGluZyBtb3JlLlxuICAgICAqL1xuICAgIGRpc2FibGUoKTogSlF1ZXJ5Q2FsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGNhbGxiYWNrcyBsaXN0IGhhcyBiZWVuIGRpc2FibGVkLlxuICAgICAqL1xuICAgIGRpc2FibGVkKCk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIG9mIHRoZSBjYWxsYmFja3MgZnJvbSBhIGxpc3QuXG4gICAgICovXG4gICAgZW1wdHkoKTogSlF1ZXJ5Q2FsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGFsbCBvZiB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgICAqIFxuICAgICAqIEBwYXJhbSBhcmd1bWVudHMgVGhlIGFyZ3VtZW50IG9yIGxpc3Qgb2YgYXJndW1lbnRzIHRvIHBhc3MgYmFjayB0byB0aGUgY2FsbGJhY2sgbGlzdC5cbiAgICAgKi9cbiAgICBmaXJlKC4uLmFyZ3VtZW50czogYW55W10pOiBKUXVlcnlDYWxsYmFjaztcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAqL1xuICAgIGZpcmVkKCk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGFsbCBjYWxsYmFja3MgaW4gYSBsaXN0IHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY29udGV4dCBBIHJlZmVyZW5jZSB0byB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgY2FsbGJhY2tzIGluIHRoZSBsaXN0IHNob3VsZCBiZSBmaXJlZC5cbiAgICAgKiBAcGFyYW0gYXJndW1lbnRzIEFuIGFyZ3VtZW50LCBvciBhcnJheSBvZiBhcmd1bWVudHMsIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrcyBpbiB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmaXJlV2l0aChjb250ZXh0PzogYW55LCAuLi5hcmdzOiBhbnlbXSk6IEpRdWVyeUNhbGxiYWNrO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBzdXBwbGllZCBjYWxsYmFjayBpcyBpbiBhIGxpc3RcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHNlYXJjaCBmb3IuXG4gICAgICovXG4gICAgaGFzKGNhbGxiYWNrOiBGdW5jdGlvbik6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBMb2NrIGEgY2FsbGJhY2sgbGlzdCBpbiBpdHMgY3VycmVudCBzdGF0ZS5cbiAgICAgKi9cbiAgICBsb2NrKCk6IEpRdWVyeUNhbGxiYWNrO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZSBjYWxsYmFja3MgbGlzdCBoYXMgYmVlbiBsb2NrZWQuXG4gICAgICovXG4gICAgbG9ja2VkKCk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIGZyb20gYSBjYWxsYmFjayBsaXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjYWxsYmFja3MgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSB0byBiZSByZW1vdmVkIGZyb20gdGhlIGNhbGxiYWNrIGxpc3QuXG4gICAgICovXG4gICAgcmVtb3ZlKGNhbGxiYWNrczogRnVuY3Rpb24pOiBKUXVlcnlDYWxsYmFjaztcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIGZyb20gYSBjYWxsYmFjayBsaXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjYWxsYmFja3MgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSB0byBiZSByZW1vdmVkIGZyb20gdGhlIGNhbGxiYWNrIGxpc3QuXG4gICAgICovXG4gICAgcmVtb3ZlKGNhbGxiYWNrczogRnVuY3Rpb25bXSk6IEpRdWVyeUNhbGxiYWNrO1xufVxuXG4vKipcbiAqIEFsbG93cyBqUXVlcnkgUHJvbWlzZXMgdG8gaW50ZXJvcCB3aXRoIG5vbi1qUXVlcnkgcHJvbWlzZXNcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeUdlbmVyaWNQcm9taXNlPFQ+IHtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZXNvbHZlZCwgcmVqZWN0ZWQsIG9yIHN0aWxsIGluIHByb2dyZXNzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBkb25lRmlsdGVyIEEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICogQHBhcmFtIGZhaWxGaWx0ZXIgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICovXG4gICAgdGhlbjxVPihkb25lRmlsdGVyOiAodmFsdWU6IFQpID0+IFV8SlF1ZXJ5R2VuZXJpY1Byb21pc2U8VT4sIGZhaWxGaWx0ZXI/OiAocmVhc29uOiBhbnkpID0+IFV8SlF1ZXJ5R2VuZXJpY1Byb21pc2U8VT4pOiBKUXVlcnlHZW5lcmljUHJvbWlzZTxVPjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBKUXVlcnkgcHJvbWlzZS9kZWZlcnJlZCBjYWxsYmFja3NcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeVByb21pc2VDYWxsYmFjazxUPiB7XG4gICAgKHZhbHVlPzogVCwgLi4uYXJnczogYW55W10pOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSlF1ZXJ5UHJvbWlzZU9wZXJhdG9yPFQsIFI+IHtcbiAgICAoY2FsbGJhY2s6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPiwgLi4uY2FsbGJhY2tzOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeVByb21pc2U8Uj47XG4gICAgKGNhbGxiYWNrOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSwgLi4uY2FsbGJhY2tzOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeVByb21pc2U8Uj47XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciB0aGUgSlF1ZXJ5IHByb21pc2UsIHBhcnQgb2YgY2FsbGJhY2tzXG4gKi9cbmludGVyZmFjZSBKUXVlcnlQcm9taXNlPFQ+IHtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGFsd2F5c0NhbGxiYWNrczEgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZXNvbHZlZCBvciByZWplY3RlZC5cbiAgICAgKiBAcGFyYW0gYWx3YXlzQ2FsbGJhY2tzMiBPcHRpb25hbCBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgb3IgYXJyYXlzIG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgICAqL1xuICAgIGFsd2F5czogSlF1ZXJ5UHJvbWlzZU9wZXJhdG9yPGFueSwgVD47XG4gICAgLyoqXG4gICAgICogQWRkIGhhbmRsZXJzIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBvYmplY3QgaXMgcmVzb2x2ZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGRvbmVDYWxsYmFja3MxIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkLlxuICAgICAqIEBwYXJhbSBkb25lQ2FsbGJhY2tzMiBPcHRpb25hbCBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgb3IgYXJyYXlzIG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkLlxuICAgICAqL1xuICAgIGRvbmU6IEpRdWVyeVByb21pc2VPcGVyYXRvcjxULCBUPjtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZWplY3RlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZmFpbENhbGxiYWNrczEgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICogQHBhcmFtIGZhaWxDYWxsYmFja3MyIE9wdGlvbmFsIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBvciBhcnJheXMgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICovXG4gICAgZmFpbDogSlF1ZXJ5UHJvbWlzZU9wZXJhdG9yPGFueSwgVD47XG4gICAgLyoqXG4gICAgICogQWRkIGhhbmRsZXJzIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBvYmplY3QgZ2VuZXJhdGVzIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHByb2dyZXNzQ2FsbGJhY2tzIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGdlbmVyYXRlcyBwcm9ncmVzcyBub3RpZmljYXRpb25zLlxuICAgICAqL1xuICAgIHByb2dyZXNzKHByb2dyZXNzQ2FsbGJhY2s6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPik6IEpRdWVyeVByb21pc2U8VD47XG4gICAgcHJvZ3Jlc3MocHJvZ3Jlc3NDYWxsYmFja3M6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5UHJvbWlzZTxUPjtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB0aGUgY3VycmVudCBzdGF0ZSBvZiBhIERlZmVycmVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0ZSgpOiBzdHJpbmc7XG5cbiAgICAvLyBEZXByZWNhdGVkIC0gZ2l2ZW4gbm8gdHlwaW5nc1xuICAgIHBpcGUoZG9uZUZpbHRlcj86ICh4OiBhbnkpID0+IGFueSwgZmFpbEZpbHRlcj86ICh4OiBhbnkpID0+IGFueSwgcHJvZ3Jlc3NGaWx0ZXI/OiAoeDogYW55KSA9PiBhbnkpOiBKUXVlcnlQcm9taXNlPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZXNvbHZlZCwgcmVqZWN0ZWQsIG9yIHN0aWxsIGluIHByb2dyZXNzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBkb25lRmlsdGVyIEEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICogQHBhcmFtIGZhaWxGaWx0ZXIgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICogQHBhcmFtIHByb2dyZXNzRmlsdGVyIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gcHJvZ3Jlc3Mgbm90aWZpY2F0aW9ucyBhcmUgc2VudCB0byB0aGUgRGVmZXJyZWQuXG4gICAgICovXG4gICAgdGhlbjxVPihkb25lRmlsdGVyOiAodmFsdWU6IFQpID0+IFV8SlF1ZXJ5R2VuZXJpY1Byb21pc2U8VT4sIGZhaWxGaWx0ZXI/OiAoLi4ucmVhc29uczogYW55W10pID0+IFV8SlF1ZXJ5R2VuZXJpY1Byb21pc2U8VT4sIHByb2dyZXNzRmlsdGVyPzogKC4uLnByb2dyZXNzaW9uOiBhbnlbXSkgPT4gYW55KTogSlF1ZXJ5UHJvbWlzZTxVPjtcblxuICAgIC8vIEJlY2F1c2UgSlF1ZXJ5IFByb21pc2VzIFN1Y2tcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZXNvbHZlZCwgcmVqZWN0ZWQsIG9yIHN0aWxsIGluIHByb2dyZXNzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBkb25lRmlsdGVyIEEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICogQHBhcmFtIGZhaWxGaWx0ZXIgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICogQHBhcmFtIHByb2dyZXNzRmlsdGVyIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gcHJvZ3Jlc3Mgbm90aWZpY2F0aW9ucyBhcmUgc2VudCB0byB0aGUgRGVmZXJyZWQuXG4gICAgICovXG4gICAgdGhlbjxVPihkb25lRmlsdGVyOiAoLi4udmFsdWVzOiBhbnlbXSkgPT4gVXxKUXVlcnlHZW5lcmljUHJvbWlzZTxVPiwgZmFpbEZpbHRlcj86ICguLi5yZWFzb25zOiBhbnlbXSkgPT4gVXxKUXVlcnlHZW5lcmljUHJvbWlzZTxVPiwgcHJvZ3Jlc3NGaWx0ZXI/OiAoLi4ucHJvZ3Jlc3Npb246IGFueVtdKSA9PiBhbnkpOiBKUXVlcnlQcm9taXNlPFU+O1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIEpRdWVyeSBkZWZlcnJlZCwgcGFydCBvZiBjYWxsYmFja3NcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeURlZmVycmVkPFQ+IGV4dGVuZHMgSlF1ZXJ5UHJvbWlzZTxUPiB7XG4gICAgLyoqXG4gICAgICogQWRkIGhhbmRsZXJzIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBvYmplY3QgaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBhbHdheXNDYWxsYmFja3MxIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gICAgICogQHBhcmFtIGFsd2F5c0NhbGxiYWNrczIgT3B0aW9uYWwgYWRkaXRpb25hbCBmdW5jdGlvbnMsIG9yIGFycmF5cyBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZXNvbHZlZCBvciByZWplY3RlZC5cbiAgICAgKi9cbiAgICBhbHdheXMoYWx3YXlzQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPiwgLi4uYWx3YXlzQ2FsbGJhY2tzMjogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBhbHdheXMoYWx3YXlzQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdLCAuLi5hbHdheXNDYWxsYmFja3MyOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIGFsd2F5cyhhbHdheXNDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+LCAuLi5hbHdheXNDYWxsYmFja3MyOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIGFsd2F5cyhhbHdheXNDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10sIC4uLmFsd2F5c0NhbGxiYWNrczI6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgLyoqXG4gICAgICogQWRkIGhhbmRsZXJzIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBvYmplY3QgaXMgcmVzb2x2ZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGRvbmVDYWxsYmFja3MxIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkLlxuICAgICAqIEBwYXJhbSBkb25lQ2FsbGJhY2tzMiBPcHRpb25hbCBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgb3IgYXJyYXlzIG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkLlxuICAgICAqL1xuICAgIGRvbmUoZG9uZUNhbGxiYWNrczE/OiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD4sIC4uLmRvbmVDYWxsYmFja3MyOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIGRvbmUoZG9uZUNhbGxiYWNrczE/OiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSwgLi4uZG9uZUNhbGxiYWNrczI6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgZG9uZShkb25lQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPiwgLi4uZG9uZUNhbGxiYWNrczI6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgZG9uZShkb25lQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdLCAuLi5kb25lQ2FsbGJhY2tzMjogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZWplY3RlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZmFpbENhbGxiYWNrczEgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICogQHBhcmFtIGZhaWxDYWxsYmFja3MyIE9wdGlvbmFsIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBvciBhcnJheXMgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVqZWN0ZWQuXG4gICAgICovXG4gICAgZmFpbChmYWlsQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPiwgLi4uZmFpbENhbGxiYWNrczI6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgZmFpbChmYWlsQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdLCAuLi5mYWlsQ2FsbGJhY2tzMjogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBmYWlsKGZhaWxDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+LCAuLi5mYWlsQ2FsbGJhY2tzMjogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBmYWlsKGZhaWxDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10sIC4uLmZhaWxDYWxsYmFja3MyOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGdlbmVyYXRlcyBwcm9ncmVzcyBub3RpZmljYXRpb25zLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBwcm9ncmVzc0NhbGxiYWNrcyBBIGZ1bmN0aW9uLCBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBnZW5lcmF0ZXMgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9ucy5cbiAgICAgKi9cbiAgICBwcm9ncmVzcyhwcm9ncmVzc0NhbGxiYWNrOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD4pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBwcm9ncmVzcyhwcm9ncmVzc0NhbGxiYWNrczogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcblxuICAgIC8qKlxuICAgICAqIENhbGwgdGhlIHByb2dyZXNzQ2FsbGJhY2tzIG9uIGEgRGVmZXJyZWQgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGFyZ3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgcHJvZ3Jlc3NDYWxsYmFja3MuXG4gICAgICovXG4gICAgbm90aWZ5KC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoZSBwcm9ncmVzc0NhbGxiYWNrcyBvbiBhIERlZmVycmVkIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmdzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb250ZXh0IENvbnRleHQgcGFzc2VkIHRvIHRoZSBwcm9ncmVzc0NhbGxiYWNrcyBhcyB0aGUgdGhpcyBvYmplY3QuXG4gICAgICogQHBhcmFtIGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgcHJvZ3Jlc3NDYWxsYmFja3MuXG4gICAgICovXG4gICAgbm90aWZ5V2l0aChjb250ZXh0OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG5cbiAgICAvKipcbiAgICAgKiBSZWplY3QgYSBEZWZlcnJlZCBvYmplY3QgYW5kIGNhbGwgYW55IGZhaWxDYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBmYWlsQ2FsbGJhY2tzLlxuICAgICAqL1xuICAgIHJlamVjdCguLi5hcmdzOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIC8qKlxuICAgICAqIFJlamVjdCBhIERlZmVycmVkIG9iamVjdCBhbmQgY2FsbCBhbnkgZmFpbENhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmdzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb250ZXh0IENvbnRleHQgcGFzc2VkIHRvIHRoZSBmYWlsQ2FsbGJhY2tzIGFzIHRoZSB0aGlzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gYXJncyBBbiBvcHRpb25hbCBhcnJheSBvZiBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBmYWlsQ2FsbGJhY2tzLlxuICAgICAqL1xuICAgIHJlamVjdFdpdGgoY29udGV4dDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSBhIERlZmVycmVkIG9iamVjdCBhbmQgY2FsbCBhbnkgZG9uZUNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB2YWx1ZSBGaXJzdCBhcmd1bWVudCBwYXNzZWQgdG8gZG9uZUNhbGxiYWNrcy5cbiAgICAgKiBAcGFyYW0gYXJncyBPcHRpb25hbCBzdWJzZXF1ZW50IGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGRvbmVDYWxsYmFja3MuXG4gICAgICovXG4gICAgcmVzb2x2ZSh2YWx1ZT86IFQsIC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGEgRGVmZXJyZWQgb2JqZWN0IGFuZCBjYWxsIGFueSBkb25lQ2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCBwYXNzZWQgdG8gdGhlIGRvbmVDYWxsYmFja3MgYXMgdGhlIHRoaXMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBhcmdzIEFuIG9wdGlvbmFsIGFycmF5IG9mIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGRvbmVDYWxsYmFja3MuXG4gICAgICovXG4gICAgcmVzb2x2ZVdpdGgoY29udGV4dDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgRGVmZXJyZWQncyBQcm9taXNlIG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IE9iamVjdCBvbnRvIHdoaWNoIHRoZSBwcm9taXNlIG1ldGhvZHMgaGF2ZSB0byBiZSBhdHRhY2hlZFxuICAgICAqL1xuICAgIHByb21pc2UodGFyZ2V0PzogYW55KTogSlF1ZXJ5UHJvbWlzZTxUPjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2Ugb2YgdGhlIEpRdWVyeSBleHRlbnNpb24gb2YgdGhlIFczQyBldmVudCBvYmplY3RcbiAqL1xuaW50ZXJmYWNlIEJhc2VKUXVlcnlFdmVudE9iamVjdCBleHRlbmRzIEV2ZW50IHtcbiAgICBkYXRhOiBhbnk7XG4gICAgZGVsZWdhdGVUYXJnZXQ6IEVsZW1lbnQ7XG4gICAgaXNEZWZhdWx0UHJldmVudGVkKCk6IGJvb2xlYW47XG4gICAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKTogYm9vbGVhbjtcbiAgICBpc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOiBib29sZWFuO1xuICAgIG5hbWVzcGFjZTogc3RyaW5nO1xuICAgIG9yaWdpbmFsRXZlbnQ6IEV2ZW50O1xuICAgIHByZXZlbnREZWZhdWx0KCk6IGFueTtcbiAgICByZWxhdGVkVGFyZ2V0OiBFbGVtZW50O1xuICAgIHJlc3VsdDogYW55O1xuICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOiB2b2lkO1xuICAgIHN0b3BQcm9wYWdhdGlvbigpOiB2b2lkO1xuICAgIHRhcmdldDogRWxlbWVudDtcbiAgICBwYWdlWDogbnVtYmVyO1xuICAgIHBhZ2VZOiBudW1iZXI7XG4gICAgd2hpY2g6IG51bWJlcjtcbiAgICBtZXRhS2V5OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgSlF1ZXJ5SW5wdXRFdmVudE9iamVjdCBleHRlbmRzIEJhc2VKUXVlcnlFdmVudE9iamVjdCB7XG4gICAgYWx0S2V5OiBib29sZWFuO1xuICAgIGN0cmxLZXk6IGJvb2xlYW47XG4gICAgbWV0YUtleTogYm9vbGVhbjtcbiAgICBzaGlmdEtleTogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEpRdWVyeU1vdXNlRXZlbnRPYmplY3QgZXh0ZW5kcyBKUXVlcnlJbnB1dEV2ZW50T2JqZWN0IHtcbiAgICBidXR0b246IG51bWJlcjtcbiAgICBjbGllbnRYOiBudW1iZXI7XG4gICAgY2xpZW50WTogbnVtYmVyO1xuICAgIG9mZnNldFg6IG51bWJlcjtcbiAgICBvZmZzZXRZOiBudW1iZXI7XG4gICAgcGFnZVg6IG51bWJlcjtcbiAgICBwYWdlWTogbnVtYmVyO1xuICAgIHNjcmVlblg6IG51bWJlcjtcbiAgICBzY3JlZW5ZOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBKUXVlcnlLZXlFdmVudE9iamVjdCBleHRlbmRzIEpRdWVyeUlucHV0RXZlbnRPYmplY3Qge1xuICAgIGNoYXI6IGFueTtcbiAgICBjaGFyQ29kZTogbnVtYmVyO1xuICAgIGtleTogYW55O1xuICAgIGtleUNvZGU6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEpRdWVyeUV2ZW50T2JqZWN0IGV4dGVuZHMgQmFzZUpRdWVyeUV2ZW50T2JqZWN0LCBKUXVlcnlJbnB1dEV2ZW50T2JqZWN0LCBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0LCBKUXVlcnlLZXlFdmVudE9iamVjdHtcbn1cblxuLypcbiAgICBDb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgYnJvd3NlclxuKi9cblxuaW50ZXJmYWNlIEpRdWVyeVN1cHBvcnQge1xuICAgIGFqYXg/OiBib29sZWFuO1xuICAgIGJveE1vZGVsPzogYm9vbGVhbjtcbiAgICBjaGFuZ2VCdWJibGVzPzogYm9vbGVhbjtcbiAgICBjaGVja0Nsb25lPzogYm9vbGVhbjtcbiAgICBjaGVja09uPzogYm9vbGVhbjtcbiAgICBjb3JzPzogYm9vbGVhbjtcbiAgICBjc3NGbG9hdD86IGJvb2xlYW47XG4gICAgaHJlZk5vcm1hbGl6ZWQ/OiBib29sZWFuO1xuICAgIGh0bWxTZXJpYWxpemU/OiBib29sZWFuO1xuICAgIGxlYWRpbmdXaGl0ZXNwYWNlPzogYm9vbGVhbjtcbiAgICBub0Nsb25lQ2hlY2tlZD86IGJvb2xlYW47XG4gICAgbm9DbG9uZUV2ZW50PzogYm9vbGVhbjtcbiAgICBvcGFjaXR5PzogYm9vbGVhbjtcbiAgICBvcHREaXNhYmxlZD86IGJvb2xlYW47XG4gICAgb3B0U2VsZWN0ZWQ/OiBib29sZWFuO1xuICAgIHNjcmlwdEV2YWw/ICgpOiBib29sZWFuO1xuICAgIHN0eWxlPzogYm9vbGVhbjtcbiAgICBzdWJtaXRCdWJibGVzPzogYm9vbGVhbjtcbiAgICB0Ym9keT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBKUXVlcnlQYXJhbSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbiBvZiBhbiBhcnJheSBvciBvYmplY3QsIHN1aXRhYmxlIGZvciB1c2UgaW4gYSBVUkwgcXVlcnkgc3RyaW5nIG9yIEFqYXggcmVxdWVzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEFuIGFycmF5IG9yIG9iamVjdCB0byBzZXJpYWxpemUuXG4gICAgICovXG4gICAgKG9iajogYW55KTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbiBvZiBhbiBhcnJheSBvciBvYmplY3QsIHN1aXRhYmxlIGZvciB1c2UgaW4gYSBVUkwgcXVlcnkgc3RyaW5nIG9yIEFqYXggcmVxdWVzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEFuIGFycmF5IG9yIG9iamVjdCB0byBzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHRyYWRpdGlvbmFsIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcGVyZm9ybSBhIHRyYWRpdGlvbmFsIFwic2hhbGxvd1wiIHNlcmlhbGl6YXRpb24uXG4gICAgICovXG4gICAgKG9iajogYW55LCB0cmFkaXRpb25hbDogYm9vbGVhbik6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIHVzZWQgdG8gY29uc3RydWN0IGpRdWVyeSBldmVudHMgKHdpdGggJC5FdmVudCkuIEl0IGlzXG4gKiBkZWZpbmVkIHNlcGFyYXRlbHkgaW5zdGVhZCBvZiBpbmxpbmUgaW4gSlF1ZXJ5U3RhdGljIHRvIGFsbG93XG4gKiBvdmVycmlkaW5nIHRoZSBjb25zdHJ1Y3Rpb24gZnVuY3Rpb24gd2l0aCBzcGVjaWZpYyBzdHJpbmdzXG4gKiByZXR1cm5pbmcgc3BlY2lmaWMgZXZlbnQgb2JqZWN0cy5cbiAqL1xuaW50ZXJmYWNlIEpRdWVyeUV2ZW50Q29uc3RydWN0b3Ige1xuICAgIChuYW1lOiBzdHJpbmcsIGV2ZW50UHJvcGVydGllcz86IGFueSk6IEpRdWVyeUV2ZW50T2JqZWN0O1xuICAgIG5ldyAobmFtZTogc3RyaW5nLCBldmVudFByb3BlcnRpZXM/OiBhbnkpOiBKUXVlcnlFdmVudE9iamVjdDtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIHVzZWQgdG8gc3BlY2lmeSBjb29yZGluYXRlcy5cbiAqL1xuaW50ZXJmYWNlIEpRdWVyeUNvb3JkaW5hdGVzIHtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgdG9wOiBudW1iZXI7XG59XG5cbi8qKlxuICogRWxlbWVudHMgaW4gdGhlIGFycmF5IHJldHVybmVkIGJ5IHNlcmlhbGl6ZUFycmF5KClcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeVNlcmlhbGl6ZUFycmF5RWxlbWVudCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBKUXVlcnlBbmltYXRpb25PcHRpb25zIHsgXG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICovXG4gICAgZHVyYXRpb24/OiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICovXG4gICAgZWFzaW5nPzogc3RyaW5nOyBcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGNvbXBsZXRlPzogRnVuY3Rpb247IFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoIGFuaW1hdGVkIHByb3BlcnR5IG9mIGVhY2ggYW5pbWF0ZWQgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhbiBvcHBvcnR1bml0eSB0byBtb2RpZnkgdGhlIFR3ZWVuIG9iamVjdCB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBiZWZvcmUgaXQgaXMgc2V0LlxuICAgICAqL1xuICAgIHN0ZXA/OiAobm93OiBudW1iZXIsIHR3ZWVuOiBhbnkpID0+IGFueTsgXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgZWFjaCBzdGVwIG9mIHRoZSBhbmltYXRpb24sIG9ubHkgb25jZSBwZXIgYW5pbWF0ZWQgZWxlbWVudCByZWdhcmRsZXNzIG9mIHRoZSBudW1iZXIgb2YgYW5pbWF0ZWQgcHJvcGVydGllcy4gKHZlcnNpb24gYWRkZWQ6IDEuOClcbiAgICAgKi9cbiAgICBwcm9ncmVzcz86IChhbmltYXRpb246IEpRdWVyeVByb21pc2U8YW55PiwgcHJvZ3Jlc3M6IG51bWJlciwgcmVtYWluaW5nTXM6IG51bWJlcikgPT4gYW55OyBcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgYW5pbWF0aW9uIGJlZ2lucy4gKHZlcnNpb24gYWRkZWQ6IDEuOClcbiAgICAgKi9cbiAgICBzdGFydD86IChhbmltYXRpb246IEpRdWVyeVByb21pc2U8YW55PikgPT4gYW55OyBcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBhbmltYXRpb24gY29tcGxldGVzIChpdHMgUHJvbWlzZSBvYmplY3QgaXMgcmVzb2x2ZWQpLiAodmVyc2lvbiBhZGRlZDogMS44KVxuICAgICAqL1xuICAgIGRvbmU/OiAoYW5pbWF0aW9uOiBKUXVlcnlQcm9taXNlPGFueT4sIGp1bXBlZFRvRW5kOiBib29sZWFuKSA9PiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBmYWlscyB0byBjb21wbGV0ZSAoaXRzIFByb21pc2Ugb2JqZWN0IGlzIHJlamVjdGVkKS4gKHZlcnNpb24gYWRkZWQ6IDEuOClcbiAgICAgKi9cbiAgICBmYWlsPzogKGFuaW1hdGlvbjogSlF1ZXJ5UHJvbWlzZTxhbnk+LCBqdW1wZWRUb0VuZDogYm9vbGVhbikgPT4gYW55OyBcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBhbmltYXRpb24gY29tcGxldGVzIG9yIHN0b3BzIHdpdGhvdXQgY29tcGxldGluZyAoaXRzIFByb21pc2Ugb2JqZWN0IGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZCkuICh2ZXJzaW9uIGFkZGVkOiAxLjgpXG4gICAgICovXG4gICAgYWx3YXlzPzogKGFuaW1hdGlvbjogSlF1ZXJ5UHJvbWlzZTxhbnk+LCBqdW1wZWRUb0VuZDogYm9vbGVhbikgPT4gYW55OyBcbiAgICAvKipcbiAgICAgKiBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHBsYWNlIHRoZSBhbmltYXRpb24gaW4gdGhlIGVmZmVjdHMgcXVldWUuIElmIGZhbHNlLCB0aGUgYW5pbWF0aW9uIHdpbGwgYmVnaW4gaW1tZWRpYXRlbHkuIEFzIG9mIGpRdWVyeSAxLjcsIHRoZSBxdWV1ZSBvcHRpb24gY2FuIGFsc28gYWNjZXB0IGEgc3RyaW5nLCBpbiB3aGljaCBjYXNlIHRoZSBhbmltYXRpb24gaXMgYWRkZWQgdG8gdGhlIHF1ZXVlIHJlcHJlc2VudGVkIGJ5IHRoYXQgc3RyaW5nLiBXaGVuIGEgY3VzdG9tIHF1ZXVlIG5hbWUgaXMgdXNlZCB0aGUgYW5pbWF0aW9uIGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgc3RhcnQ7IHlvdSBtdXN0IGNhbGwgLmRlcXVldWUoXCJxdWV1ZW5hbWVcIikgdG8gc3RhcnQgaXQuXG4gICAgICovXG4gICAgcXVldWU/OiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIG9uZSBvciBtb3JlIG9mIHRoZSBDU1MgcHJvcGVydGllcyBkZWZpbmVkIGJ5IHRoZSBwcm9wZXJ0aWVzIGFyZ3VtZW50IGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIGVhc2luZyBmdW5jdGlvbnMuICh2ZXJzaW9uIGFkZGVkOiAxLjQpXG4gICAgICovXG4gICAgc3BlY2lhbEVhc2luZz86IE9iamVjdDtcbn1cblxuLyoqXG4gKiBTdGF0aWMgbWVtYmVycyBvZiBqUXVlcnkgKHRob3NlIG9uICQgYW5kIGpRdWVyeSB0aGVtc2VsdmVzKVxuICovXG5pbnRlcmZhY2UgSlF1ZXJ5U3RhdGljIHtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYW4gYXN5bmNocm9ub3VzIEhUVFAgKEFqYXgpIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgQSBzZXQgb2Yga2V5L3ZhbHVlIHBhaXJzIHRoYXQgY29uZmlndXJlIHRoZSBBamF4IHJlcXVlc3QuIEFsbCBzZXR0aW5ncyBhcmUgb3B0aW9uYWwuIEEgZGVmYXVsdCBjYW4gYmUgc2V0IGZvciBhbnkgb3B0aW9uIHdpdGggJC5hamF4U2V0dXAoKS5cbiAgICAgKi9cbiAgICBhamF4KHNldHRpbmdzOiBKUXVlcnlBamF4U2V0dGluZ3MpOiBKUXVlcnlYSFI7XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbiBhc3luY2hyb25vdXMgSFRUUCAoQWpheCkgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICogQHBhcmFtIHNldHRpbmdzIEEgc2V0IG9mIGtleS92YWx1ZSBwYWlycyB0aGF0IGNvbmZpZ3VyZSB0aGUgQWpheCByZXF1ZXN0LiBBbGwgc2V0dGluZ3MgYXJlIG9wdGlvbmFsLiBBIGRlZmF1bHQgY2FuIGJlIHNldCBmb3IgYW55IG9wdGlvbiB3aXRoICQuYWpheFNldHVwKCkuXG4gICAgICovXG4gICAgYWpheCh1cmw6IHN0cmluZywgc2V0dGluZ3M/OiBKUXVlcnlBamF4U2V0dGluZ3MpOiBKUXVlcnlYSFI7XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgY3VzdG9tIEFqYXggb3B0aW9ucyBvciBtb2RpZnkgZXhpc3Rpbmcgb3B0aW9ucyBiZWZvcmUgZWFjaCByZXF1ZXN0IGlzIHNlbnQgYW5kIGJlZm9yZSB0aGV5IGFyZSBwcm9jZXNzZWQgYnkgJC5hamF4KCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVR5cGVzIEFuIG9wdGlvbmFsIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBkYXRhVHlwZXNcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGhhbmRsZXIgdG8gc2V0IGRlZmF1bHQgdmFsdWVzIGZvciBmdXR1cmUgQWpheCByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBhamF4UHJlZmlsdGVyKGRhdGFUeXBlczogc3RyaW5nLCBoYW5kbGVyOiAob3B0czogYW55LCBvcmlnaW5hbE9wdHM6IEpRdWVyeUFqYXhTZXR0aW5ncywganFYSFI6IEpRdWVyeVhIUikgPT4gYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgY3VzdG9tIEFqYXggb3B0aW9ucyBvciBtb2RpZnkgZXhpc3Rpbmcgb3B0aW9ucyBiZWZvcmUgZWFjaCByZXF1ZXN0IGlzIHNlbnQgYW5kIGJlZm9yZSB0aGV5IGFyZSBwcm9jZXNzZWQgYnkgJC5hamF4KCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGhhbmRsZXIgdG8gc2V0IGRlZmF1bHQgdmFsdWVzIGZvciBmdXR1cmUgQWpheCByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBhamF4UHJlZmlsdGVyKGhhbmRsZXI6IChvcHRzOiBhbnksIG9yaWdpbmFsT3B0czogSlF1ZXJ5QWpheFNldHRpbmdzLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnkpOiB2b2lkO1xuXG4gICAgYWpheFNldHRpbmdzOiBKUXVlcnlBamF4U2V0dGluZ3M7XG5cbiAgICAgLyoqXG4gICAgICAqIFNldCBkZWZhdWx0IHZhbHVlcyBmb3IgZnV0dXJlIEFqYXggcmVxdWVzdHMuIEl0cyB1c2UgaXMgbm90IHJlY29tbWVuZGVkLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIHNldCBvZiBrZXkvdmFsdWUgcGFpcnMgdGhhdCBjb25maWd1cmUgdGhlIGRlZmF1bHQgQWpheCByZXF1ZXN0LiBBbGwgb3B0aW9ucyBhcmUgb3B0aW9uYWwuXG4gICAgICAqL1xuICAgIGFqYXhTZXR1cChvcHRpb25zOiBKUXVlcnlBamF4U2V0dGluZ3MpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogTG9hZCBkYXRhIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEhUVFAgR0VUIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcy5cbiAgICAgKiBAcGFyYW0gZGF0YVR5cGUgVGhlIHR5cGUgb2YgZGF0YSBleHBlY3RlZCBmcm9tIHRoZSBzZXJ2ZXIuIERlZmF1bHQ6IEludGVsbGlnZW50IEd1ZXNzICh4bWwsIGpzb24sIHNjcmlwdCwgb3IgaHRtbCkuXG4gICAgICovXG4gICAgZ2V0KHVybDogc3RyaW5nLCBzdWNjZXNzPzogKGRhdGE6IGFueSwgdGV4dFN0YXR1czogc3RyaW5nLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnksIGRhdGFUeXBlPzogc3RyaW5nKTogSlF1ZXJ5WEhSO1xuICAgIC8qKlxuICAgICAqIExvYWQgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgYSBIVFRQIEdFVCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBBIHBsYWluIG9iamVjdCBvciBzdHJpbmcgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gc3VjY2VzcyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMuXG4gICAgICogQHBhcmFtIGRhdGFUeXBlIFRoZSB0eXBlIG9mIGRhdGEgZXhwZWN0ZWQgZnJvbSB0aGUgc2VydmVyLiBEZWZhdWx0OiBJbnRlbGxpZ2VudCBHdWVzcyAoeG1sLCBqc29uLCBzY3JpcHQsIG9yIGh0bWwpLlxuICAgICAqL1xuICAgIGdldCh1cmw6IHN0cmluZywgZGF0YT86IE9iamVjdHxzdHJpbmcsIHN1Y2Nlc3M/OiAoZGF0YTogYW55LCB0ZXh0U3RhdHVzOiBzdHJpbmcsIGpxWEhSOiBKUXVlcnlYSFIpID0+IGFueSwgZGF0YVR5cGU/OiBzdHJpbmcpOiBKUXVlcnlYSFI7XG4gICAgLyoqXG4gICAgICogTG9hZCBKU09OLWVuY29kZWQgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgYSBHRVQgSFRUUCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudC5cbiAgICAgKiBAcGFyYW0gc3VjY2VzcyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMuXG4gICAgICovXG4gICAgZ2V0SlNPTih1cmw6IHN0cmluZywgc3VjY2Vzcz86IChkYXRhOiBhbnksIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUikgPT4gYW55KTogSlF1ZXJ5WEhSO1xuICAgIC8qKlxuICAgICAqIExvYWQgSlNPTi1lbmNvZGVkIGRhdGEgZnJvbSB0aGUgc2VydmVyIHVzaW5nIGEgR0VUIEhUVFAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICogQHBhcmFtIGRhdGEgQSBwbGFpbiBvYmplY3Qgb3Igc3RyaW5nIHRoYXQgaXMgc2VudCB0byB0aGUgc2VydmVyIHdpdGggdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3MgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLlxuICAgICAqL1xuICAgIGdldEpTT04odXJsOiBzdHJpbmcsIGRhdGE/OiBPYmplY3R8c3RyaW5nLCBzdWNjZXNzPzogKGRhdGE6IGFueSwgdGV4dFN0YXR1czogc3RyaW5nLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnkpOiBKUXVlcnlYSFI7XG4gICAgLyoqXG4gICAgICogTG9hZCBhIEphdmFTY3JpcHQgZmlsZSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgYSBHRVQgSFRUUCByZXF1ZXN0LCB0aGVuIGV4ZWN1dGUgaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcy5cbiAgICAgKi9cbiAgICBnZXRTY3JpcHQodXJsOiBzdHJpbmcsIHN1Y2Nlc3M/OiAoc2NyaXB0OiBzdHJpbmcsIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUikgPT4gYW55KTogSlF1ZXJ5WEhSO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbiBvZiBhbiBhcnJheSBvciBvYmplY3QsIHN1aXRhYmxlIGZvciB1c2UgaW4gYSBVUkwgcXVlcnkgc3RyaW5nIG9yIEFqYXggcmVxdWVzdC5cbiAgICAgKi9cbiAgICBwYXJhbTogSlF1ZXJ5UGFyYW07XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGRhdGEgZnJvbSB0aGUgc2VydmVyIHVzaW5nIGEgSFRUUCBQT1NUIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcy4gUmVxdWlyZWQgaWYgZGF0YVR5cGUgaXMgcHJvdmlkZWQsIGJ1dCBjYW4gYmUgbnVsbCBpbiB0aGF0IGNhc2UuXG4gICAgICogQHBhcmFtIGRhdGFUeXBlIFRoZSB0eXBlIG9mIGRhdGEgZXhwZWN0ZWQgZnJvbSB0aGUgc2VydmVyLiBEZWZhdWx0OiBJbnRlbGxpZ2VudCBHdWVzcyAoeG1sLCBqc29uLCBzY3JpcHQsIHRleHQsIGh0bWwpLlxuICAgICAqL1xuICAgIHBvc3QodXJsOiBzdHJpbmcsIHN1Y2Nlc3M/OiAoZGF0YTogYW55LCB0ZXh0U3RhdHVzOiBzdHJpbmcsIGpxWEhSOiBKUXVlcnlYSFIpID0+IGFueSwgZGF0YVR5cGU/OiBzdHJpbmcpOiBKUXVlcnlYSFI7XG4gICAgLyoqXG4gICAgICogTG9hZCBkYXRhIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEhUVFAgUE9TVCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBBIHBsYWluIG9iamVjdCBvciBzdHJpbmcgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gc3VjY2VzcyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMuIFJlcXVpcmVkIGlmIGRhdGFUeXBlIGlzIHByb3ZpZGVkLCBidXQgY2FuIGJlIG51bGwgaW4gdGhhdCBjYXNlLlxuICAgICAqIEBwYXJhbSBkYXRhVHlwZSBUaGUgdHlwZSBvZiBkYXRhIGV4cGVjdGVkIGZyb20gdGhlIHNlcnZlci4gRGVmYXVsdDogSW50ZWxsaWdlbnQgR3Vlc3MgKHhtbCwganNvbiwgc2NyaXB0LCB0ZXh0LCBodG1sKS5cbiAgICAgKi9cbiAgICBwb3N0KHVybDogc3RyaW5nLCBkYXRhPzogT2JqZWN0fHN0cmluZywgc3VjY2Vzcz86IChkYXRhOiBhbnksIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUikgPT4gYW55LCBkYXRhVHlwZT86IHN0cmluZyk6IEpRdWVyeVhIUjtcblxuICAgIC8qKlxuICAgICAqIEEgbXVsdGktcHVycG9zZSBjYWxsYmFja3MgbGlzdCBvYmplY3QgdGhhdCBwcm92aWRlcyBhIHBvd2VyZnVsIHdheSB0byBtYW5hZ2UgY2FsbGJhY2sgbGlzdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmxhZ3MgQW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgZmxhZ3MgdGhhdCBjaGFuZ2UgaG93IHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMuXG4gICAgICovXG4gICAgQ2FsbGJhY2tzKGZsYWdzPzogc3RyaW5nKTogSlF1ZXJ5Q2FsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyBvciByZWxlYXNlcyB0aGUgZXhlY3V0aW9uIG9mIGpRdWVyeSdzIHJlYWR5IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhvbGQgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJlYWR5IGhvbGQgaXMgYmVpbmcgcmVxdWVzdGVkIG9yIHJlbGVhc2VkXG4gICAgICovXG4gICAgaG9sZFJlYWR5KGhvbGQ6IGJvb2xlYW4pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhIHN0cmluZyBjb250YWluaW5nIGEgQ1NTIHNlbGVjdG9yIHdoaWNoIGlzIHRoZW4gdXNlZCB0byBtYXRjaCBhIHNldCBvZiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSBjb250ZXh0IEEgRE9NIEVsZW1lbnQsIERvY3VtZW50LCBvciBqUXVlcnkgdG8gdXNlIGFzIGNvbnRleHRcbiAgICAgKi9cbiAgICAoc2VsZWN0b3I6IHN0cmluZywgY29udGV4dD86IEVsZW1lbnR8SlF1ZXJ5KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSBzdHJpbmcgY29udGFpbmluZyBhIENTUyBzZWxlY3RvciB3aGljaCBpcyB0aGVuIHVzZWQgdG8gbWF0Y2ggYSBzZXQgb2YgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBlbGVtZW50IHRvIHdyYXAgaW4gYSBqUXVlcnkgb2JqZWN0LlxuICAgICAqL1xuICAgIChlbGVtZW50OiBFbGVtZW50KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSBzdHJpbmcgY29udGFpbmluZyBhIENTUyBzZWxlY3RvciB3aGljaCBpcyB0aGVuIHVzZWQgdG8gbWF0Y2ggYSBzZXQgb2YgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudEFycmF5IEFuIGFycmF5IGNvbnRhaW5pbmcgYSBzZXQgb2YgRE9NIGVsZW1lbnRzIHRvIHdyYXAgaW4gYSBqUXVlcnkgb2JqZWN0LlxuICAgICAqL1xuICAgIChlbGVtZW50QXJyYXk6IEVsZW1lbnRbXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBDU1Mgc2VsZWN0b3Igd2hpY2ggaXMgdGhlbiB1c2VkIHRvIG1hdGNoIGEgc2V0IG9mIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCBBIHBsYWluIG9iamVjdCB0byB3cmFwIGluIGEgalF1ZXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICAob2JqZWN0OiB7fSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBDU1Mgc2VsZWN0b3Igd2hpY2ggaXMgdGhlbiB1c2VkIHRvIG1hdGNoIGEgc2V0IG9mIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCBBbiBleGlzdGluZyBqUXVlcnkgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqL1xuICAgIChvYmplY3Q6IEpRdWVyeSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBET00gaXMgZnVsbHkgbG9hZGVkLlxuICAgICAqL1xuICAgICgpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIERPTSBlbGVtZW50cyBvbiB0aGUgZmx5IGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZyBvZiByYXcgSFRNTC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodG1sIEEgc3RyaW5nIG9mIEhUTUwgdG8gY3JlYXRlIG9uIHRoZSBmbHkuIE5vdGUgdGhhdCB0aGlzIHBhcnNlcyBIVE1MLCBub3QgWE1MLlxuICAgICAqIEBwYXJhbSBvd25lckRvY3VtZW50IEEgZG9jdW1lbnQgaW4gd2hpY2ggdGhlIG5ldyBlbGVtZW50cyB3aWxsIGJlIGNyZWF0ZWQuXG4gICAgICovXG4gICAgKGh0bWw6IHN0cmluZywgb3duZXJEb2N1bWVudD86IERvY3VtZW50KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgRE9NIGVsZW1lbnRzIG9uIHRoZSBmbHkgZnJvbSB0aGUgcHJvdmlkZWQgc3RyaW5nIG9mIHJhdyBIVE1MLlxuICAgICAqXG4gICAgICogQHBhcmFtIGh0bWwgQSBzdHJpbmcgZGVmaW5pbmcgYSBzaW5nbGUsIHN0YW5kYWxvbmUsIEhUTUwgZWxlbWVudCAoZS5nLiA8ZGl2Lz4gb3IgPGRpdj48L2Rpdj4pLlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzLCBldmVudHMsIGFuZCBtZXRob2RzIHRvIGNhbGwgb24gdGhlIG5ld2x5LWNyZWF0ZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICAoaHRtbDogc3RyaW5nLCBhdHRyaWJ1dGVzOiBPYmplY3QpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBhIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIERPTSBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYWZ0ZXIgdGhlIERPTSBpcyByZWFkeS5cbiAgICAgKi9cbiAgICAoY2FsbGJhY2s6IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVsaW5xdWlzaCBqUXVlcnkncyBjb250cm9sIG9mIHRoZSAkIHZhcmlhYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlbW92ZUFsbCBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHJlbW92ZSBhbGwgalF1ZXJ5IHZhcmlhYmxlcyBmcm9tIHRoZSBnbG9iYWwgc2NvcGUgKGluY2x1ZGluZyBqUXVlcnkgaXRzZWxmKS5cbiAgICAgKi9cbiAgICBub0NvbmZsaWN0KHJlbW92ZUFsbD86IGJvb2xlYW4pOiBPYmplY3Q7XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhIHdheSB0byBleGVjdXRlIGNhbGxiYWNrIGZ1bmN0aW9ucyBiYXNlZCBvbiBvbmUgb3IgbW9yZSBvYmplY3RzLCB1c3VhbGx5IERlZmVycmVkIG9iamVjdHMgdGhhdCByZXByZXNlbnQgYXN5bmNocm9ub3VzIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWZlcnJlZHMgT25lIG9yIG1vcmUgRGVmZXJyZWQgb2JqZWN0cywgb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICAgICAqL1xuICAgIHdoZW48VD4oLi4uZGVmZXJyZWRzOiBKUXVlcnlHZW5lcmljUHJvbWlzZTxUPltdKTogSlF1ZXJ5UHJvbWlzZTxUPjtcbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhIHdheSB0byBleGVjdXRlIGNhbGxiYWNrIGZ1bmN0aW9ucyBiYXNlZCBvbiBvbmUgb3IgbW9yZSBvYmplY3RzLCB1c3VhbGx5IERlZmVycmVkIG9iamVjdHMgdGhhdCByZXByZXNlbnQgYXN5bmNocm9ub3VzIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWZlcnJlZHMgT25lIG9yIG1vcmUgRGVmZXJyZWQgb2JqZWN0cywgb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICAgICAqL1xuICAgIHdoZW48VD4oLi4uZGVmZXJyZWRzOiBUW10pOiBKUXVlcnlQcm9taXNlPFQ+O1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgY2FsbGJhY2sgZnVuY3Rpb25zIGJhc2VkIG9uIG9uZSBvciBtb3JlIG9iamVjdHMsIHVzdWFsbHkgRGVmZXJyZWQgb2JqZWN0cyB0aGF0IHJlcHJlc2VudCBhc3luY2hyb25vdXMgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlZmVycmVkcyBPbmUgb3IgbW9yZSBEZWZlcnJlZCBvYmplY3RzLCBvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gICAgICovXG4gICAgd2hlbjxUPiguLi5kZWZlcnJlZHM6IGFueVtdKTogSlF1ZXJ5UHJvbWlzZTxUPjtcblxuICAgIC8qKlxuICAgICAqIEhvb2sgZGlyZWN0bHkgaW50byBqUXVlcnkgdG8gb3ZlcnJpZGUgaG93IHBhcnRpY3VsYXIgQ1NTIHByb3BlcnRpZXMgYXJlIHJldHJpZXZlZCBvciBzZXQsIG5vcm1hbGl6ZSBDU1MgcHJvcGVydHkgbmFtaW5nLCBvciBjcmVhdGUgY3VzdG9tIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgY3NzSG9va3M6IHsgW2tleTogc3RyaW5nXTogYW55OyB9O1xuICAgIGNzc051bWJlcjogYW55O1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgYXJiaXRyYXJ5IGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgZWxlbWVudC4gUmV0dXJucyB0aGUgdmFsdWUgdGhhdCB3YXMgc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBrZXkgQSBzdHJpbmcgbmFtaW5nIHRoZSBwaWVjZSBvZiBkYXRhIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIG5ldyBkYXRhIHZhbHVlLlxuICAgICAqL1xuICAgIGRhdGE8VD4oZWxlbWVudDogRWxlbWVudCwga2V5OiBzdHJpbmcsIHZhbHVlOiBUKTogVDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZhbHVlIGF0IG5hbWVkIGRhdGEgc3RvcmUgZm9yIHRoZSBlbGVtZW50LCBhcyBzZXQgYnkgalF1ZXJ5LmRhdGEoZWxlbWVudCwgbmFtZSwgdmFsdWUpLCBvciB0aGUgZnVsbCBkYXRhIHN0b3JlIGZvciB0aGUgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBET00gZWxlbWVudCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0ga2V5IEEgc3RyaW5nIG5hbWluZyB0aGUgcGllY2Ugb2YgZGF0YSB0byBzZXQuXG4gICAgICovXG4gICAgZGF0YShlbGVtZW50OiBFbGVtZW50LCBrZXk6IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZhbHVlIGF0IG5hbWVkIGRhdGEgc3RvcmUgZm9yIHRoZSBlbGVtZW50LCBhcyBzZXQgYnkgalF1ZXJ5LmRhdGEoZWxlbWVudCwgbmFtZSwgdmFsdWUpLCBvciB0aGUgZnVsbCBkYXRhIHN0b3JlIGZvciB0aGUgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBET00gZWxlbWVudCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgZGF0YS5cbiAgICAgKi9cbiAgICBkYXRhKGVsZW1lbnQ6IEVsZW1lbnQpOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBuZXh0IGZ1bmN0aW9uIG9uIHRoZSBxdWV1ZSBmb3IgdGhlIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIGVsZW1lbnQgZnJvbSB3aGljaCB0byByZW1vdmUgYW5kIGV4ZWN1dGUgYSBxdWV1ZWQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqL1xuICAgIGRlcXVldWUoZWxlbWVudDogRWxlbWVudCwgcXVldWVOYW1lPzogc3RyaW5nKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB3aGV0aGVyIGFuIGVsZW1lbnQgaGFzIGFueSBqUXVlcnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBlbGVtZW50IHRvIGJlIGNoZWNrZWQgZm9yIGRhdGEuXG4gICAgICovXG4gICAgaGFzRGF0YShlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIHF1ZXVlIG9mIGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCBvbiB0aGUgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQSBET00gZWxlbWVudCB0byBpbnNwZWN0IGZvciBhbiBhdHRhY2hlZCBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICovXG4gICAgcXVldWUoZWxlbWVudDogRWxlbWVudCwgcXVldWVOYW1lPzogc3RyaW5nKTogYW55W107XG4gICAgLyoqXG4gICAgICogTWFuaXB1bGF0ZSB0aGUgcXVldWUgb2YgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBlbGVtZW50IHdoZXJlIHRoZSBhcnJheSBvZiBxdWV1ZWQgZnVuY3Rpb25zIGlzIGF0dGFjaGVkLlxuICAgICAqIEBwYXJhbSBxdWV1ZU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcXVldWUuIERlZmF1bHRzIHRvIGZ4LCB0aGUgc3RhbmRhcmQgZWZmZWN0cyBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gbmV3UXVldWUgQW4gYXJyYXkgb2YgZnVuY3Rpb25zIHRvIHJlcGxhY2UgdGhlIGN1cnJlbnQgcXVldWUgY29udGVudHMuXG4gICAgICovXG4gICAgcXVldWUoZWxlbWVudDogRWxlbWVudCwgcXVldWVOYW1lOiBzdHJpbmcsIG5ld1F1ZXVlOiBGdW5jdGlvbltdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIE1hbmlwdWxhdGUgdGhlIHF1ZXVlIG9mIGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCBvbiB0aGUgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQSBET00gZWxlbWVudCBvbiB3aGljaCB0byBhZGQgYSBxdWV1ZWQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgbmV3IGZ1bmN0aW9uIHRvIGFkZCB0byB0aGUgcXVldWUuXG4gICAgICovXG4gICAgcXVldWUoZWxlbWVudDogRWxlbWVudCwgcXVldWVOYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByZXZpb3VzbHktc3RvcmVkIHBpZWNlIG9mIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBlbGVtZW50IGZyb20gd2hpY2ggdG8gcmVtb3ZlIGRhdGEuXG4gICAgICogQHBhcmFtIG5hbWUgQSBzdHJpbmcgbmFtaW5nIHRoZSBwaWVjZSBvZiBkYXRhIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmVEYXRhKGVsZW1lbnQ6IEVsZW1lbnQsIG5hbWU/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNoYWluYWJsZSB1dGlsaXR5IG9iamVjdCB3aXRoIG1ldGhvZHMgdG8gcmVnaXN0ZXIgbXVsdGlwbGUgY2FsbGJhY2tzIGludG8gY2FsbGJhY2sgcXVldWVzLCBpbnZva2UgY2FsbGJhY2sgcXVldWVzLCBhbmQgcmVsYXkgdGhlIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBzdGF0ZSBvZiBhbnkgc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJlZm9yZVN0YXJ0IEEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQganVzdCBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIHJldHVybnMuXG4gICAgICovXG4gICAgRGVmZXJyZWQ8VD4oYmVmb3JlU3RhcnQ/OiAoZGVmZXJyZWQ6IEpRdWVyeURlZmVycmVkPFQ+KSA9PiBhbnkpOiBKUXVlcnlEZWZlcnJlZDxUPjtcblxuICAgIC8qKlxuICAgICAqIEVmZmVjdHNcbiAgICAgKi9cbiAgICBmeDoge1xuICAgICAgICB0aWNrOiAoKSA9PiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJhdGUgKGluIG1pbGxpc2Vjb25kcykgYXQgd2hpY2ggYW5pbWF0aW9ucyBmaXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgaW50ZXJ2YWw6IG51bWJlcjtcbiAgICAgICAgc3RvcDogKCkgPT4gdm9pZDtcbiAgICAgICAgc3BlZWRzOiB7IHNsb3c6IG51bWJlcjsgZmFzdDogbnVtYmVyOyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2xvYmFsbHkgZGlzYWJsZSBhbGwgYW5pbWF0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIG9mZjogYm9vbGVhbjtcbiAgICAgICAgc3RlcDogYW55O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgbmV3IG9uZSB0aGF0IHdpbGwgYWx3YXlzIGhhdmUgYSBwYXJ0aWN1bGFyIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm5jdGlvbiBUaGUgZnVuY3Rpb24gd2hvc2UgY29udGV4dCB3aWxsIGJlIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIGNvbnRleHQgVGhlIG9iamVjdCB0byB3aGljaCB0aGUgY29udGV4dCAodGhpcykgb2YgdGhlIGZ1bmN0aW9uIHNob3VsZCBiZSBzZXQuXG4gICAgICogQHBhcmFtIGFkZGl0aW9uYWxBcmd1bWVudHMgQW55IG51bWJlciBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbiByZWZlcmVuY2VkIGluIHRoZSBmdW5jdGlvbiBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBwcm94eShmbmN0aW9uOiAoLi4uYXJnczogYW55W10pID0+IGFueSwgY29udGV4dDogT2JqZWN0LCAuLi5hZGRpdGlvbmFsQXJndW1lbnRzOiBhbnlbXSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgbmV3IG9uZSB0aGF0IHdpbGwgYWx3YXlzIGhhdmUgYSBwYXJ0aWN1bGFyIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGV4dCBUaGUgb2JqZWN0IHRvIHdoaWNoIHRoZSBjb250ZXh0ICh0aGlzKSBvZiB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlIHNldC5cbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gd2hvc2UgY29udGV4dCB3aWxsIGJlIGNoYW5nZWQgKHNob3VsZCBiZSBhIHByb3BlcnR5IG9mIHRoZSBjb250ZXh0IG9iamVjdCkuXG4gICAgICogQHBhcmFtIGFkZGl0aW9uYWxBcmd1bWVudHMgQW55IG51bWJlciBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbiBuYW1lZCBpbiB0aGUgbmFtZSBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBwcm94eShjb250ZXh0OiBPYmplY3QsIG5hbWU6IHN0cmluZywgLi4uYWRkaXRpb25hbEFyZ3VtZW50czogYW55W10pOiBhbnk7XG5cbiAgICBFdmVudDogSlF1ZXJ5RXZlbnRDb25zdHJ1Y3RvcjtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgc3RyaW5nIGFuZCB0aHJvd3MgYW4gZXhjZXB0aW9uIGNvbnRhaW5pbmcgaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzZW5kIG91dC5cbiAgICAgKi9cbiAgICBlcnJvcihtZXNzYWdlOiBhbnkpOiBKUXVlcnk7XG5cbiAgICBleHByOiBhbnk7XG4gICAgZm46IGFueTsgIC8vVE9ETzogRGVjaWRlIGhvdyB3ZSB3YW50IHRvIHR5cGUgdGhpc1xuXG4gICAgaXNSZWFkeTogYm9vbGVhbjtcblxuICAgIC8vIFByb3BlcnRpZXNcbiAgICBzdXBwb3J0OiBKUXVlcnlTdXBwb3J0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdG8gc2VlIGlmIGEgRE9NIGVsZW1lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGFub3RoZXIgRE9NIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciBUaGUgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpbiB0aGUgb3RoZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gY29udGFpbmVkIFRoZSBET00gZWxlbWVudCB0aGF0IG1heSBiZSBjb250YWluZWQgYnkgKGEgZGVzY2VuZGFudCBvZikgdGhlIG90aGVyIGVsZW1lbnQuXG4gICAgICovXG4gICAgY29udGFpbnMoY29udGFpbmVyOiBFbGVtZW50LCBjb250YWluZWQ6IEVsZW1lbnQpOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQSBnZW5lcmljIGl0ZXJhdG9yIGZ1bmN0aW9uLCB3aGljaCBjYW4gYmUgdXNlZCB0byBzZWFtbGVzc2x5IGl0ZXJhdGUgb3ZlciBib3RoIG9iamVjdHMgYW5kIGFycmF5cy4gQXJyYXlzIGFuZCBhcnJheS1saWtlIG9iamVjdHMgd2l0aCBhIGxlbmd0aCBwcm9wZXJ0eSAoc3VjaCBhcyBhIGZ1bmN0aW9uJ3MgYXJndW1lbnRzIG9iamVjdCkgYXJlIGl0ZXJhdGVkIGJ5IG51bWVyaWMgaW5kZXgsIGZyb20gMCB0byBsZW5ndGgtMS4gT3RoZXIgb2JqZWN0cyBhcmUgaXRlcmF0ZWQgdmlhIHRoZWlyIG5hbWVkIHByb3BlcnRpZXMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb24gVGhlIG9iamVjdCBvciBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgb24gZXZlcnkgb2JqZWN0LlxuICAgICAqL1xuICAgIGVhY2g8VD4oXG4gICAgICAgIGNvbGxlY3Rpb246IFRbXSxcbiAgICAgICAgY2FsbGJhY2s6IChpbmRleEluQXJyYXk6IG51bWJlciwgdmFsdWVPZkVsZW1lbnQ6IFQpID0+IGFueVxuICAgICAgICApOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBBIGdlbmVyaWMgaXRlcmF0b3IgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHNlYW1sZXNzbHkgaXRlcmF0ZSBvdmVyIGJvdGggb2JqZWN0cyBhbmQgYXJyYXlzLiBBcnJheXMgYW5kIGFycmF5LWxpa2Ugb2JqZWN0cyB3aXRoIGEgbGVuZ3RoIHByb3BlcnR5IChzdWNoIGFzIGEgZnVuY3Rpb24ncyBhcmd1bWVudHMgb2JqZWN0KSBhcmUgaXRlcmF0ZWQgYnkgbnVtZXJpYyBpbmRleCwgZnJvbSAwIHRvIGxlbmd0aC0xLiBPdGhlciBvYmplY3RzIGFyZSBpdGVyYXRlZCB2aWEgdGhlaXIgbmFtZWQgcHJvcGVydGllcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbiBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBvbiBldmVyeSBvYmplY3QuXG4gICAgICovXG4gICAgZWFjaChcbiAgICAgICAgY29sbGVjdGlvbjogYW55LFxuICAgICAgICBjYWxsYmFjazogKGluZGV4SW5BcnJheTogYW55LCB2YWx1ZU9mRWxlbWVudDogYW55KSA9PiBhbnlcbiAgICAgICAgKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogTWVyZ2UgdGhlIGNvbnRlbnRzIG9mIHR3byBvciBtb3JlIG9iamVjdHMgdG9nZXRoZXIgaW50byB0aGUgZmlyc3Qgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBBbiBvYmplY3QgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG5ldyBwcm9wZXJ0aWVzIGlmIGFkZGl0aW9uYWwgb2JqZWN0cyBhcmUgcGFzc2VkIGluIG9yIHRoYXQgd2lsbCBleHRlbmQgdGhlIGpRdWVyeSBuYW1lc3BhY2UgaWYgaXQgaXMgdGhlIHNvbGUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIG9iamVjdDEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluLlxuICAgICAqIEBwYXJhbSBvYmplY3ROIEFkZGl0aW9uYWwgb2JqZWN0cyBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4uXG4gICAgICovXG4gICAgZXh0ZW5kKHRhcmdldDogYW55LCBvYmplY3QxPzogYW55LCAuLi5vYmplY3ROOiBhbnlbXSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVlcCBJZiB0cnVlLCB0aGUgbWVyZ2UgYmVjb21lcyByZWN1cnNpdmUgKGFrYS4gZGVlcCBjb3B5KS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSBvYmplY3QgdG8gZXh0ZW5kLiBJdCB3aWxsIHJlY2VpdmUgdGhlIG5ldyBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSBvYmplY3QxIEFuIG9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBtZXJnZSBpbi5cbiAgICAgKiBAcGFyYW0gb2JqZWN0TiBBZGRpdGlvbmFsIG9iamVjdHMgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluLlxuICAgICAqL1xuICAgIGV4dGVuZChkZWVwOiBib29sZWFuLCB0YXJnZXQ6IGFueSwgb2JqZWN0MT86IGFueSwgLi4ub2JqZWN0TjogYW55W10pOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHNvbWUgSmF2YVNjcmlwdCBjb2RlIGdsb2JhbGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvZGUgVGhlIEphdmFTY3JpcHQgY29kZSB0byBleGVjdXRlLlxuICAgICAqL1xuICAgIGdsb2JhbEV2YWwoY29kZTogc3RyaW5nKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGVsZW1lbnRzIG9mIGFuIGFycmF5IHdoaWNoIHNhdGlzZnkgYSBmaWx0ZXIgZnVuY3Rpb24uIFRoZSBvcmlnaW5hbCBhcnJheSBpcyBub3QgYWZmZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaCB0aHJvdWdoLlxuICAgICAqIEBwYXJhbSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzIGVhY2ggaXRlbSBhZ2FpbnN0LiBUaGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZ1bmN0aW9uIGlzIHRoZSBpdGVtLCBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgaW5kZXguIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgQm9vbGVhbiB2YWx1ZS4gIHRoaXMgd2lsbCBiZSB0aGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gICAgICogQHBhcmFtIGludmVydCBJZiBcImludmVydFwiIGlzIGZhbHNlLCBvciBub3QgcHJvdmlkZWQsIHRoZW4gdGhlIGZ1bmN0aW9uIHJldHVybnMgYW4gYXJyYXkgY29uc2lzdGluZyBvZiBhbGwgZWxlbWVudHMgZm9yIHdoaWNoIFwiY2FsbGJhY2tcIiByZXR1cm5zIHRydWUuIElmIFwiaW52ZXJ0XCIgaXMgdHJ1ZSwgdGhlbiB0aGUgZnVuY3Rpb24gcmV0dXJucyBhbiBhcnJheSBjb25zaXN0aW5nIG9mIGFsbCBlbGVtZW50cyBmb3Igd2hpY2ggXCJjYWxsYmFja1wiIHJldHVybnMgZmFsc2UuXG4gICAgICovXG4gICAgZ3JlcDxUPihhcnJheTogVFtdLCBmdW5jOiAoZWxlbWVudE9mQXJyYXk6IFQsIGluZGV4SW5BcnJheTogbnVtYmVyKSA9PiBib29sZWFuLCBpbnZlcnQ/OiBib29sZWFuKTogVFtdO1xuXG4gICAgLyoqXG4gICAgICogU2VhcmNoIGZvciBhIHNwZWNpZmllZCB2YWx1ZSB3aXRoaW4gYW4gYXJyYXkgYW5kIHJldHVybiBpdHMgaW5kZXggKG9yIC0xIGlmIG5vdCBmb3VuZCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIGFycmF5IEFuIGFycmF5IHRocm91Z2ggd2hpY2ggdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSBmcm9tSW5kZXggaGUgaW5kZXggb2YgdGhlIGFycmF5IGF0IHdoaWNoIHRvIGJlZ2luIHRoZSBzZWFyY2guIFRoZSBkZWZhdWx0IGlzIDAsIHdoaWNoIHdpbGwgc2VhcmNoIHRoZSB3aG9sZSBhcnJheS5cbiAgICAgKi9cbiAgICBpbkFycmF5PFQ+KHZhbHVlOiBULCBhcnJheTogVFtdLCBmcm9tSW5kZXg/OiBudW1iZXIpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqIE9iamVjdCB0byB0ZXN0IHdoZXRoZXIgb3Igbm90IGl0IGlzIGFuIGFycmF5LlxuICAgICAqL1xuICAgIGlzQXJyYXkob2JqOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiBhbiBvYmplY3QgaXMgZW1wdHkgKGNvbnRhaW5zIG5vIGVudW1lcmFibGUgcHJvcGVydGllcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgdGhhdCB3aWxsIGJlIGNoZWNrZWQgdG8gc2VlIGlmIGl0J3MgZW1wdHkuXG4gICAgICovXG4gICAgaXNFbXB0eU9iamVjdChvYmo6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZSBhcmd1bWVudCBwYXNzZWQgaXMgYSBKYXZhc2NyaXB0IGZ1bmN0aW9uIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIHRlc3Qgd2hldGhlciBvciBub3QgaXQgaXMgYSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBpc0Z1bmN0aW9uKG9iajogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgaXRzIGFyZ3VtZW50IGlzIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9iaiBUaGUgdmFsdWUgdG8gYmUgdGVzdGVkLlxuICAgICAqL1xuICAgIGlzTnVtZXJpYyh2YWx1ZTogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0byBzZWUgaWYgYW4gb2JqZWN0IGlzIGEgcGxhaW4gb2JqZWN0IChjcmVhdGVkIHVzaW5nIFwie31cIiBvciBcIm5ldyBPYmplY3RcIikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgdGhhdCB3aWxsIGJlIGNoZWNrZWQgdG8gc2VlIGlmIGl0J3MgYSBwbGFpbiBvYmplY3QuXG4gICAgICovXG4gICAgaXNQbGFpbk9iamVjdChvYmo6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGFyZ3VtZW50IGlzIGEgd2luZG93LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gdGVzdCB3aGV0aGVyIG9yIG5vdCBpdCBpcyBhIHdpbmRvdy5cbiAgICAgKi9cbiAgICBpc1dpbmRvdyhvYmo6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdG8gc2VlIGlmIGEgRE9NIG5vZGUgaXMgd2l0aGluIGFuIFhNTCBkb2N1bWVudCAob3IgaXMgYW4gWE1MIGRvY3VtZW50KS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBub2RlIGhlIERPTSBub2RlIHRoYXQgd2lsbCBiZSBjaGVja2VkIHRvIHNlZSBpZiBpdCdzIGluIGFuIFhNTCBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBpc1hNTERvYyhub2RlOiBOb2RlKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYW4gYXJyYXktbGlrZSBvYmplY3QgaW50byBhIHRydWUgSmF2YVNjcmlwdCBhcnJheS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEFueSBvYmplY3QgdG8gdHVybiBpbnRvIGEgbmF0aXZlIEFycmF5LlxuICAgICAqL1xuICAgIG1ha2VBcnJheShvYmo6IGFueSk6IGFueVtdO1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIGFsbCBpdGVtcyBpbiBhbiBhcnJheSBvciBvYmplY3QgdG8gbmV3IGFycmF5IG9mIGl0ZW1zLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBhcnJheSBUaGUgQXJyYXkgdG8gdHJhbnNsYXRlLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gcHJvY2VzcyBlYWNoIGl0ZW0gYWdhaW5zdC4gVGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmdW5jdGlvbiBpcyB0aGUgYXJyYXkgaXRlbSwgdGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgaW5kZXggaW4gYXJyYXkgVGhlIGZ1bmN0aW9uIGNhbiByZXR1cm4gYW55IHZhbHVlLiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgZ2xvYmFsICh3aW5kb3cpIG9iamVjdC5cbiAgICAgKi9cbiAgICBtYXA8VCwgVT4oYXJyYXk6IFRbXSwgY2FsbGJhY2s6IChlbGVtZW50T2ZBcnJheTogVCwgaW5kZXhJbkFycmF5OiBudW1iZXIpID0+IFUpOiBVW107XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIGFsbCBpdGVtcyBpbiBhbiBhcnJheSBvciBvYmplY3QgdG8gbmV3IGFycmF5IG9mIGl0ZW1zLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBhcnJheU9yT2JqZWN0IFRoZSBBcnJheSBvciBPYmplY3QgdG8gdHJhbnNsYXRlLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gcHJvY2VzcyBlYWNoIGl0ZW0gYWdhaW5zdC4gVGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmdW5jdGlvbiBpcyB0aGUgdmFsdWU7IHRoZSBzZWNvbmQgYXJndW1lbnQgaXMgdGhlIGluZGV4IG9yIGtleSBvZiB0aGUgYXJyYXkgb3Igb2JqZWN0IHByb3BlcnR5LiBUaGUgZnVuY3Rpb24gY2FuIHJldHVybiBhbnkgdmFsdWUgdG8gYWRkIHRvIHRoZSBhcnJheS4gQSByZXR1cm5lZCBhcnJheSB3aWxsIGJlIGZsYXR0ZW5lZCBpbnRvIHRoZSByZXN1bHRpbmcgYXJyYXkuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBnbG9iYWwgKHdpbmRvdykgb2JqZWN0LlxuICAgICAqL1xuICAgIG1hcChhcnJheU9yT2JqZWN0OiBhbnksIGNhbGxiYWNrOiAodmFsdWU6IGFueSwgaW5kZXhPcktleTogYW55KSA9PiBhbnkpOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIGFycmF5cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZmlyc3QgVGhlIGZpcnN0IGFycmF5IHRvIG1lcmdlLCB0aGUgZWxlbWVudHMgb2Ygc2Vjb25kIGFkZGVkLlxuICAgICAqIEBwYXJhbSBzZWNvbmQgVGhlIHNlY29uZCBhcnJheSB0byBtZXJnZSBpbnRvIHRoZSBmaXJzdCwgdW5hbHRlcmVkLlxuICAgICAqL1xuICAgIG1lcmdlPFQ+KGZpcnN0OiBUW10sIHNlY29uZDogVFtdKTogVFtdO1xuXG4gICAgLyoqXG4gICAgICogQW4gZW1wdHkgZnVuY3Rpb24uXG4gICAgICovXG4gICAgbm9vcCgpOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgICovXG4gICAgbm93KCk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgd2VsbC1mb3JtZWQgSlNPTiBzdHJpbmcgYW5kIHJldHVybnMgdGhlIHJlc3VsdGluZyBKYXZhU2NyaXB0IG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ganNvbiBUaGUgSlNPTiBzdHJpbmcgdG8gcGFyc2UuXG4gICAgICovXG4gICAgcGFyc2VKU09OKGpzb246IHN0cmluZyk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHN0cmluZyBpbnRvIGFuIFhNTCBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIGEgd2VsbC1mb3JtZWQgWE1MIHN0cmluZyB0byBiZSBwYXJzZWRcbiAgICAgKi9cbiAgICBwYXJzZVhNTChkYXRhOiBzdHJpbmcpOiBYTUxEb2N1bWVudDtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgd2hpdGVzcGFjZSBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc3RyIFJlbW92ZSB0aGUgd2hpdGVzcGFjZSBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZy5cbiAgICAgKi9cbiAgICB0cmltKHN0cjogc3RyaW5nKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSBpbnRlcm5hbCBKYXZhU2NyaXB0IFtbQ2xhc3NdXSBvZiBhbiBvYmplY3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gZ2V0IHRoZSBpbnRlcm5hbCBKYXZhU2NyaXB0IFtbQ2xhc3NdXSBvZi5cbiAgICAgKi9cbiAgICB0eXBlKG9iajogYW55KTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU29ydHMgYW4gYXJyYXkgb2YgRE9NIGVsZW1lbnRzLCBpbiBwbGFjZSwgd2l0aCB0aGUgZHVwbGljYXRlcyByZW1vdmVkLiBOb3RlIHRoYXQgdGhpcyBvbmx5IHdvcmtzIG9uIGFycmF5cyBvZiBET00gZWxlbWVudHMsIG5vdCBzdHJpbmdzIG9yIG51bWJlcnMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGFycmF5IFRoZSBBcnJheSBvZiBET00gZWxlbWVudHMuXG4gICAgICovXG4gICAgdW5pcXVlKGFycmF5OiBFbGVtZW50W10pOiBFbGVtZW50W107XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBET00gbm9kZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBIVE1MIHN0cmluZyB0byBiZSBwYXJzZWRcbiAgICAgKiBAcGFyYW0gY29udGV4dCBET00gZWxlbWVudCB0byBzZXJ2ZSBhcyB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgSFRNTCBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0ga2VlcFNjcmlwdHMgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBIVE1MIHN0cmluZ1xuICAgICAqL1xuICAgIHBhcnNlSFRNTChkYXRhOiBzdHJpbmcsIGNvbnRleHQ/OiBIVE1MRWxlbWVudCwga2VlcFNjcmlwdHM/OiBib29sZWFuKTogYW55W107XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBET00gbm9kZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBIVE1MIHN0cmluZyB0byBiZSBwYXJzZWRcbiAgICAgKiBAcGFyYW0gY29udGV4dCBET00gZWxlbWVudCB0byBzZXJ2ZSBhcyB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgSFRNTCBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0ga2VlcFNjcmlwdHMgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBIVE1MIHN0cmluZ1xuICAgICAqL1xuICAgIHBhcnNlSFRNTChkYXRhOiBzdHJpbmcsIGNvbnRleHQ/OiBEb2N1bWVudCwga2VlcFNjcmlwdHM/OiBib29sZWFuKTogYW55W107XG59XG5cbi8qKlxuICogVGhlIGpRdWVyeSBpbnN0YW5jZSBtZW1iZXJzXG4gKi9cbmludGVyZmFjZSBKUXVlcnkge1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgaGFuZGxlciB0byBiZSBjYWxsZWQgd2hlbiBBamF4IHJlcXVlc3RzIGNvbXBsZXRlLiBUaGlzIGlzIGFuIEFqYXhFdmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIGFqYXhDb21wbGV0ZShoYW5kbGVyOiAoZXZlbnQ6IEpRdWVyeUV2ZW50T2JqZWN0LCBYTUxIdHRwUmVxdWVzdDogWE1MSHR0cFJlcXVlc3QsIGFqYXhPcHRpb25zOiBhbnkpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGhhbmRsZXIgdG8gYmUgY2FsbGVkIHdoZW4gQWpheCByZXF1ZXN0cyBjb21wbGV0ZSB3aXRoIGFuIGVycm9yLiBUaGlzIGlzIGFuIEFqYXggRXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBUaGUgZnVuY3Rpb24gdG8gYmUgaW52b2tlZC5cbiAgICAgKi9cbiAgICBhamF4RXJyb3IoaGFuZGxlcjogKGV2ZW50OiBKUXVlcnlFdmVudE9iamVjdCwganFYSFI6IEpRdWVyeVhIUiwgYWpheFNldHRpbmdzOiBKUXVlcnlBamF4U2V0dGluZ3MsIHRocm93bkVycm9yOiBhbnkpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBiZWZvcmUgYW4gQWpheCByZXF1ZXN0IGlzIHNlbnQuIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIGFqYXhTZW5kKGhhbmRsZXI6IChldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QsIGpxWEhSOiBKUXVlcnlYSFIsIGFqYXhPcHRpb25zOiBKUXVlcnlBamF4U2V0dGluZ3MpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGhhbmRsZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGZpcnN0IEFqYXggcmVxdWVzdCBiZWdpbnMuIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIGFqYXhTdGFydChoYW5kbGVyOiAoKSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBoYW5kbGVyIHRvIGJlIGNhbGxlZCB3aGVuIGFsbCBBamF4IHJlcXVlc3RzIGhhdmUgY29tcGxldGVkLiBUaGlzIGlzIGFuIEFqYXggRXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBUaGUgZnVuY3Rpb24gdG8gYmUgaW52b2tlZC5cbiAgICAgKi9cbiAgICBhamF4U3RvcChoYW5kbGVyOiAoKSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgYW4gQWpheCByZXF1ZXN0IGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIGFqYXhTdWNjZXNzKGhhbmRsZXI6IChldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QsIFhNTEh0dHBSZXF1ZXN0OiBYTUxIdHRwUmVxdWVzdCwgYWpheE9wdGlvbnM6IEpRdWVyeUFqYXhTZXR0aW5ncykgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogTG9hZCBkYXRhIGZyb20gdGhlIHNlcnZlciBhbmQgcGxhY2UgdGhlIHJldHVybmVkIEhUTUwgaW50byB0aGUgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBBIHBsYWluIG9iamVjdCBvciBzdHJpbmcgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgICAqL1xuICAgIGxvYWQodXJsOiBzdHJpbmcsIGRhdGE/OiBzdHJpbmd8T2JqZWN0LCBjb21wbGV0ZT86IChyZXNwb25zZVRleHQ6IHN0cmluZywgdGV4dFN0YXR1czogc3RyaW5nLCBYTUxIdHRwUmVxdWVzdDogWE1MSHR0cFJlcXVlc3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZSBhIHNldCBvZiBmb3JtIGVsZW1lbnRzIGFzIGEgc3RyaW5nIGZvciBzdWJtaXNzaW9uLlxuICAgICAqL1xuICAgIHNlcmlhbGl6ZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgc2V0IG9mIGZvcm0gZWxlbWVudHMgYXMgYW4gYXJyYXkgb2YgbmFtZXMgYW5kIHZhbHVlcy5cbiAgICAgKi9cbiAgICBzZXJpYWxpemVBcnJheSgpOiBKUXVlcnlTZXJpYWxpemVBcnJheUVsZW1lbnRbXTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHNwZWNpZmllZCBjbGFzcyhlcykgdG8gZWFjaCBvZiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb2YgZWFjaCBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICovXG4gICAgYWRkQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgc3BlY2lmaWVkIGNsYXNzKGVzKSB0byBlYWNoIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmdW5jdGlvbiBBIGZ1bmN0aW9uIHJldHVybmluZyBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgY2xhc3MgbmFtZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGV4aXN0aW5nIGNsYXNzIG5hbWUocykuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgZXhpc3RpbmcgY2xhc3MgbmFtZShzKSBhcyBhcmd1bWVudHMuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBhZGRDbGFzcyhmdW5jOiAoaW5kZXg6IG51bWJlciwgY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgcHJldmlvdXMgc2V0IG9mIGVsZW1lbnRzIG9uIHRoZSBzdGFjayB0byB0aGUgY3VycmVudCBzZXQsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKi9cbiAgICBhZGRCYWNrKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gZ2V0LlxuICAgICAqL1xuICAgIGF0dHIoYXR0cmlidXRlTmFtZTogc3RyaW5nKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCBvbmUgb3IgbW9yZSBhdHRyaWJ1dGVzIGZvciB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgQSB2YWx1ZSB0byBzZXQgZm9yIHRoZSBhdHRyaWJ1dGUuXG4gICAgICovXG4gICAgYXR0cihhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd8bnVtYmVyKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNldCBvbmUgb3IgbW9yZSBhdHRyaWJ1dGVzIGZvciB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgdG8gc2V0LiB0aGlzIGlzIHRoZSBjdXJyZW50IGVsZW1lbnQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIGF0dHJpYnV0ZSB2YWx1ZSBhcyBhcmd1bWVudHMuXG4gICAgICovXG4gICAgYXR0cihhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsIGZ1bmM6IChpbmRleDogbnVtYmVyLCBhdHRyOiBzdHJpbmcpID0+IHN0cmluZ3xudW1iZXIpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IG9uZSBvciBtb3JlIGF0dHJpYnV0ZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEFuIG9iamVjdCBvZiBhdHRyaWJ1dGUtdmFsdWUgcGFpcnMgdG8gc2V0LlxuICAgICAqL1xuICAgIGF0dHIoYXR0cmlidXRlczogT2JqZWN0KTogSlF1ZXJ5O1xuICAgIFxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB3aGV0aGVyIGFueSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cyBhcmUgYXNzaWduZWQgdGhlIGdpdmVuIGNsYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZSB0byBzZWFyY2ggZm9yLlxuICAgICAqL1xuICAgIGhhc0NsYXNzKGNsYXNzTmFtZTogc3RyaW5nKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgSFRNTCBjb250ZW50cyBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgaHRtbCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBIVE1MIGNvbnRlbnRzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHRtbFN0cmluZyBBIHN0cmluZyBvZiBIVE1MIHRvIHNldCBhcyB0aGUgY29udGVudCBvZiBlYWNoIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBodG1sKGh0bWxTdHJpbmc6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIEhUTUwgY29udGVudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBIVE1MIGNvbnRlbnQgdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCBIVE1MIHZhbHVlIGFzIGFyZ3VtZW50cy4galF1ZXJ5IGVtcHRpZXMgdGhlIGVsZW1lbnQgYmVmb3JlIGNhbGxpbmcgdGhlIGZ1bmN0aW9uOyB1c2UgdGhlIG9sZGh0bWwgYXJndW1lbnQgdG8gcmVmZXJlbmNlIHRoZSBwcmV2aW91cyBjb250ZW50LiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICovXG4gICAgaHRtbChmdW5jOiAoaW5kZXg6IG51bWJlciwgb2xkaHRtbDogc3RyaW5nKSA9PiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBIVE1MIGNvbnRlbnRzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgSFRNTCBjb250ZW50IHRvIHNldC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgSFRNTCB2YWx1ZSBhcyBhcmd1bWVudHMuIGpRdWVyeSBlbXB0aWVzIHRoZSBlbGVtZW50IGJlZm9yZSBjYWxsaW5nIHRoZSBmdW5jdGlvbjsgdXNlIHRoZSBvbGRodG1sIGFyZ3VtZW50IHRvIHJlZmVyZW5jZSB0aGUgcHJldmlvdXMgY29udGVudC4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICovXG4gICAgcHJvcChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXQgb25lIG9yIG1vcmUgcHJvcGVydGllcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBIHZhbHVlIHRvIHNldCBmb3IgdGhlIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHByb3AocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd8bnVtYmVyfGJvb2xlYW4pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IG9uZSBvciBtb3JlIHByb3BlcnRpZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEFuIG9iamVjdCBvZiBwcm9wZXJ0eS12YWx1ZSBwYWlycyB0byBzZXQuXG4gICAgICovXG4gICAgcHJvcChwcm9wZXJ0aWVzOiBPYmplY3QpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IG9uZSBvciBtb3JlIHByb3BlcnRpZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCBwcm9wZXJ0eSB2YWx1ZSBhcyBhcmd1bWVudHMuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoZSBrZXl3b3JkIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgICovXG4gICAgcHJvcChwcm9wZXJ0eU5hbWU6IHN0cmluZywgZnVuYzogKGluZGV4OiBudW1iZXIsIG9sZFByb3BlcnR5VmFsdWU6IGFueSkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZSBBbiBhdHRyaWJ1dGUgdG8gcmVtb3ZlOyBhcyBvZiB2ZXJzaW9uIDEuNywgaXQgY2FuIGJlIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlcy5cbiAgICAgKi9cbiAgICByZW1vdmVBdHRyKGF0dHJpYnV0ZU5hbWU6IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHNpbmdsZSBjbGFzcywgbXVsdGlwbGUgY2xhc3Nlcywgb3IgYWxsIGNsYXNzZXMgZnJvbSBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsYXNzTmFtZSBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgY2xhc3NlcyB0byBiZSByZW1vdmVkIGZyb20gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvZiBlYWNoIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICByZW1vdmVDbGFzcyhjbGFzc05hbWU/OiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgc2luZ2xlIGNsYXNzLCBtdWx0aXBsZSBjbGFzc2VzLCBvciBhbGwgY2xhc3NlcyBmcm9tIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuY3Rpb24gQSBmdW5jdGlvbiByZXR1cm5pbmcgb25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGNsYXNzIG5hbWVzIHRvIGJlIHJlbW92ZWQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIGNsYXNzIHZhbHVlIGFzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICByZW1vdmVDbGFzcyhmdW5jOiAoaW5kZXg6IG51bWJlciwgY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByb3BlcnR5IGZvciB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlUHJvcChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBvciByZW1vdmUgb25lIG9yIG1vcmUgY2xhc3NlcyBmcm9tIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGRlcGVuZGluZyBvbiBlaXRoZXIgdGhlIGNsYXNzJ3MgcHJlc2VuY2Ugb3IgdGhlIHZhbHVlIG9mIHRoZSBzd2l0Y2ggYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lIE9uZSBvciBtb3JlIGNsYXNzIG5hbWVzIChzZXBhcmF0ZWQgYnkgc3BhY2VzKSB0byBiZSB0b2dnbGVkIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuICAgICAqIEBwYXJhbSBzd3RjaCBBIEJvb2xlYW4gKG5vdCBqdXN0IHRydXRoeS9mYWxzeSkgdmFsdWUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGNsYXNzIHNob3VsZCBiZSBhZGRlZCBvciByZW1vdmVkLlxuICAgICAqL1xuICAgIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZTogc3RyaW5nLCBzd3RjaD86IGJvb2xlYW4pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWRkIG9yIHJlbW92ZSBvbmUgb3IgbW9yZSBjbGFzc2VzIGZyb20gZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgZGVwZW5kaW5nIG9uIGVpdGhlciB0aGUgY2xhc3MncyBwcmVzZW5jZSBvciB0aGUgdmFsdWUgb2YgdGhlIHN3aXRjaCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzd3RjaCBBIGJvb2xlYW4gdmFsdWUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGNsYXNzIHNob3VsZCBiZSBhZGRlZCBvciByZW1vdmVkLlxuICAgICAqL1xuICAgIHRvZ2dsZUNsYXNzKHN3dGNoPzogYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGQgb3IgcmVtb3ZlIG9uZSBvciBtb3JlIGNsYXNzZXMgZnJvbSBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBkZXBlbmRpbmcgb24gZWl0aGVyIHRoZSBjbGFzcydzIHByZXNlbmNlIG9yIHRoZSB2YWx1ZSBvZiB0aGUgc3dpdGNoIGFyZ3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgY2xhc3MgbmFtZXMgdG8gYmUgdG9nZ2xlZCBpbiB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0LCB0aGUgb2xkIGNsYXNzIHZhbHVlLCBhbmQgdGhlIHN3aXRjaCBhcyBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHN3dGNoIEEgYm9vbGVhbiB2YWx1ZSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgY2xhc3Mgc2hvdWxkIGJlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICovXG4gICAgdG9nZ2xlQ2xhc3MoZnVuYzogKGluZGV4OiBudW1iZXIsIGNsYXNzTmFtZTogc3RyaW5nLCBzd3RjaDogYm9vbGVhbikgPT4gc3RyaW5nLCBzd3RjaD86IGJvb2xlYW4pOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHZhbCgpOiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2YWx1ZSBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEEgc3RyaW5nIG9mIHRleHQgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyBjb3JyZXNwb25kaW5nIHRvIHRoZSB2YWx1ZSBvZiBlYWNoIG1hdGNoZWQgZWxlbWVudCB0byBzZXQgYXMgc2VsZWN0ZWQvY2hlY2tlZC5cbiAgICAgKi9cbiAgICB2YWwodmFsdWU6IHN0cmluZ3xzdHJpbmdbXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZhbHVlIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgdG8gc2V0LiB0aGlzIGlzIHRoZSBjdXJyZW50IGVsZW1lbnQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIHZhbHVlIGFzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICB2YWwoZnVuYzogKGluZGV4OiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpID0+IHN0cmluZyk6IEpRdWVyeTtcblxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBvZiBzdHlsZSBwcm9wZXJ0aWVzIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIEEgQ1NTIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGNzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXQgb25lIG9yIG1vcmUgQ1NTIHByb3BlcnRpZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgQSBDU1MgcHJvcGVydHkgbmFtZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgQSB2YWx1ZSB0byBzZXQgZm9yIHRoZSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBjc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd8bnVtYmVyKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNldCBvbmUgb3IgbW9yZSBDU1MgcHJvcGVydGllcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBBIENTUyBwcm9wZXJ0eSBuYW1lLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgdG8gc2V0LiB0aGlzIGlzIHRoZSBjdXJyZW50IGVsZW1lbnQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIHZhbHVlIGFzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBjc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IHN0cmluZykgPT4gc3RyaW5nfG51bWJlcik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgb25lIG9yIG1vcmUgQ1NTIHByb3BlcnRpZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEFuIG9iamVjdCBvZiBwcm9wZXJ0eS12YWx1ZSBwYWlycyB0byBzZXQuXG4gICAgICovXG4gICAgY3NzKHByb3BlcnRpZXM6IE9iamVjdCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb21wdXRlZCBoZWlnaHQgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBoZWlnaHQoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQ1NTIGhlaWdodCBvZiBldmVyeSBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBwaXhlbHMsIG9yIGFuIGludGVnZXIgd2l0aCBhbiBvcHRpb25hbCB1bml0IG9mIG1lYXN1cmUgYXBwZW5kZWQgKGFzIGEgc3RyaW5nKS5cbiAgICAgKi9cbiAgICBoZWlnaHQodmFsdWU6IG51bWJlcnxzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBDU1MgaGVpZ2h0IG9mIGV2ZXJ5IG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBoZWlnaHQgdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCBoZWlnaHQgYXMgYXJndW1lbnRzLiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICovXG4gICAgaGVpZ2h0KGZ1bmM6IChpbmRleDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb21wdXRlZCBoZWlnaHQgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgaW5jbHVkaW5nIHBhZGRpbmcgYnV0IG5vdCBib3JkZXIuXG4gICAgICovXG4gICAgaW5uZXJIZWlnaHQoKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5uZXIgaGVpZ2h0IG9uIGVsZW1lbnRzIGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgaW5jbHVkaW5nIHBhZGRpbmcgYnV0IG5vdCBib3JkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBwaXhlbHMsIG9yIGFuIGludGVnZXIgYWxvbmcgd2l0aCBhbiBvcHRpb25hbCB1bml0IG9mIG1lYXN1cmUgYXBwZW5kZWQgKGFzIGEgc3RyaW5nKS5cbiAgICAgKi9cbiAgICBpbm5lckhlaWdodChoZWlnaHQ6IG51bWJlcnxzdHJpbmcpOiBKUXVlcnk7XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXB1dGVkIHdpZHRoIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyBwYWRkaW5nIGJ1dCBub3QgYm9yZGVyLlxuICAgICAqL1xuICAgIGlubmVyV2lkdGgoKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5uZXIgd2lkdGggb24gZWxlbWVudHMgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZyBidXQgbm90IGJvcmRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHBpeGVscywgb3IgYW4gaW50ZWdlciBhbG9uZyB3aXRoIGFuIG9wdGlvbmFsIHVuaXQgb2YgbWVhc3VyZSBhcHBlbmRlZCAoYXMgYSBzdHJpbmcpLlxuICAgICAqL1xuICAgIGlubmVyV2lkdGgod2lkdGg6IG51bWJlcnxzdHJpbmcpOiBKUXVlcnk7XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvb3JkaW5hdGVzIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIG9mZnNldCgpOiBKUXVlcnlDb29yZGluYXRlcztcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydGllcyB0b3AgYW5kIGxlZnQsIHdoaWNoIGFyZSBpbnRlZ2VycyBpbmRpY2F0aW5nIHRoZSBuZXcgdG9wIGFuZCBsZWZ0IGNvb3JkaW5hdGVzIGZvciB0aGUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZXMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgdG9wIGFuZCBsZWZ0LCB3aGljaCBhcmUgaW50ZWdlcnMgaW5kaWNhdGluZyB0aGUgbmV3IHRvcCBhbmQgbGVmdCBjb29yZGluYXRlcyBmb3IgdGhlIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIG9mZnNldChjb29yZGluYXRlczogSlF1ZXJ5Q29vcmRpbmF0ZXMpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgdG9wIGFuZCBsZWZ0LCB3aGljaCBhcmUgaW50ZWdlcnMgaW5kaWNhdGluZyB0aGUgbmV3IHRvcCBhbmQgbGVmdCBjb29yZGluYXRlcyBmb3IgdGhlIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0byByZXR1cm4gdGhlIGNvb3JkaW5hdGVzIHRvIHNldC4gUmVjZWl2ZXMgdGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIGN1cnJlbnQgY29vcmRpbmF0ZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4gVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIG5ldyB0b3AgYW5kIGxlZnQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBvZmZzZXQoZnVuYzogKGluZGV4OiBudW1iZXIsIGNvb3JkczogSlF1ZXJ5Q29vcmRpbmF0ZXMpID0+IEpRdWVyeUNvb3JkaW5hdGVzKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXB1dGVkIGhlaWdodCBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZywgYm9yZGVyLCBhbmQgb3B0aW9uYWxseSBtYXJnaW4uIFJldHVybnMgYW4gaW50ZWdlciAod2l0aG91dCBcInB4XCIpIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2YWx1ZSBvciBudWxsIGlmIGNhbGxlZCBvbiBhbiBlbXB0eSBzZXQgb2YgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5jbHVkZU1hcmdpbiBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlIGVsZW1lbnQncyBtYXJnaW4gaW4gdGhlIGNhbGN1bGF0aW9uLlxuICAgICAqL1xuICAgIG91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW4/OiBib29sZWFuKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgb3V0ZXIgaGVpZ2h0IG9uIGVsZW1lbnRzIGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgaW5jbHVkaW5nIHBhZGRpbmcgYW5kIGJvcmRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHBpeGVscywgb3IgYW4gaW50ZWdlciBhbG9uZyB3aXRoIGFuIG9wdGlvbmFsIHVuaXQgb2YgbWVhc3VyZSBhcHBlbmRlZCAoYXMgYSBzdHJpbmcpLlxuICAgICAqL1xuICAgIG91dGVySGVpZ2h0KGhlaWdodDogbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb21wdXRlZCB3aWR0aCBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZyBhbmQgYm9yZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluY2x1ZGVNYXJnaW4gQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBpbmNsdWRlIHRoZSBlbGVtZW50J3MgbWFyZ2luIGluIHRoZSBjYWxjdWxhdGlvbi5cbiAgICAgKi9cbiAgICBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW4/OiBib29sZWFuKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgb3V0ZXIgd2lkdGggb24gZWxlbWVudHMgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZyBhbmQgYm9yZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgcGl4ZWxzLCBvciBhbiBpbnRlZ2VyIGFsb25nIHdpdGggYW4gb3B0aW9uYWwgdW5pdCBvZiBtZWFzdXJlIGFwcGVuZGVkIChhcyBhIHN0cmluZykuXG4gICAgICovXG4gICAgb3V0ZXJXaWR0aCh3aWR0aDogbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb29yZGluYXRlcyBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIHJlbGF0aXZlIHRvIHRoZSBvZmZzZXQgcGFyZW50LlxuICAgICAqL1xuICAgIHBvc2l0aW9uKCk6IEpRdWVyeUNvb3JkaW5hdGVzO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHNjcm9sbCBiYXIgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyBvciBzZXQgdGhlIGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHNjcm9sbCBiYXIgZm9yIGV2ZXJ5IG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBzY3JvbGxMZWZ0KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnQgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgZWFjaCBvZiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSBuZXcgcG9zaXRpb24gdG8gc2V0IHRoZSBzY3JvbGwgYmFyIHRvLlxuICAgICAqL1xuICAgIHNjcm9sbExlZnQodmFsdWU6IG51bWJlcik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIG9yIHNldCB0aGUgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHNjcm9sbCBiYXIgZm9yIGV2ZXJ5IG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBzY3JvbGxUb3AoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgZWFjaCBvZiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSBuZXcgcG9zaXRpb24gdG8gc2V0IHRoZSBzY3JvbGwgYmFyIHRvLlxuICAgICAqL1xuICAgIHNjcm9sbFRvcCh2YWx1ZTogbnVtYmVyKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXB1dGVkIHdpZHRoIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgd2lkdGgoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQ1NTIHdpZHRoIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBwaXhlbHMsIG9yIGFuIGludGVnZXIgYWxvbmcgd2l0aCBhbiBvcHRpb25hbCB1bml0IG9mIG1lYXN1cmUgYXBwZW5kZWQgKGFzIGEgc3RyaW5nKS5cbiAgICAgKi9cbiAgICB3aWR0aCh2YWx1ZTogbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIENTUyB3aWR0aCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHdpZHRoIHRvIHNldC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgd2lkdGggYXMgYXJndW1lbnRzLiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICovXG4gICAgd2lkdGgoZnVuYzogKGluZGV4OiBudW1iZXIsIHdpZHRoOiBudW1iZXIpID0+IG51bWJlcnxzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgZnJvbSB0aGUgcXVldWUgYWxsIGl0ZW1zIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW4gcnVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqL1xuICAgIGNsZWFyUXVldWUocXVldWVOYW1lPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgYXJiaXRyYXJ5IGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSBBIHN0cmluZyBuYW1pbmcgdGhlIHBpZWNlIG9mIGRhdGEgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgbmV3IGRhdGEgdmFsdWU7IGl0IGNhbiBiZSBhbnkgSmF2YXNjcmlwdCB0eXBlIGluY2x1ZGluZyBBcnJheSBvciBPYmplY3QuXG4gICAgICovXG4gICAgZGF0YShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTdG9yZSBhcmJpdHJhcnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqIEFuIG9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgb2YgZGF0YSB0byB1cGRhdGUuXG4gICAgICovXG4gICAgZGF0YShvYmo6IHsgW2tleTogc3RyaW5nXTogYW55OyB9KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgdmFsdWUgYXQgdGhlIG5hbWVkIGRhdGEgc3RvcmUgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBqUXVlcnkgY29sbGVjdGlvbiwgYXMgc2V0IGJ5IGRhdGEobmFtZSwgdmFsdWUpIG9yIGJ5IGFuIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IE5hbWUgb2YgdGhlIGRhdGEgc3RvcmVkLlxuICAgICAqL1xuICAgIGRhdGEoa2V5OiBzdHJpbmcpOiBhbnk7XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB2YWx1ZSBhdCB0aGUgbmFtZWQgZGF0YSBzdG9yZSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGpRdWVyeSBjb2xsZWN0aW9uLCBhcyBzZXQgYnkgZGF0YShuYW1lLCB2YWx1ZSkgb3IgYnkgYW4gSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBkYXRhKCk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIG5leHQgZnVuY3Rpb24gb24gdGhlIHF1ZXVlIGZvciB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBxdWV1ZU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcXVldWUuIERlZmF1bHRzIHRvIGZ4LCB0aGUgc3RhbmRhcmQgZWZmZWN0cyBxdWV1ZS5cbiAgICAgKi9cbiAgICBkZXF1ZXVlKHF1ZXVlTmFtZT86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByZXZpb3VzbHktc3RvcmVkIHBpZWNlIG9mIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBBIHN0cmluZyBuYW1pbmcgdGhlIHBpZWNlIG9mIGRhdGEgdG8gZGVsZXRlIG9yIHNwYWNlLXNlcGFyYXRlZCBzdHJpbmcgbmFtaW5nIHRoZSBwaWVjZXMgb2YgZGF0YSB0byBkZWxldGUuXG4gICAgICovXG4gICAgcmVtb3ZlRGF0YShuYW1lOiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJldmlvdXNseS1zdG9yZWQgcGllY2Ugb2YgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0IEFuIGFycmF5IG9mIHN0cmluZ3MgbmFtaW5nIHRoZSBwaWVjZXMgb2YgZGF0YSB0byBkZWxldGUuXG4gICAgICovXG4gICAgcmVtb3ZlRGF0YShsaXN0OiBzdHJpbmdbXSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIFByb21pc2Ugb2JqZWN0IHRvIG9ic2VydmUgd2hlbiBhbGwgYWN0aW9ucyBvZiBhIGNlcnRhaW4gdHlwZSBib3VuZCB0byB0aGUgY29sbGVjdGlvbiwgcXVldWVkIG9yIG5vdCwgaGF2ZSBmaW5pc2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHF1ZXVlIHRoYXQgbmVlZHMgdG8gYmUgb2JzZXJ2ZWQuIChkZWZhdWx0OiBmeClcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IE9iamVjdCBvbnRvIHdoaWNoIHRoZSBwcm9taXNlIG1ldGhvZHMgaGF2ZSB0byBiZSBhdHRhY2hlZFxuICAgICAqL1xuICAgIHByb21pc2UodHlwZT86IHN0cmluZywgdGFyZ2V0PzogT2JqZWN0KTogSlF1ZXJ5UHJvbWlzZTxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIGN1c3RvbSBhbmltYXRpb24gb2YgYSBzZXQgb2YgQ1NTIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydGllcyBBbiBvYmplY3Qgb2YgQ1NTIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB0aGF0IHRoZSBhbmltYXRpb24gd2lsbCBtb3ZlIHRvd2FyZC5cbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgYW5pbWF0ZShwcm9wZXJ0aWVzOiBPYmplY3QsIGR1cmF0aW9uPzogc3RyaW5nfG51bWJlciwgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgY3VzdG9tIGFuaW1hdGlvbiBvZiBhIHNldCBvZiBDU1MgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEFuIG9iamVjdCBvZiBDU1MgcHJvcGVydGllcyBhbmQgdmFsdWVzIHRoYXQgdGhlIGFuaW1hdGlvbiB3aWxsIG1vdmUgdG93YXJkLlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uIChkZWZhdWx0OiBzd2luZylcbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBhbmltYXRlKHByb3BlcnRpZXM6IE9iamVjdCwgZHVyYXRpb24/OiBzdHJpbmd8bnVtYmVyLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIGN1c3RvbSBhbmltYXRpb24gb2YgYSBzZXQgb2YgQ1NTIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydGllcyBBbiBvYmplY3Qgb2YgQ1NTIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB0aGF0IHRoZSBhbmltYXRpb24gd2lsbCBtb3ZlIHRvd2FyZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIG1hcCBvZiBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIGFuaW1hdGUocHJvcGVydGllczogT2JqZWN0LCBvcHRpb25zOiBKUXVlcnlBbmltYXRpb25PcHRpb25zKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogU2V0IGEgdGltZXIgdG8gZGVsYXkgZXhlY3V0aW9uIG9mIHN1YnNlcXVlbnQgaXRlbXMgaW4gdGhlIHF1ZXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEFuIGludGVnZXIgaW5kaWNhdGluZyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBleGVjdXRpb24gb2YgdGhlIG5leHQgaXRlbSBpbiB0aGUgcXVldWUuXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqL1xuICAgIGRlbGF5KGR1cmF0aW9uOiBudW1iZXIsIHF1ZXVlTmFtZT86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIG1hdGNoZWQgZWxlbWVudHMgYnkgZmFkaW5nIHRoZW0gdG8gb3BhcXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZhZGVJbihkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgbWF0Y2hlZCBlbGVtZW50cyBieSBmYWRpbmcgdGhlbSB0byBvcGFxdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZhZGVJbihkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBtYXRjaGVkIGVsZW1lbnRzIGJ5IGZhZGluZyB0aGVtIHRvIG9wYXF1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgZmFkZUluKG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGJ5IGZhZGluZyB0aGVtIHRvIHRyYW5zcGFyZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZhZGVPdXQoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgYnkgZmFkaW5nIHRoZW0gdG8gdHJhbnNwYXJlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZhZGVPdXQoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyBieSBmYWRpbmcgdGhlbSB0byB0cmFuc3BhcmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgZmFkZU91dChvcHRpb25zOiBKUXVlcnlBbmltYXRpb25PcHRpb25zKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQWRqdXN0IHRoZSBvcGFjaXR5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBvcGFjaXR5IEEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBkZW5vdGluZyB0aGUgdGFyZ2V0IG9wYWNpdHkuXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZVRvKGR1cmF0aW9uOiBzdHJpbmd8bnVtYmVyLCBvcGFjaXR5OiBudW1iZXIsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWRqdXN0IHRoZSBvcGFjaXR5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBvcGFjaXR5IEEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBkZW5vdGluZyB0aGUgdGFyZ2V0IG9wYWNpdHkuXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZhZGVUbyhkdXJhdGlvbjogc3RyaW5nfG51bWJlciwgb3BhY2l0eTogbnVtYmVyLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgYnkgYW5pbWF0aW5nIHRoZWlyIG9wYWNpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZVRvZ2dsZShkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGJ5IGFuaW1hdGluZyB0aGVpciBvcGFjaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBmYWRlVG9nZ2xlKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgZWFzaW5nPzogc3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgb3IgaGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyBieSBhbmltYXRpbmcgdGhlaXIgb3BhY2l0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgZmFkZVRvZ2dsZShvcHRpb25zOiBKUXVlcnlBbmltYXRpb25PcHRpb25zKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgY3VycmVudGx5LXJ1bm5pbmcgYW5pbWF0aW9uLCByZW1vdmUgYWxsIHF1ZXVlZCBhbmltYXRpb25zLCBhbmQgY29tcGxldGUgYWxsIGFuaW1hdGlvbnMgZm9yIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBuYW1lIG9mIHRoZSBxdWV1ZSBpbiB3aGljaCB0byBzdG9wIGFuaW1hdGlvbnMuXG4gICAgICovXG4gICAgZmluaXNoKHF1ZXVlPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBoaWRlKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBoaWRlKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgZWFzaW5nPzogc3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIG1hcCBvZiBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIGhpZGUob3B0aW9uczogSlF1ZXJ5QW5pbWF0aW9uT3B0aW9ucyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgc2hvdyhkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgc2hvdyhkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBzaG93KG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBtYXRjaGVkIGVsZW1lbnRzIHdpdGggYSBzbGlkaW5nIG1vdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzbGlkZURvd24oZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzbGlkZURvd24oZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIGEgc2xpZGluZyBtb3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIG1hcCBvZiBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIHNsaWRlRG93bihvcHRpb25zOiBKUXVlcnlBbmltYXRpb25PcHRpb25zKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIHdpdGggYSBzbGlkaW5nIG1vdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzbGlkZVRvZ2dsZShkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIHdpdGggYSBzbGlkaW5nIG1vdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgc2xpZGVUb2dnbGUoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIHdpdGggYSBzbGlkaW5nIG1vdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgc2xpZGVUb2dnbGUob3B0aW9uczogSlF1ZXJ5QW5pbWF0aW9uT3B0aW9ucyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHNsaWRlVXAoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzbGlkZVVwKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgZWFzaW5nPzogc3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBzbGlkZVVwKG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50bHktcnVubmluZyBhbmltYXRpb24gb24gdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xlYXJRdWV1ZSBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHJlbW92ZSBxdWV1ZWQgYW5pbWF0aW9uIGFzIHdlbGwuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEBwYXJhbSBqdW1wVG9FbmQgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBjb21wbGV0ZSB0aGUgY3VycmVudCBhbmltYXRpb24gaW1tZWRpYXRlbHkuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqL1xuICAgIHN0b3AoY2xlYXJRdWV1ZT86IGJvb2xlYW4sIGp1bXBUb0VuZD86IGJvb2xlYW4pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgY3VycmVudGx5LXJ1bm5pbmcgYW5pbWF0aW9uIG9uIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBuYW1lIG9mIHRoZSBxdWV1ZSBpbiB3aGljaCB0byBzdG9wIGFuaW1hdGlvbnMuXG4gICAgICogQHBhcmFtIGNsZWFyUXVldWUgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byByZW1vdmUgcXVldWVkIGFuaW1hdGlvbiBhcyB3ZWxsLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0ganVtcFRvRW5kIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gY29tcGxldGUgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGltbWVkaWF0ZWx5LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKi9cbiAgICBzdG9wKHF1ZXVlPzogc3RyaW5nLCBjbGVhclF1ZXVlPzogYm9vbGVhbiwganVtcFRvRW5kPzogYm9vbGVhbik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgb3IgaGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICB0b2dnbGUoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgb3IgaGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgdG9nZ2xlKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgZWFzaW5nPzogc3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgb3IgaGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgdG9nZ2xlKG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNob3dPckhpZGUgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBzaG93IG9yIGhpZGUgdGhlIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHRvZ2dsZShzaG93T3JIaWRlOiBib29sZWFuKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgQSBzdHJpbmcgY29udGFpbmluZyBvbmUgb3IgbW9yZSBET00gZXZlbnQgdHlwZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwic3VibWl0LFwiIG9yIGN1c3RvbSBldmVudCBuYW1lcy5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgYmluZChldmVudFR5cGU6IHN0cmluZywgZXZlbnREYXRhOiBhbnksIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIERPTSBldmVudCB0eXBlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJzdWJtaXQsXCIgb3IgY3VzdG9tIGV2ZW50IG5hbWVzLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBiaW5kKGV2ZW50VHlwZTogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgQSBzdHJpbmcgY29udGFpbmluZyBvbmUgb3IgbW9yZSBET00gZXZlbnQgdHlwZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwic3VibWl0LFwiIG9yIGN1c3RvbSBldmVudCBuYW1lcy5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gcHJldmVudEJ1YmJsZSBTZXR0aW5nIHRoZSB0aGlyZCBhcmd1bWVudCB0byBmYWxzZSB3aWxsIGF0dGFjaCBhIGZ1bmN0aW9uIHRoYXQgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uIGZyb20gb2NjdXJyaW5nIGFuZCBzdG9wcyB0aGUgZXZlbnQgZnJvbSBidWJibGluZy4gVGhlIGRlZmF1bHQgaXMgdHJ1ZS5cbiAgICAgKi9cbiAgICBiaW5kKGV2ZW50VHlwZTogc3RyaW5nLCBldmVudERhdGE6IGFueSwgcHJldmVudEJ1YmJsZTogYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIERPTSBldmVudCB0eXBlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJzdWJtaXQsXCIgb3IgY3VzdG9tIGV2ZW50IG5hbWVzLlxuICAgICAqIEBwYXJhbSBwcmV2ZW50QnViYmxlIFNldHRpbmcgdGhlIHRoaXJkIGFyZ3VtZW50IHRvIGZhbHNlIHdpbGwgYXR0YWNoIGEgZnVuY3Rpb24gdGhhdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gZnJvbSBvY2N1cnJpbmcgYW5kIHN0b3BzIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nLiBUaGUgZGVmYXVsdCBpcyB0cnVlLlxuICAgICAqL1xuICAgIGJpbmQoZXZlbnRUeXBlOiBzdHJpbmcsIHByZXZlbnRCdWJibGU6IGJvb2xlYW4pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudHMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgRE9NIGV2ZW50IHR5cGVzIGFuZCBmdW5jdGlvbnMgdG8gZXhlY3V0ZSBmb3IgdGhlbS5cbiAgICAgKi9cbiAgICBiaW5kKGV2ZW50czogYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJibHVyXCIgZXZlbnQgb24gYW4gZWxlbWVudFxuICAgICAqL1xuICAgIGJsdXIoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJibHVyXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGJsdXIoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJibHVyXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGJsdXIoZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJjaGFuZ2VcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGNoYW5nZSgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImNoYW5nZVwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBjaGFuZ2UoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJjaGFuZ2VcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgY2hhbmdlKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwiY2xpY2tcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGNsaWNrKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiY2xpY2tcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKi9cbiAgICBjbGljayhoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImNsaWNrXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGNsaWNrKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwiZGJsY2xpY2tcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGRibGNsaWNrKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiZGJsY2xpY2tcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZGJsY2xpY2soaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJkYmxjbGlja1wiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBkYmxjbGljayhldmVudERhdGE/OiBhbnksIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICBkZWxlZ2F0ZShzZWxlY3RvcjogYW55LCBldmVudFR5cGU6IHN0cmluZywgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIGRlbGVnYXRlKHNlbGVjdG9yOiBhbnksIGV2ZW50VHlwZTogc3RyaW5nLCBldmVudERhdGE6IGFueSwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJmb2N1c1wiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgZm9jdXMoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJmb2N1c1wiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBmb2N1cyhoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImZvY3VzXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGZvY3VzKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJmb2N1c2luXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGZvY3VzaW4oaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJmb2N1c2luXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGZvY3VzaW4oZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJmb2N1c291dFwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBmb2N1c291dChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImZvY3Vzb3V0XCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGZvY3Vzb3V0KGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHR3byBoYW5kbGVycyB0byB0aGUgbWF0Y2hlZCBlbGVtZW50cywgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbW91c2UgcG9pbnRlciBlbnRlcnMgYW5kIGxlYXZlcyB0aGUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlckluIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBtb3VzZSBwb2ludGVyIGVudGVycyB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gaGFuZGxlck91dCBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgbW91c2UgcG9pbnRlciBsZWF2ZXMgdGhlIGVsZW1lbnQuXG4gICAgICovXG4gICAgaG92ZXIoaGFuZGxlckluOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnksIGhhbmRsZXJPdXQ6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGEgc2luZ2xlIGhhbmRsZXIgdG8gdGhlIG1hdGNoZWQgZWxlbWVudHMsIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIG1vdXNlIHBvaW50ZXIgZW50ZXJzIG9yIGxlYXZlcyB0aGUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlckluT3V0IEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBtb3VzZSBwb2ludGVyIGVudGVycyBvciBsZWF2ZXMgdGhlIGVsZW1lbnQuXG4gICAgICovXG4gICAgaG92ZXIoaGFuZGxlckluT3V0OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcImtleWRvd25cIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGtleWRvd24oKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJrZXlkb3duXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGtleWRvd24oaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlLZXlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJrZXlkb3duXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGtleWRvd24oZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlLZXlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJrZXlwcmVzc1wiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAga2V5cHJlc3MoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJrZXlwcmVzc1wiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBrZXlwcmVzcyhoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUtleUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImtleXByZXNzXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGtleXByZXNzKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5S2V5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwia2V5dXBcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGtleXVwKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwia2V5dXBcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAga2V5dXAoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlLZXlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJrZXl1cFwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBrZXl1cChldmVudERhdGE/OiBhbnksIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUtleUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwibG9hZFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGxvYWQoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJsb2FkXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbG9hZChldmVudERhdGE/OiBhbnksIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcIm1vdXNlZG93blwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgbW91c2Vkb3duKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwibW91c2Vkb3duXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2Vkb3duKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZWRvd25cIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZWRvd24oZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJtb3VzZWVudGVyXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb3VzZWVudGVyKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gYmUgZmlyZWQgd2hlbiB0aGUgbW91c2UgZW50ZXJzIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlZW50ZXIoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIGJlIGZpcmVkIHdoZW4gdGhlIG1vdXNlIGVudGVycyBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZWVudGVyKGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwibW91c2VsZWF2ZVwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgbW91c2VsZWF2ZSgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIGJlIGZpcmVkIHdoZW4gdGhlIG1vdXNlIGxlYXZlcyBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZWxlYXZlKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byBiZSBmaXJlZCB3aGVuIHRoZSBtb3VzZSBsZWF2ZXMgYW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2VsZWF2ZShldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcIm1vdXNlbW92ZVwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgbW91c2Vtb3ZlKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwibW91c2Vtb3ZlXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2Vtb3ZlKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZW1vdmVcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZW1vdmUoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJtb3VzZW91dFwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgbW91c2VvdXQoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZW91dFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlb3V0KGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZW91dFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlb3V0KGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwibW91c2VvdmVyXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb3VzZW92ZXIoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZW92ZXJcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZW92ZXIoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNlb3ZlclwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlb3ZlcihldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcIm1vdXNldXBcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIG1vdXNldXAoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZXVwXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2V1cChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwibW91c2V1cFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNldXAoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgb2ZmKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgT25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGV2ZW50IHR5cGVzIGFuZCBvcHRpb25hbCBuYW1lc3BhY2VzLCBvciBqdXN0IG5hbWVzcGFjZXMsIHN1Y2ggYXMgXCJjbGlja1wiLCBcImtleWRvd24ubXlQbHVnaW5cIiwgb3IgXCIubXlQbHVnaW5cIi5cbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciB3aGljaCBzaG91bGQgbWF0Y2ggdGhlIG9uZSBvcmlnaW5hbGx5IHBhc3NlZCB0byAub24oKSB3aGVuIGF0dGFjaGluZyBldmVudCBoYW5kbGVycy5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGhhbmRsZXIgZnVuY3Rpb24gcHJldmlvdXNseSBhdHRhY2hlZCBmb3IgdGhlIGV2ZW50KHMpLCBvciB0aGUgc3BlY2lhbCB2YWx1ZSBmYWxzZS5cbiAgICAgKi9cbiAgICBvZmYoZXZlbnRzOiBzdHJpbmcsIHNlbGVjdG9yPzogc3RyaW5nLCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIG9yIGp1c3QgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIsIFwia2V5ZG93bi5teVBsdWdpblwiLCBvciBcIi5teVBsdWdpblwiLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgaGFuZGxlciBmdW5jdGlvbiBwcmV2aW91c2x5IGF0dGFjaGVkIGZvciB0aGUgZXZlbnQocyksIG9yIHRoZSBzcGVjaWFsIHZhbHVlIGZhbHNlLlxuICAgICAqL1xuICAgIG9mZihldmVudHM6IHN0cmluZywgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBbiBvYmplY3Qgd2hlcmUgdGhlIHN0cmluZyBrZXlzIHJlcHJlc2VudCBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIGFuZCB0aGUgdmFsdWVzIHJlcHJlc2VudCBoYW5kbGVyIGZ1bmN0aW9ucyBwcmV2aW91c2x5IGF0dGFjaGVkIGZvciB0aGUgZXZlbnQocykuXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igd2hpY2ggc2hvdWxkIG1hdGNoIHRoZSBvbmUgb3JpZ2luYWxseSBwYXNzZWQgdG8gLm9uKCkgd2hlbiBhdHRhY2hpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICovXG4gICAgb2ZmKGV2ZW50czogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0sIHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24gZm9yIG9uZSBvciBtb3JlIGV2ZW50cyB0byB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJrZXlkb3duLm15UGx1Z2luXCIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4gVGhlIHZhbHVlIGZhbHNlIGlzIGFsc28gYWxsb3dlZCBhcyBhIHNob3J0aGFuZCBmb3IgYSBmdW5jdGlvbiB0aGF0IHNpbXBseSBkb2VzIHJldHVybiBmYWxzZS4gUmVzdCBwYXJhbWV0ZXIgYXJncyBpcyBmb3Igb3B0aW9uYWwgcGFyYW1ldGVycyBwYXNzZWQgdG8galF1ZXJ5LnRyaWdnZXIoKS4gTm90ZSB0aGF0IHRoZSBhY3R1YWwgcGFyYW1ldGVycyBvbiB0aGUgZXZlbnQgaGFuZGxlciBmdW5jdGlvbiBtdXN0IGJlIG1hcmtlZCBhcyBvcHRpb25hbCAoPyBzeW50YXgpLlxuICAgICAqL1xuICAgIG9uKGV2ZW50czogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0LCAuLi5hcmdzOiBhbnlbXSkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGZvciBvbmUgb3IgbW9yZSBldmVudHMgdG8gdGhlIHNlbGVjdGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwia2V5ZG93bi5teVBsdWdpblwiLlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gYmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyIGluIGV2ZW50LmRhdGEgd2hlbiBhbiBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4gVGhlIHZhbHVlIGZhbHNlIGlzIGFsc28gYWxsb3dlZCBhcyBhIHNob3J0aGFuZCBmb3IgYSBmdW5jdGlvbiB0aGF0IHNpbXBseSBkb2VzIHJldHVybiBmYWxzZS5cbiAgICAqL1xuICAgIG9uKGV2ZW50czogc3RyaW5nLCBkYXRhIDogYW55LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0LCAuLi5hcmdzOiBhbnlbXSkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGZvciBvbmUgb3IgbW9yZSBldmVudHMgdG8gdGhlIHNlbGVjdGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwia2V5ZG93bi5teVBsdWdpblwiLlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHN0cmluZyB0byBmaWx0ZXIgdGhlIGRlc2NlbmRhbnRzIG9mIHRoZSBzZWxlY3RlZCBlbGVtZW50cyB0aGF0IHRyaWdnZXIgdGhlIGV2ZW50LiBJZiB0aGUgc2VsZWN0b3IgaXMgbnVsbCBvciBvbWl0dGVkLCB0aGUgZXZlbnQgaXMgYWx3YXlzIHRyaWdnZXJlZCB3aGVuIGl0IHJlYWNoZXMgdGhlIHNlbGVjdGVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4gVGhlIHZhbHVlIGZhbHNlIGlzIGFsc28gYWxsb3dlZCBhcyBhIHNob3J0aGFuZCBmb3IgYSBmdW5jdGlvbiB0aGF0IHNpbXBseSBkb2VzIHJldHVybiBmYWxzZS5cbiAgICAgKi9cbiAgICBvbihldmVudHM6IHN0cmluZywgc2VsZWN0b3I6IHN0cmluZywgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCwgLi4uZXZlbnREYXRhOiBhbnlbXSkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGZvciBvbmUgb3IgbW9yZSBldmVudHMgdG8gdGhlIHNlbGVjdGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwia2V5ZG93bi5teVBsdWdpblwiLlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHN0cmluZyB0byBmaWx0ZXIgdGhlIGRlc2NlbmRhbnRzIG9mIHRoZSBzZWxlY3RlZCBlbGVtZW50cyB0aGF0IHRyaWdnZXIgdGhlIGV2ZW50LiBJZiB0aGUgc2VsZWN0b3IgaXMgbnVsbCBvciBvbWl0dGVkLCB0aGUgZXZlbnQgaXMgYWx3YXlzIHRyaWdnZXJlZCB3aGVuIGl0IHJlYWNoZXMgdGhlIHNlbGVjdGVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgaW4gZXZlbnQuZGF0YSB3aGVuIGFuIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLiBUaGUgdmFsdWUgZmFsc2UgaXMgYWxzbyBhbGxvd2VkIGFzIGEgc2hvcnRoYW5kIGZvciBhIGZ1bmN0aW9uIHRoYXQgc2ltcGx5IGRvZXMgcmV0dXJuIGZhbHNlLlxuICAgICAqL1xuICAgIG9uKGV2ZW50czogc3RyaW5nLCBzZWxlY3Rvcjogc3RyaW5nLCBkYXRhOiBhbnksIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QsIC4uLmV2ZW50RGF0YTogYW55W10pID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvbiBmb3Igb25lIG9yIG1vcmUgZXZlbnRzIHRvIHRoZSBzZWxlY3RlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgQW4gb2JqZWN0IGluIHdoaWNoIHRoZSBzdHJpbmcga2V5cyByZXByZXNlbnQgb25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGV2ZW50IHR5cGVzIGFuZCBvcHRpb25hbCBuYW1lc3BhY2VzLCBhbmQgdGhlIHZhbHVlcyByZXByZXNlbnQgYSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgdGhlIGV2ZW50KHMpLlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHN0cmluZyB0byBmaWx0ZXIgdGhlIGRlc2NlbmRhbnRzIG9mIHRoZSBzZWxlY3RlZCBlbGVtZW50cyB0aGF0IHdpbGwgY2FsbCB0aGUgaGFuZGxlci4gSWYgdGhlIHNlbGVjdG9yIGlzIG51bGwgb3Igb21pdHRlZCwgdGhlIGhhbmRsZXIgaXMgYWx3YXlzIGNhbGxlZCB3aGVuIGl0IHJlYWNoZXMgdGhlIHNlbGVjdGVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgaW4gZXZlbnQuZGF0YSB3aGVuIGFuIGV2ZW50IG9jY3Vycy5cbiAgICAgKi9cbiAgICBvbihldmVudHM6IHsgW2tleTogc3RyaW5nXTogYW55OyB9LCBzZWxlY3Rvcj86IHN0cmluZywgZGF0YT86IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvbiBmb3Igb25lIG9yIG1vcmUgZXZlbnRzIHRvIHRoZSBzZWxlY3RlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgQW4gb2JqZWN0IGluIHdoaWNoIHRoZSBzdHJpbmcga2V5cyByZXByZXNlbnQgb25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGV2ZW50IHR5cGVzIGFuZCBvcHRpb25hbCBuYW1lc3BhY2VzLCBhbmQgdGhlIHZhbHVlcyByZXByZXNlbnQgYSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgdGhlIGV2ZW50KHMpLlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gYmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyIGluIGV2ZW50LmRhdGEgd2hlbiBhbiBldmVudCBvY2N1cnMuXG4gICAgICovXG4gICAgb24oZXZlbnRzOiB7IFtrZXk6IHN0cmluZ106IGFueTsgfSwgZGF0YT86IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy4gVGhlIGhhbmRsZXIgaXMgZXhlY3V0ZWQgYXQgbW9zdCBvbmNlIHBlciBlbGVtZW50IHBlciBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIEphdmFTY3JpcHQgZXZlbnQgdHlwZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwic3VibWl0LFwiIG9yIGN1c3RvbSBldmVudCBuYW1lcy5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYXQgdGhlIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBvbmUoZXZlbnRzOiBzdHJpbmcsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuIFRoZSBoYW5kbGVyIGlzIGV4ZWN1dGVkIGF0IG1vc3Qgb25jZSBwZXIgZWxlbWVudCBwZXIgZXZlbnQgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgQSBzdHJpbmcgY29udGFpbmluZyBvbmUgb3IgbW9yZSBKYXZhU2NyaXB0IGV2ZW50IHR5cGVzLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcInN1Ym1pdCxcIiBvciBjdXN0b20gZXZlbnQgbmFtZXMuXG4gICAgICogQHBhcmFtIGRhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhdCB0aGUgdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG9uZShldmVudHM6IHN0cmluZywgZGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuIFRoZSBoYW5kbGVyIGlzIGV4ZWN1dGVkIGF0IG1vc3Qgb25jZSBwZXIgZWxlbWVudCBwZXIgZXZlbnQgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgT25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGV2ZW50IHR5cGVzIGFuZCBvcHRpb25hbCBuYW1lc3BhY2VzLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcImtleWRvd24ubXlQbHVnaW5cIi5cbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciBzdHJpbmcgdG8gZmlsdGVyIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgc2VsZWN0ZWQgZWxlbWVudHMgdGhhdCB0cmlnZ2VyIHRoZSBldmVudC4gSWYgdGhlIHNlbGVjdG9yIGlzIG51bGwgb3Igb21pdHRlZCwgdGhlIGV2ZW50IGlzIGFsd2F5cyB0cmlnZ2VyZWQgd2hlbiBpdCByZWFjaGVzIHRoZSBzZWxlY3RlZCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuIFRoZSB2YWx1ZSBmYWxzZSBpcyBhbHNvIGFsbG93ZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGEgZnVuY3Rpb24gdGhhdCBzaW1wbHkgZG9lcyByZXR1cm4gZmFsc2UuXG4gICAgICovXG4gICAgb25lKGV2ZW50czogc3RyaW5nLCBzZWxlY3Rvcjogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLiBUaGUgaGFuZGxlciBpcyBleGVjdXRlZCBhdCBtb3N0IG9uY2UgcGVyIGVsZW1lbnQgcGVyIGV2ZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJrZXlkb3duLm15UGx1Z2luXCIuXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igc3RyaW5nIHRvIGZpbHRlciB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnRzIHRoYXQgdHJpZ2dlciB0aGUgZXZlbnQuIElmIHRoZSBzZWxlY3RvciBpcyBudWxsIG9yIG9taXR0ZWQsIHRoZSBldmVudCBpcyBhbHdheXMgdHJpZ2dlcmVkIHdoZW4gaXQgcmVhY2hlcyB0aGUgc2VsZWN0ZWQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgaGFuZGxlciBpbiBldmVudC5kYXRhIHdoZW4gYW4gZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuIFRoZSB2YWx1ZSBmYWxzZSBpcyBhbHNvIGFsbG93ZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGEgZnVuY3Rpb24gdGhhdCBzaW1wbHkgZG9lcyByZXR1cm4gZmFsc2UuXG4gICAgICovXG4gICAgb25lKGV2ZW50czogc3RyaW5nLCBzZWxlY3Rvcjogc3RyaW5nLCBkYXRhOiBhbnksIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy4gVGhlIGhhbmRsZXIgaXMgZXhlY3V0ZWQgYXQgbW9zdCBvbmNlIHBlciBlbGVtZW50IHBlciBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBbiBvYmplY3QgaW4gd2hpY2ggdGhlIHN0cmluZyBrZXlzIHJlcHJlc2VudCBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIGFuZCB0aGUgdmFsdWVzIHJlcHJlc2VudCBhIGhhbmRsZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciB0aGUgZXZlbnQocykuXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igc3RyaW5nIHRvIGZpbHRlciB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnRzIHRoYXQgd2lsbCBjYWxsIHRoZSBoYW5kbGVyLiBJZiB0aGUgc2VsZWN0b3IgaXMgbnVsbCBvciBvbWl0dGVkLCB0aGUgaGFuZGxlciBpcyBhbHdheXMgY2FsbGVkIHdoZW4gaXQgcmVhY2hlcyB0aGUgc2VsZWN0ZWQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgaGFuZGxlciBpbiBldmVudC5kYXRhIHdoZW4gYW4gZXZlbnQgb2NjdXJzLlxuICAgICAqL1xuICAgIG9uZShldmVudHM6IHsgW2tleTogc3RyaW5nXTogYW55OyB9LCBzZWxlY3Rvcj86IHN0cmluZywgZGF0YT86IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy4gVGhlIGhhbmRsZXIgaXMgZXhlY3V0ZWQgYXQgbW9zdCBvbmNlIHBlciBlbGVtZW50IHBlciBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBbiBvYmplY3QgaW4gd2hpY2ggdGhlIHN0cmluZyBrZXlzIHJlcHJlc2VudCBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIGFuZCB0aGUgdmFsdWVzIHJlcHJlc2VudCBhIGhhbmRsZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciB0aGUgZXZlbnQocykuXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgaW4gZXZlbnQuZGF0YSB3aGVuIGFuIGV2ZW50IG9jY3Vycy5cbiAgICAgKi9cbiAgICBvbmUoZXZlbnRzOiB7IFtrZXk6IHN0cmluZ106IGFueTsgfSwgZGF0YT86IGFueSk6IEpRdWVyeTtcblxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciB0aGUgRE9NIGlzIHJlYWR5LlxuICAgICAqL1xuICAgIHJlYWR5KGhhbmRsZXI6IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJyZXNpemVcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIHJlc2l6ZSgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcInJlc2l6ZVwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgcmVzaXplKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwicmVzaXplXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICByZXNpemUoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwic2Nyb2xsXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBzY3JvbGwoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJzY3JvbGxcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIHNjcm9sbChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcInNjcm9sbFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgc2Nyb2xsKGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcInNlbGVjdFwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgc2VsZWN0KCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwic2VsZWN0XCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBzZWxlY3QoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJzZWxlY3RcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIHNlbGVjdChldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJzdWJtaXRcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIHN1Ym1pdCgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcInN1Ym1pdFwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBzdWJtaXQoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJzdWJtaXRcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgc3VibWl0KGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYWxsIGhhbmRsZXJzIGFuZCBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdGhlIG1hdGNoZWQgZWxlbWVudHMgZm9yIHRoZSBnaXZlbiBldmVudCB0eXBlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgQSBzdHJpbmcgY29udGFpbmluZyBhIEphdmFTY3JpcHQgZXZlbnQgdHlwZSwgc3VjaCBhcyBjbGljayBvciBzdWJtaXQuXG4gICAgICogQHBhcmFtIGV4dHJhUGFyYW1ldGVycyBBZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gcGFzcyBhbG9uZyB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKi9cbiAgICB0cmlnZ2VyKGV2ZW50VHlwZTogc3RyaW5nLCBleHRyYVBhcmFtZXRlcnM/OiBhbnlbXXxPYmplY3QpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhbGwgaGFuZGxlcnMgYW5kIGJlaGF2aW9ycyBhdHRhY2hlZCB0byB0aGUgbWF0Y2hlZCBlbGVtZW50cyBmb3IgdGhlIGdpdmVuIGV2ZW50IHR5cGUuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50IEEgalF1ZXJ5LkV2ZW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gZXh0cmFQYXJhbWV0ZXJzIEFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byBwYXNzIGFsb25nIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIHRyaWdnZXIoZXZlbnQ6IEpRdWVyeUV2ZW50T2JqZWN0LCBleHRyYVBhcmFtZXRlcnM/OiBhbnlbXXxPYmplY3QpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGFsbCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbiBlbGVtZW50IGZvciBhbiBldmVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBKYXZhU2NyaXB0IGV2ZW50IHR5cGUsIHN1Y2ggYXMgY2xpY2sgb3Igc3VibWl0LlxuICAgICAqIEBwYXJhbSBleHRyYVBhcmFtZXRlcnMgQW4gYXJyYXkgb2YgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHBhc3MgYWxvbmcgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgdHJpZ2dlckhhbmRsZXIoZXZlbnRUeXBlOiBzdHJpbmcsIC4uLmV4dHJhUGFyYW1ldGVyczogYW55W10pOiBPYmplY3Q7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwcmV2aW91c2x5LWF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgZnJvbSB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIGEgSmF2YVNjcmlwdCBldmVudCB0eXBlLCBzdWNoIGFzIGNsaWNrIG9yIHN1Ym1pdC5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBUaGUgZnVuY3Rpb24gdGhhdCBpcyB0byBiZSBubyBsb25nZXIgZXhlY3V0ZWQuXG4gICAgICovXG4gICAgdW5iaW5kKGV2ZW50VHlwZT86IHN0cmluZywgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwcmV2aW91c2x5LWF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgZnJvbSB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIGEgSmF2YVNjcmlwdCBldmVudCB0eXBlLCBzdWNoIGFzIGNsaWNrIG9yIHN1Ym1pdC5cbiAgICAgKiBAcGFyYW0gZmxzIFVuYmluZHMgdGhlIGNvcnJlc3BvbmRpbmcgJ3JldHVybiBmYWxzZScgZnVuY3Rpb24gdGhhdCB3YXMgYm91bmQgdXNpbmcgLmJpbmQoIGV2ZW50VHlwZSwgZmFsc2UgKS5cbiAgICAgKi9cbiAgICB1bmJpbmQoZXZlbnRUeXBlOiBzdHJpbmcsIGZsczogYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwcmV2aW91c2x5LWF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgZnJvbSB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2dCBBIEphdmFTY3JpcHQgZXZlbnQgb2JqZWN0IGFzIHBhc3NlZCB0byBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIHVuYmluZChldnQ6IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGhhbmRsZXIgZnJvbSB0aGUgZXZlbnQgZm9yIGFsbCBlbGVtZW50cyB3aGljaCBtYXRjaCB0aGUgY3VycmVudCBzZWxlY3RvciwgYmFzZWQgdXBvbiBhIHNwZWNpZmljIHNldCBvZiByb290IGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHVuZGVsZWdhdGUoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGhhbmRsZXIgZnJvbSB0aGUgZXZlbnQgZm9yIGFsbCBlbGVtZW50cyB3aGljaCBtYXRjaCB0aGUgY3VycmVudCBzZWxlY3RvciwgYmFzZWQgdXBvbiBhIHNwZWNpZmljIHNldCBvZiByb290IGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBmaWx0ZXIgdGhlIGV2ZW50IHJlc3VsdHMuXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIGEgSmF2YVNjcmlwdCBldmVudCB0eXBlLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcImtleWRvd25cIlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhdCB0aGUgdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIHVuZGVsZWdhdGUoc2VsZWN0b3I6IHN0cmluZywgZXZlbnRUeXBlOiBzdHJpbmcsIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgaGFuZGxlciBmcm9tIHRoZSBldmVudCBmb3IgYWxsIGVsZW1lbnRzIHdoaWNoIG1hdGNoIHRoZSBjdXJyZW50IHNlbGVjdG9yLCBiYXNlZCB1cG9uIGEgc3BlY2lmaWMgc2V0IG9mIHJvb3QgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGZpbHRlciB0aGUgZXZlbnQgcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0gZXZlbnRzIEFuIG9iamVjdCBvZiBvbmUgb3IgbW9yZSBldmVudCB0eXBlcyBhbmQgcHJldmlvdXNseSBib3VuZCBmdW5jdGlvbnMgdG8gdW5iaW5kIGZyb20gdGhlbS5cbiAgICAgKi9cbiAgICB1bmRlbGVnYXRlKHNlbGVjdG9yOiBzdHJpbmcsIGV2ZW50czogT2JqZWN0KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGhhbmRsZXIgZnJvbSB0aGUgZXZlbnQgZm9yIGFsbCBlbGVtZW50cyB3aGljaCBtYXRjaCB0aGUgY3VycmVudCBzZWxlY3RvciwgYmFzZWQgdXBvbiBhIHNwZWNpZmljIHNldCBvZiByb290IGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBuYW1lc3BhY2UgQSBzdHJpbmcgY29udGFpbmluZyBhIG5hbWVzcGFjZSB0byB1bmJpbmQgYWxsIGV2ZW50cyBmcm9tLlxuICAgICAqL1xuICAgIHVuZGVsZWdhdGUobmFtZXNwYWNlOiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwidW5sb2FkXCIgSmF2YVNjcmlwdCBldmVudC4gKERFUFJFQ0FURUQgZnJvbSB2MS44KVxuICAgICAqIFxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgdW5sb2FkKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwidW5sb2FkXCIgSmF2YVNjcmlwdCBldmVudC4gKERFUFJFQ0FURUQgZnJvbSB2MS44KVxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQSBwbGFpbiBvYmplY3Qgb2YgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgdW5sb2FkKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBET00gbm9kZSBjb250ZXh0IG9yaWdpbmFsbHkgcGFzc2VkIHRvIGpRdWVyeSgpOyBpZiBub25lIHdhcyBwYXNzZWQgdGhlbiBjb250ZXh0IHdpbGwgbGlrZWx5IGJlIHRoZSBkb2N1bWVudC4gKERFUFJFQ0FURUQgZnJvbSB2MS4xMClcbiAgICAgKi9cbiAgICBjb250ZXh0OiBFbGVtZW50O1xuXG4gICAganF1ZXJ5OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiZXJyb3JcIiBKYXZhU2NyaXB0IGV2ZW50LiAoREVQUkVDQVRFRCBmcm9tIHYxLjgpXG4gICAgICogXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBlcnJvcihoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImVycm9yXCIgSmF2YVNjcmlwdCBldmVudC4gKERFUFJFQ0FURUQgZnJvbSB2MS44KVxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQSBwbGFpbiBvYmplY3Qgb2YgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZXJyb3IoZXZlbnREYXRhOiBhbnksIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbGxlY3Rpb24gb2YgRE9NIGVsZW1lbnRzIG9udG8gdGhlIGpRdWVyeSBzdGFjay5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZWxlbWVudHMgQW4gYXJyYXkgb2YgZWxlbWVudHMgdG8gcHVzaCBvbnRvIHRoZSBzdGFjayBhbmQgbWFrZSBpbnRvIGEgbmV3IGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgcHVzaFN0YWNrKGVsZW1lbnRzOiBhbnlbXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cyBvbnRvIHRoZSBqUXVlcnkgc3RhY2suXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnRzIEFuIGFycmF5IG9mIGVsZW1lbnRzIHRvIHB1c2ggb250byB0aGUgc3RhY2sgYW5kIG1ha2UgaW50byBhIG5ldyBqUXVlcnkgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIGEgalF1ZXJ5IG1ldGhvZCB0aGF0IGdlbmVyYXRlZCB0aGUgYXJyYXkgb2YgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGFyZ3VtZW50cyBUaGUgYXJndW1lbnRzIHRoYXQgd2VyZSBwYXNzZWQgaW4gdG8gdGhlIGpRdWVyeSBtZXRob2QgKGZvciBzZXJpYWxpemF0aW9uKS5cbiAgICAgKi9cbiAgICBwdXNoU3RhY2soZWxlbWVudHM6IGFueVtdLCBuYW1lOiBzdHJpbmcsIGFyZ3VtZW50czogYW55W10pOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgY29udGVudCwgc3BlY2lmaWVkIGJ5IHRoZSBwYXJhbWV0ZXIsIGFmdGVyIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogcGFyYW0gY29udGVudDEgSFRNTCBzdHJpbmcsIERPTSBlbGVtZW50LCBhcnJheSBvZiBlbGVtZW50cywgb3IgalF1ZXJ5IG9iamVjdCB0byBpbnNlcnQgYWZ0ZXIgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBwYXJhbSBjb250ZW50MiBPbmUgb3IgbW9yZSBhZGRpdGlvbmFsIERPTSBlbGVtZW50cywgYXJyYXlzIG9mIGVsZW1lbnRzLCBIVE1MIHN0cmluZ3MsIG9yIGpRdWVyeSBvYmplY3RzIHRvIGluc2VydCBhZnRlciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGFmdGVyKGNvbnRlbnQxOiBKUXVlcnl8YW55W118RWxlbWVudHxUZXh0fHN0cmluZywgLi4uY29udGVudDI6IGFueVtdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgYWZ0ZXIgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIEhUTUwgc3RyaW5nLCBET00gZWxlbWVudChzKSwgb3IgalF1ZXJ5IG9iamVjdCB0byBpbnNlcnQgYWZ0ZXIgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYXMgYW4gYXJndW1lbnQuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBhZnRlcihmdW5jOiAoaW5kZXg6IG51bWJlciwgaHRtbDogc3RyaW5nKSA9PiBzdHJpbmd8RWxlbWVudHxKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgY29udGVudCwgc3BlY2lmaWVkIGJ5IHRoZSBwYXJhbWV0ZXIsIHRvIHRoZSBlbmQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBjb250ZW50MSBET00gZWxlbWVudCwgYXJyYXkgb2YgZWxlbWVudHMsIEhUTUwgc3RyaW5nLCBvciBqUXVlcnkgb2JqZWN0IHRvIGluc2VydCBhdCB0aGUgZW5kIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogcGFyYW0gY29udGVudDIgT25lIG9yIG1vcmUgYWRkaXRpb25hbCBET00gZWxlbWVudHMsIGFycmF5cyBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmdzLCBvciBqUXVlcnkgb2JqZWN0cyB0byBpbnNlcnQgYXQgdGhlIGVuZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGFwcGVuZChjb250ZW50MTogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8VGV4dHxzdHJpbmcsIC4uLmNvbnRlbnQyOiBhbnlbXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBJbnNlcnQgY29udGVudCwgc3BlY2lmaWVkIGJ5IHRoZSBwYXJhbWV0ZXIsIHRvIHRoZSBlbmQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIEhUTUwgc3RyaW5nLCBET00gZWxlbWVudChzKSwgb3IgalF1ZXJ5IG9iamVjdCB0byBpbnNlcnQgYXQgdGhlIGVuZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCBIVE1MIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFzIGFyZ3VtZW50cy4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIGFwcGVuZChmdW5jOiAoaW5kZXg6IG51bWJlciwgaHRtbDogc3RyaW5nKSA9PiBzdHJpbmd8RWxlbWVudHxKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgZXZlcnkgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhlIGVuZCBvZiB0aGUgdGFyZ2V0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0YXJnZXQgQSBzZWxlY3RvciwgZWxlbWVudCwgSFRNTCBzdHJpbmcsIGFycmF5IG9mIGVsZW1lbnRzLCBvciBqUXVlcnkgb2JqZWN0OyB0aGUgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHMgd2lsbCBiZSBpbnNlcnRlZCBhdCB0aGUgZW5kIG9mIHRoZSBlbGVtZW50KHMpIHNwZWNpZmllZCBieSB0aGlzIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBhcHBlbmRUbyh0YXJnZXQ6IEpRdWVyeXxhbnlbXXxFbGVtZW50fHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgYmVmb3JlIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogcGFyYW0gY29udGVudDEgSFRNTCBzdHJpbmcsIERPTSBlbGVtZW50LCBhcnJheSBvZiBlbGVtZW50cywgb3IgalF1ZXJ5IG9iamVjdCB0byBpbnNlcnQgYmVmb3JlIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogcGFyYW0gY29udGVudDIgT25lIG9yIG1vcmUgYWRkaXRpb25hbCBET00gZWxlbWVudHMsIGFycmF5cyBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmdzLCBvciBqUXVlcnkgb2JqZWN0cyB0byBpbnNlcnQgYmVmb3JlIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgYmVmb3JlKGNvbnRlbnQxOiBKUXVlcnl8YW55W118RWxlbWVudHxUZXh0fHN0cmluZywgLi4uY29udGVudDI6IGFueVtdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgYmVmb3JlIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBIVE1MIHN0cmluZywgRE9NIGVsZW1lbnQocyksIG9yIGpRdWVyeSBvYmplY3QgdG8gaW5zZXJ0IGJlZm9yZSBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhcyBhbiBhcmd1bWVudC4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIGJlZm9yZShmdW5jOiAoaW5kZXg6IG51bWJlciwgaHRtbDogc3RyaW5nKSA9PiBzdHJpbmd8RWxlbWVudHxKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIHBhcmFtIHdpdGhEYXRhQW5kRXZlbnRzIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgZXZlbnQgaGFuZGxlcnMgYW5kIGRhdGEgc2hvdWxkIGJlIGNvcGllZCBhbG9uZyB3aXRoIHRoZSBlbGVtZW50cy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAgICogcGFyYW0gZGVlcFdpdGhEYXRhQW5kRXZlbnRzIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgZXZlbnQgaGFuZGxlcnMgYW5kIGRhdGEgZm9yIGFsbCBjaGlsZHJlbiBvZiB0aGUgY2xvbmVkIGVsZW1lbnQgc2hvdWxkIGJlIGNvcGllZC4gQnkgZGVmYXVsdCBpdHMgdmFsdWUgbWF0Y2hlcyB0aGUgZmlyc3QgYXJndW1lbnQncyB2YWx1ZSAod2hpY2ggZGVmYXVsdHMgdG8gZmFsc2UpLlxuICAgICAqL1xuICAgIGNsb25lKHdpdGhEYXRhQW5kRXZlbnRzPzogYm9vbGVhbiwgZGVlcFdpdGhEYXRhQW5kRXZlbnRzPzogYm9vbGVhbik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgZnJvbSB0aGUgRE9NLlxuICAgICAqIFxuICAgICAqIHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0aGF0IGZpbHRlcnMgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIGJlIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGV0YWNoKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBjaGlsZCBub2RlcyBvZiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgZnJvbSB0aGUgRE9NLlxuICAgICAqL1xuICAgIGVtcHR5KCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBldmVyeSBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyBhZnRlciB0aGUgdGFyZ2V0LlxuICAgICAqIFxuICAgICAqIHBhcmFtIHRhcmdldCBBIHNlbGVjdG9yLCBlbGVtZW50LCBhcnJheSBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmcsIG9yIGpRdWVyeSBvYmplY3Q7IHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyB3aWxsIGJlIGluc2VydGVkIGFmdGVyIHRoZSBlbGVtZW50KHMpIHNwZWNpZmllZCBieSB0aGlzIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBpbnNlcnRBZnRlcih0YXJnZXQ6IEpRdWVyeXxhbnlbXXxFbGVtZW50fFRleHR8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIGJlZm9yZSB0aGUgdGFyZ2V0LlxuICAgICAqIFxuICAgICAqIHBhcmFtIHRhcmdldCBBIHNlbGVjdG9yLCBlbGVtZW50LCBhcnJheSBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmcsIG9yIGpRdWVyeSBvYmplY3Q7IHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyB3aWxsIGJlIGluc2VydGVkIGJlZm9yZSB0aGUgZWxlbWVudChzKSBzcGVjaWZpZWQgYnkgdGhpcyBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgaW5zZXJ0QmVmb3JlKHRhcmdldDogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8VGV4dHxzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgY29udGVudCwgc3BlY2lmaWVkIGJ5IHRoZSBwYXJhbWV0ZXIsIHRvIHRoZSBiZWdpbm5pbmcgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBjb250ZW50MSBET00gZWxlbWVudCwgYXJyYXkgb2YgZWxlbWVudHMsIEhUTUwgc3RyaW5nLCBvciBqUXVlcnkgb2JqZWN0IHRvIGluc2VydCBhdCB0aGUgYmVnaW5uaW5nIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogcGFyYW0gY29udGVudDIgT25lIG9yIG1vcmUgYWRkaXRpb25hbCBET00gZWxlbWVudHMsIGFycmF5cyBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmdzLCBvciBqUXVlcnkgb2JqZWN0cyB0byBpbnNlcnQgYXQgdGhlIGJlZ2lubmluZyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHByZXBlbmQoY29udGVudDE6IEpRdWVyeXxhbnlbXXxFbGVtZW50fFRleHR8c3RyaW5nLCAuLi5jb250ZW50MjogYW55W10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGNvbnRlbnQsIHNwZWNpZmllZCBieSB0aGUgcGFyYW1ldGVyLCB0byB0aGUgYmVnaW5uaW5nIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBIVE1MIHN0cmluZywgRE9NIGVsZW1lbnQocyksIG9yIGpRdWVyeSBvYmplY3QgdG8gaW5zZXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgSFRNTCB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhcyBhcmd1bWVudHMuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBwcmVwZW5kKGZ1bmM6IChpbmRleDogbnVtYmVyLCBodG1sOiBzdHJpbmcpID0+IHN0cmluZ3xFbGVtZW50fEpRdWVyeSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBldmVyeSBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0YXJnZXQuXG4gICAgICogXG4gICAgICogQHBhcmFtIHRhcmdldCBBIHNlbGVjdG9yLCBlbGVtZW50LCBIVE1MIHN0cmluZywgYXJyYXkgb2YgZWxlbWVudHMsIG9yIGpRdWVyeSBvYmplY3Q7IHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyB3aWxsIGJlIGluc2VydGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGVsZW1lbnQocykgc3BlY2lmaWVkIGJ5IHRoaXMgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHByZXBlbmRUbyh0YXJnZXQ6IEpRdWVyeXxhbnlbXXxFbGVtZW50fHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgZnJvbSB0aGUgRE9NLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIGV4cHJlc3Npb24gdGhhdCBmaWx0ZXJzIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byBiZSByZW1vdmVkLlxuICAgICAqL1xuICAgIHJlbW92ZShzZWxlY3Rvcj86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgZWFjaCB0YXJnZXQgZWxlbWVudCB3aXRoIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IEEgc2VsZWN0b3Igc3RyaW5nLCBqUXVlcnkgb2JqZWN0LCBET00gZWxlbWVudCwgb3IgYXJyYXkgb2YgZWxlbWVudHMgaW5kaWNhdGluZyB3aGljaCBlbGVtZW50KHMpIHRvIHJlcGxhY2UuXG4gICAgICovXG4gICAgcmVwbGFjZUFsbCh0YXJnZXQ6IEpRdWVyeXxhbnlbXXxFbGVtZW50fHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIHRoZSBwcm92aWRlZCBuZXcgY29udGVudCBhbmQgcmV0dXJuIHRoZSBzZXQgb2YgZWxlbWVudHMgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBuZXdDb250ZW50IFRoZSBjb250ZW50IHRvIGluc2VydC4gTWF5IGJlIGFuIEhUTUwgc3RyaW5nLCBET00gZWxlbWVudCwgYXJyYXkgb2YgRE9NIGVsZW1lbnRzLCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAqL1xuICAgIHJlcGxhY2VXaXRoKG5ld0NvbnRlbnQ6IEpRdWVyeXxhbnlbXXxFbGVtZW50fFRleHR8c3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIHRoZSBwcm92aWRlZCBuZXcgY29udGVudCBhbmQgcmV0dXJuIHRoZSBzZXQgb2YgZWxlbWVudHMgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGNvbnRlbnQgd2l0aCB3aGljaCB0byByZXBsYWNlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICByZXBsYWNlV2l0aChmdW5jOiAoKSA9PiBFbGVtZW50fEpRdWVyeSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY29tYmluZWQgdGV4dCBjb250ZW50cyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgdGhlaXIgZGVzY2VuZGFudHMuXG4gICAgICovXG4gICAgdGV4dCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjb250ZW50IG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhlIHNwZWNpZmllZCB0ZXh0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIHNldCBhcyB0aGUgY29udGVudCBvZiBlYWNoIG1hdGNoZWQgZWxlbWVudC4gV2hlbiBOdW1iZXIgb3IgQm9vbGVhbiBpcyBzdXBwbGllZCwgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBTdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAgICovXG4gICAgdGV4dCh0ZXh0OiBzdHJpbmd8bnVtYmVyfGJvb2xlYW4pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjb250ZW50IG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhlIHNwZWNpZmllZCB0ZXh0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB0ZXh0IGNvbnRlbnQgdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCB0ZXh0IHZhbHVlIGFzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICB0ZXh0KGZ1bmM6IChpbmRleDogbnVtYmVyLCB0ZXh0OiBzdHJpbmcpID0+IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGFsbCB0aGUgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBqUXVlcnkgc2V0LCBhcyBhbiBhcnJheS5cbiAgICAgKi9cbiAgICB0b0FycmF5KCk6IGFueVtdO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBwYXJlbnRzIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHRoZSBET00sIGxlYXZpbmcgdGhlIG1hdGNoZWQgZWxlbWVudHMgaW4gdGhlaXIgcGxhY2UuXG4gICAgICovXG4gICAgdW53cmFwKCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFdyYXAgYW4gSFRNTCBzdHJ1Y3R1cmUgYXJvdW5kIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHdyYXBwaW5nRWxlbWVudCBBIHNlbGVjdG9yLCBlbGVtZW50LCBIVE1MIHN0cmluZywgb3IgalF1ZXJ5IG9iamVjdCBzcGVjaWZ5aW5nIHRoZSBzdHJ1Y3R1cmUgdG8gd3JhcCBhcm91bmQgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgd3JhcCh3cmFwcGluZ0VsZW1lbnQ6IEpRdWVyeXxFbGVtZW50fHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBXcmFwIGFuIEhUTUwgc3RydWN0dXJlIGFyb3VuZCBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmdW5jIEEgY2FsbGJhY2sgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBIVE1MIGNvbnRlbnQgb3IgalF1ZXJ5IG9iamVjdCB0byB3cmFwIGFyb3VuZCB0aGUgbWF0Y2hlZCBlbGVtZW50cy4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYXMgYW4gYXJndW1lbnQuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICB3cmFwKGZ1bmM6IChpbmRleDogbnVtYmVyKSA9PiBzdHJpbmd8SlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogV3JhcCBhbiBIVE1MIHN0cnVjdHVyZSBhcm91bmQgYWxsIGVsZW1lbnRzIGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gd3JhcHBpbmdFbGVtZW50IEEgc2VsZWN0b3IsIGVsZW1lbnQsIEhUTUwgc3RyaW5nLCBvciBqUXVlcnkgb2JqZWN0IHNwZWNpZnlpbmcgdGhlIHN0cnVjdHVyZSB0byB3cmFwIGFyb3VuZCB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICB3cmFwQWxsKHdyYXBwaW5nRWxlbWVudDogSlF1ZXJ5fEVsZW1lbnR8c3RyaW5nKTogSlF1ZXJ5O1xuICAgIHdyYXBBbGwoZnVuYzogKGluZGV4OiBudW1iZXIpID0+IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFdyYXAgYW4gSFRNTCBzdHJ1Y3R1cmUgYXJvdW5kIHRoZSBjb250ZW50IG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHdyYXBwaW5nRWxlbWVudCBBbiBIVE1MIHNuaXBwZXQsIHNlbGVjdG9yIGV4cHJlc3Npb24sIGpRdWVyeSBvYmplY3QsIG9yIERPTSBlbGVtZW50IHNwZWNpZnlpbmcgdGhlIHN0cnVjdHVyZSB0byB3cmFwIGFyb3VuZCB0aGUgY29udGVudCBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICB3cmFwSW5uZXIod3JhcHBpbmdFbGVtZW50OiBKUXVlcnl8RWxlbWVudHxzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogV3JhcCBhbiBIVE1MIHN0cnVjdHVyZSBhcm91bmQgdGhlIGNvbnRlbnQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyBhIHN0cnVjdHVyZSB0byB3cmFwIGFyb3VuZCB0aGUgY29udGVudCBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cy4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYXMgYW4gYXJndW1lbnQuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICB3cmFwSW5uZXIoZnVuYzogKGluZGV4OiBudW1iZXIpID0+IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGUgb3ZlciBhIGpRdWVyeSBvYmplY3QsIGV4ZWN1dGluZyBhIGZ1bmN0aW9uIGZvciBlYWNoIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIGVhY2goZnVuYzogKGluZGV4OiBudW1iZXIsIGVsZW06IEVsZW1lbnQpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIG9uZSBvZiB0aGUgZWxlbWVudHMgbWF0Y2hlZCBieSB0aGUgalF1ZXJ5IG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gaW5kZXggQSB6ZXJvLWJhc2VkIGludGVnZXIgaW5kaWNhdGluZyB3aGljaCBlbGVtZW50IHRvIHJldHJpZXZlLlxuICAgICAqL1xuICAgIGdldChpbmRleDogbnVtYmVyKTogSFRNTEVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIGVsZW1lbnRzIG1hdGNoZWQgYnkgdGhlIGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgZ2V0KCk6IGFueVtdO1xuXG4gICAgLyoqXG4gICAgICogU2VhcmNoIGZvciBhIGdpdmVuIGVsZW1lbnQgZnJvbSBhbW9uZyB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBpbmRleCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2VhcmNoIGZvciBhIGdpdmVuIGVsZW1lbnQgZnJvbSBhbW9uZyB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciByZXByZXNlbnRpbmcgYSBqUXVlcnkgY29sbGVjdGlvbiBpbiB3aGljaCB0byBsb29rIGZvciBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGluZGV4KHNlbGVjdG9yOiBzdHJpbmd8SlF1ZXJ5fEVsZW1lbnQpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBqUXVlcnkgb2JqZWN0LlxuICAgICAqL1xuICAgIGxlbmd0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEEgc2VsZWN0b3IgcmVwcmVzZW50aW5nIHNlbGVjdG9yIHBhc3NlZCB0byBqUXVlcnkoKSwgaWYgYW55LCB3aGVuIGNyZWF0aW5nIHRoZSBvcmlnaW5hbCBzZXQuXG4gICAgICogdmVyc2lvbiBkZXByZWNhdGVkOiAxLjcsIHJlbW92ZWQ6IDEuOVxuICAgICAqL1xuICAgIHNlbGVjdG9yOiBzdHJpbmc7XG4gICAgW2luZGV4OiBzdHJpbmddOiBhbnk7XG4gICAgW2luZGV4OiBudW1iZXJdOiBIVE1MRWxlbWVudDtcblxuICAgIC8qKlxuICAgICAqIEFkZCBlbGVtZW50cyB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIHJlcHJlc2VudGluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gZmluZCBhZGRpdGlvbmFsIGVsZW1lbnRzIHRvIGFkZCB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGNvbnRleHQgVGhlIHBvaW50IGluIHRoZSBkb2N1bWVudCBhdCB3aGljaCB0aGUgc2VsZWN0b3Igc2hvdWxkIGJlZ2luIG1hdGNoaW5nOyBzaW1pbGFyIHRvIHRoZSBjb250ZXh0IGFyZ3VtZW50IG9mIHRoZSAkKHNlbGVjdG9yLCBjb250ZXh0KSBtZXRob2QuXG4gICAgICovXG4gICAgYWRkKHNlbGVjdG9yOiBzdHJpbmcsIGNvbnRleHQ/OiBFbGVtZW50KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFkZCBlbGVtZW50cyB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnRzIE9uZSBvciBtb3JlIGVsZW1lbnRzIHRvIGFkZCB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgYWRkKC4uLmVsZW1lbnRzOiBFbGVtZW50W10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWRkIGVsZW1lbnRzIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gaHRtbCBBbiBIVE1MIGZyYWdtZW50IHRvIGFkZCB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgYWRkKGh0bWw6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGQgZWxlbWVudHMgdG8gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQW4gZXhpc3RpbmcgalF1ZXJ5IG9iamVjdCB0byBhZGQgdG8gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGFkZChvYmo6IEpRdWVyeSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY2hpbGRyZW4gb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGNoaWxkcmVuKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGNsb3Nlc3Qoc2VsZWN0b3I6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICogQHBhcmFtIGNvbnRleHQgQSBET00gZWxlbWVudCB3aXRoaW4gd2hpY2ggYSBtYXRjaGluZyBlbGVtZW50IG1heSBiZSBmb3VuZC4gSWYgbm8gY29udGV4dCBpcyBwYXNzZWQgaW4gdGhlbiB0aGUgY29udGV4dCBvZiB0aGUgalF1ZXJ5IHNldCB3aWxsIGJlIHVzZWQgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBjbG9zZXN0KHNlbGVjdG9yOiBzdHJpbmcsIGNvbnRleHQ/OiBFbGVtZW50KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IgYnkgdGVzdGluZyB0aGUgZWxlbWVudCBpdHNlbGYgYW5kIHRyYXZlcnNpbmcgdXAgdGhyb3VnaCBpdHMgYW5jZXN0b3JzIGluIHRoZSBET00gdHJlZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEEgalF1ZXJ5IG9iamVjdCB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGNsb3Nlc3Qob2JqOiBKUXVlcnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50IEFuIGVsZW1lbnQgdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBjbG9zZXN0KGVsZW1lbnQ6IEVsZW1lbnQpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgYWxsIHRoZSBlbGVtZW50cyBhbmQgc2VsZWN0b3JzIG1hdGNoZWQgYWdhaW5zdCB0aGUgY3VycmVudCBlbGVtZW50IHVwIHRocm91Z2ggdGhlIERPTSB0cmVlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvcnMgQW4gYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QgKGNhbiBhbHNvIGJlIGEgalF1ZXJ5IG9iamVjdCkuXG4gICAgICogQHBhcmFtIGNvbnRleHQgQSBET00gZWxlbWVudCB3aXRoaW4gd2hpY2ggYSBtYXRjaGluZyBlbGVtZW50IG1heSBiZSBmb3VuZC4gSWYgbm8gY29udGV4dCBpcyBwYXNzZWQgaW4gdGhlbiB0aGUgY29udGV4dCBvZiB0aGUgalF1ZXJ5IHNldCB3aWxsIGJlIHVzZWQgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBjbG9zZXN0KHNlbGVjdG9yczogYW55LCBjb250ZXh0PzogRWxlbWVudCk6IGFueVtdO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjaGlsZHJlbiBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgdGV4dCBhbmQgY29tbWVudCBub2Rlcy5cbiAgICAgKi9cbiAgICBjb250ZW50cygpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBFbmQgdGhlIG1vc3QgcmVjZW50IGZpbHRlcmluZyBvcGVyYXRpb24gaW4gdGhlIGN1cnJlbnQgY2hhaW4gYW5kIHJldHVybiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gaXRzIHByZXZpb3VzIHN0YXRlLlxuICAgICAqL1xuICAgIGVuZCgpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRoZSBvbmUgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gaW5kZXggQW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSAwLWJhc2VkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LiBPUiBBbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCBjb3VudGluZyBiYWNrd2FyZHMgZnJvbSB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICogIFxuICAgICAqL1xuICAgIGVxKGluZGV4OiBudW1iZXIpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRob3NlIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yIG9yIHBhc3MgdGhlIGZ1bmN0aW9uJ3MgdGVzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIGN1cnJlbnQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgZmlsdGVyKHNlbGVjdG9yOiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVkdWNlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aG9zZSB0aGF0IG1hdGNoIHRoZSBzZWxlY3RvciBvciBwYXNzIHRoZSBmdW5jdGlvbidzIHRlc3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB1c2VkIGFzIGEgdGVzdCBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQuIHRoaXMgaXMgdGhlIGN1cnJlbnQgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgZmlsdGVyKGZ1bmM6IChpbmRleDogbnVtYmVyLCBlbGVtZW50OiBFbGVtZW50KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVkdWNlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aG9zZSB0aGF0IG1hdGNoIHRoZSBzZWxlY3RvciBvciBwYXNzIHRoZSBmdW5jdGlvbidzIHRlc3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQW4gZWxlbWVudCB0byBtYXRjaCB0aGUgY3VycmVudCBzZXQgb2YgZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBmaWx0ZXIoZWxlbWVudDogRWxlbWVudCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRob3NlIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yIG9yIHBhc3MgdGhlIGZ1bmN0aW9uJ3MgdGVzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEFuIGV4aXN0aW5nIGpRdWVyeSBvYmplY3QgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgZmlsdGVyKG9iajogSlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXNjZW5kYW50cyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IsIGpRdWVyeSBvYmplY3QsIG9yIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgZmluZChzZWxlY3Rvcjogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGVzY2VuZGFudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLCBqUXVlcnkgb2JqZWN0LCBvciBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50IEFuIGVsZW1lbnQgdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBmaW5kKGVsZW1lbnQ6IEVsZW1lbnQpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXNjZW5kYW50cyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IsIGpRdWVyeSBvYmplY3QsIG9yIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBBIGpRdWVyeSBvYmplY3QgdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBmaW5kKG9iajogSlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgZmlyc3QgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBmaXJzdCgpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRob3NlIHRoYXQgaGF2ZSBhIGRlc2NlbmRhbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBvciBET00gZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBoYXMoc2VsZWN0b3I6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRob3NlIHRoYXQgaGF2ZSBhIGRlc2NlbmRhbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBvciBET00gZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY29udGFpbmVkIEEgRE9NIGVsZW1lbnQgdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBoYXMoY29udGFpbmVkOiBFbGVtZW50KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIGN1cnJlbnQgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHMgYWdhaW5zdCBhIHNlbGVjdG9yLCBlbGVtZW50LCBvciBqUXVlcnkgb2JqZWN0IGFuZCByZXR1cm4gdHJ1ZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlc2UgZWxlbWVudHMgbWF0Y2hlcyB0aGUgZ2l2ZW4gYXJndW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGlzKHNlbGVjdG9yOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSBjdXJyZW50IG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QgYSBzZWxlY3RvciwgZWxlbWVudCwgb3IgalF1ZXJ5IG9iamVjdCBhbmQgcmV0dXJuIHRydWUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZXNlIGVsZW1lbnRzIG1hdGNoZXMgdGhlIGdpdmVuIGFyZ3VtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHVzZWQgYXMgYSB0ZXN0IGZvciB0aGUgc2V0IG9mIGVsZW1lbnRzLiBJdCBhY2NlcHRzIG9uZSBhcmd1bWVudCwgaW5kZXgsIHdoaWNoIGlzIHRoZSBlbGVtZW50J3MgaW5kZXggaW4gdGhlIGpRdWVyeSBjb2xsZWN0aW9uLldpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGlzKGZ1bmM6IChpbmRleDogbnVtYmVyLCBlbGVtZW50OiBFbGVtZW50KSA9PiBib29sZWFuKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY3VycmVudCBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyBhZ2FpbnN0IGEgc2VsZWN0b3IsIGVsZW1lbnQsIG9yIGpRdWVyeSBvYmplY3QgYW5kIHJldHVybiB0cnVlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGVzZSBlbGVtZW50cyBtYXRjaGVzIHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBBbiBleGlzdGluZyBqUXVlcnkgb2JqZWN0IHRvIG1hdGNoIHRoZSBjdXJyZW50IHNldCBvZiBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGlzKG9iajogSlF1ZXJ5KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY3VycmVudCBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyBhZ2FpbnN0IGEgc2VsZWN0b3IsIGVsZW1lbnQsIG9yIGpRdWVyeSBvYmplY3QgYW5kIHJldHVybiB0cnVlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGVzZSBlbGVtZW50cyBtYXRjaGVzIHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnRzIE9uZSBvciBtb3JlIGVsZW1lbnRzIHRvIG1hdGNoIHRoZSBjdXJyZW50IHNldCBvZiBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGlzKGVsZW1lbnRzOiBhbnkpOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgZmluYWwgb25lIGluIHRoZSBzZXQuXG4gICAgICovXG4gICAgbGFzdCgpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBQYXNzIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBtYXRjaGVkIHNldCB0aHJvdWdoIGEgZnVuY3Rpb24sIHByb2R1Y2luZyBhIG5ldyBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJldHVybiB2YWx1ZXMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEEgZnVuY3Rpb24gb2JqZWN0IHRoYXQgd2lsbCBiZSBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0LlxuICAgICAqL1xuICAgIG1hcChjYWxsYmFjazogKGluZGV4OiBudW1iZXIsIGRvbUVsZW1lbnQ6IEVsZW1lbnQpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaW1tZWRpYXRlbHkgZm9sbG93aW5nIHNpYmxpbmcgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy4gSWYgYSBzZWxlY3RvciBpcyBwcm92aWRlZCwgaXQgcmV0cmlldmVzIHRoZSBuZXh0IHNpYmxpbmcgb25seSBpZiBpdCBtYXRjaGVzIHRoYXQgc2VsZWN0b3IuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgbmV4dChzZWxlY3Rvcj86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZm9sbG93aW5nIHNpYmxpbmdzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBuZXh0QWxsKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBmb2xsb3dpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIHNlbGVjdG9yLCBET00gbm9kZSwgb3IgalF1ZXJ5IG9iamVjdCBwYXNzZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIGluZGljYXRlIHdoZXJlIHRvIHN0b3AgbWF0Y2hpbmcgZm9sbG93aW5nIHNpYmxpbmcgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGZpbHRlciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIG5leHRVbnRpbChzZWxlY3Rvcj86IHN0cmluZywgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZm9sbG93aW5nIHNpYmxpbmdzIG9mIGVhY2ggZWxlbWVudCB1cCB0byBidXQgbm90IGluY2x1ZGluZyB0aGUgZWxlbWVudCBtYXRjaGVkIGJ5IHRoZSBzZWxlY3RvciwgRE9NIG5vZGUsIG9yIGpRdWVyeSBvYmplY3QgcGFzc2VkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIG5vZGUgb3IgalF1ZXJ5IG9iamVjdCBpbmRpY2F0aW5nIHdoZXJlIHRvIHN0b3AgbWF0Y2hpbmcgZm9sbG93aW5nIHNpYmxpbmcgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGZpbHRlciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIG5leHRVbnRpbChlbGVtZW50PzogRWxlbWVudCwgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZm9sbG93aW5nIHNpYmxpbmdzIG9mIGVhY2ggZWxlbWVudCB1cCB0byBidXQgbm90IGluY2x1ZGluZyB0aGUgZWxlbWVudCBtYXRjaGVkIGJ5IHRoZSBzZWxlY3RvciwgRE9NIG5vZGUsIG9yIGpRdWVyeSBvYmplY3QgcGFzc2VkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQSBET00gbm9kZSBvciBqUXVlcnkgb2JqZWN0IGluZGljYXRpbmcgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBmb2xsb3dpbmcgc2libGluZyBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgbmV4dFVudGlsKG9iaj86IEpRdWVyeSwgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIG5vdChzZWxlY3Rvcjogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHVzZWQgYXMgYSB0ZXN0IGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC4gdGhpcyBpcyB0aGUgY3VycmVudCBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBub3QoZnVuYzogKGluZGV4OiBudW1iZXIsIGVsZW1lbnQ6IEVsZW1lbnQpID0+IGJvb2xlYW4pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50cyBPbmUgb3IgbW9yZSBET00gZWxlbWVudHMgdG8gcmVtb3ZlIGZyb20gdGhlIG1hdGNoZWQgc2V0LlxuICAgICAqL1xuICAgIG5vdCguLi5lbGVtZW50czogRWxlbWVudFtdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEFuIGV4aXN0aW5nIGpRdWVyeSBvYmplY3QgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgbm90KG9iajogSlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVsZW1lbnQgdGhhdCBpcyBwb3NpdGlvbmVkLlxuICAgICAqL1xuICAgIG9mZnNldFBhcmVudCgpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHBhcmVudCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwYXJlbnQoc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFuY2VzdG9ycyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwYXJlbnRzKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmNlc3RvcnMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCB1cCB0byBidXQgbm90IGluY2x1ZGluZyB0aGUgZWxlbWVudCBtYXRjaGVkIGJ5IHRoZSBzZWxlY3RvciwgRE9NIG5vZGUsIG9yIGpRdWVyeSBvYmplY3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIGluZGljYXRlIHdoZXJlIHRvIHN0b3AgbWF0Y2hpbmcgYW5jZXN0b3IgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGZpbHRlciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIHBhcmVudHNVbnRpbChzZWxlY3Rvcj86IHN0cmluZywgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYW5jZXN0b3JzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIG5vZGUgb3IgalF1ZXJ5IG9iamVjdCBpbmRpY2F0aW5nIHdoZXJlIHRvIHN0b3AgbWF0Y2hpbmcgYW5jZXN0b3IgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGZpbHRlciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIHBhcmVudHNVbnRpbChlbGVtZW50PzogRWxlbWVudCwgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYW5jZXN0b3JzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQSBET00gbm9kZSBvciBqUXVlcnkgb2JqZWN0IGluZGljYXRpbmcgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBhbmNlc3RvciBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgcGFyZW50c1VudGlsKG9iaj86IEpRdWVyeSwgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpbW1lZGlhdGVseSBwcmVjZWRpbmcgc2libGluZyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBvcHRpb25hbGx5IGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgcHJldihzZWxlY3Rvcj86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgcHJlY2VkaW5nIHNpYmxpbmdzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwcmV2QWxsKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBwcmVjZWRpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIHNlbGVjdG9yLCBET00gbm9kZSwgb3IgalF1ZXJ5IG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBwcmVjZWRpbmcgc2libGluZyBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgcHJldlVudGlsKHNlbGVjdG9yPzogc3RyaW5nLCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBwcmVjZWRpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIHNlbGVjdG9yLCBET00gbm9kZSwgb3IgalF1ZXJ5IG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBub2RlIG9yIGpRdWVyeSBvYmplY3QgaW5kaWNhdGluZyB3aGVyZSB0byBzdG9wIG1hdGNoaW5nIHByZWNlZGluZyBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSBmaWx0ZXIgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwcmV2VW50aWwoZWxlbWVudD86IEVsZW1lbnQsIGZpbHRlcj86IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHByZWNlZGluZyBzaWJsaW5ncyBvZiBlYWNoIGVsZW1lbnQgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQSBET00gbm9kZSBvciBqUXVlcnkgb2JqZWN0IGluZGljYXRpbmcgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBwcmVjZWRpbmcgc2libGluZyBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgcHJldlVudGlsKG9iaj86IEpRdWVyeSwgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzaWJsaW5ncyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBvcHRpb25hbGx5IGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgc2libGluZ3Moc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIGEgc3Vic2V0IHNwZWNpZmllZCBieSBhIHJhbmdlIG9mIGluZGljZXMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHN0YXJ0IEFuIGludGVnZXIgaW5kaWNhdGluZyB0aGUgMC1iYXNlZCBwb3NpdGlvbiBhdCB3aGljaCB0aGUgZWxlbWVudHMgYmVnaW4gdG8gYmUgc2VsZWN0ZWQuIElmIG5lZ2F0aXZlLCBpdCBpbmRpY2F0ZXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiB0aGUgc2V0LlxuICAgICAqIEBwYXJhbSBlbmQgQW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSAwLWJhc2VkIHBvc2l0aW9uIGF0IHdoaWNoIHRoZSBlbGVtZW50cyBzdG9wIGJlaW5nIHNlbGVjdGVkLiBJZiBuZWdhdGl2ZSwgaXQgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIHNldC4gSWYgb21pdHRlZCwgdGhlIHJhbmdlIGNvbnRpbnVlcyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzZXQuXG4gICAgICovXG4gICAgc2xpY2Uoc3RhcnQ6IG51bWJlciwgZW5kPzogbnVtYmVyKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgcXVldWUgb2YgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBxdWV1ZU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcXVldWUuIERlZmF1bHRzIHRvIGZ4LCB0aGUgc3RhbmRhcmQgZWZmZWN0cyBxdWV1ZS5cbiAgICAgKi9cbiAgICBxdWV1ZShxdWV1ZU5hbWU/OiBzdHJpbmcpOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBNYW5pcHVsYXRlIHRoZSBxdWV1ZSBvZiBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQsIG9uY2UgZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBuZXdRdWV1ZSBBbiBhcnJheSBvZiBmdW5jdGlvbnMgdG8gcmVwbGFjZSB0aGUgY3VycmVudCBxdWV1ZSBjb250ZW50cy5cbiAgICAgKi9cbiAgICBxdWV1ZShuZXdRdWV1ZTogRnVuY3Rpb25bXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBNYW5pcHVsYXRlIHRoZSBxdWV1ZSBvZiBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQsIG9uY2UgZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgbmV3IGZ1bmN0aW9uIHRvIGFkZCB0byB0aGUgcXVldWUsIHdpdGggYSBmdW5jdGlvbiB0byBjYWxsIHRoYXQgd2lsbCBkZXF1ZXVlIHRoZSBuZXh0IGl0ZW0uXG4gICAgICovXG4gICAgcXVldWUoY2FsbGJhY2s6IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIE1hbmlwdWxhdGUgdGhlIHF1ZXVlIG9mIGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCwgb25jZSBmb3IgZWFjaCBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBuZXdRdWV1ZSBBbiBhcnJheSBvZiBmdW5jdGlvbnMgdG8gcmVwbGFjZSB0aGUgY3VycmVudCBxdWV1ZSBjb250ZW50cy5cbiAgICAgKi9cbiAgICBxdWV1ZShxdWV1ZU5hbWU6IHN0cmluZywgbmV3UXVldWU6IEZ1bmN0aW9uW10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogTWFuaXB1bGF0ZSB0aGUgcXVldWUgb2YgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkLCBvbmNlIGZvciBlYWNoIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBuZXcgZnVuY3Rpb24gdG8gYWRkIHRvIHRoZSBxdWV1ZSwgd2l0aCBhIGZ1bmN0aW9uIHRvIGNhbGwgdGhhdCB3aWxsIGRlcXVldWUgdGhlIG5leHQgaXRlbS5cbiAgICAgKi9cbiAgICBxdWV1ZShxdWV1ZU5hbWU6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogSlF1ZXJ5O1xufVxuZGVjbGFyZSBtb2R1bGUgXCJqcXVlcnlcIiB7XG4gICAgZXhwb3J0ID0gJDtcbn1cbmRlY2xhcmUgdmFyIGpRdWVyeTogSlF1ZXJ5U3RhdGljO1xuZGVjbGFyZSB2YXIgJDogSlF1ZXJ5U3RhdGljO1xuIl19
//# sourceURL=/home/stefano/.atom/packages/atom-typescript/lib/typings/jquery/jquery.d.ts
