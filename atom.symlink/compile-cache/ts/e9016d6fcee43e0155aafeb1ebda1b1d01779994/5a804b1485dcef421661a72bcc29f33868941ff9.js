exports.errorsInOpenFiles = { members: [] };
exports.buildOutput = { members: [] };
exports.referencesOutput = { members: [] };
/** This *must* always be set */
exports.activeList = exports.errorsInOpenFiles;
function gotoLine(filePath, line, col, list) {
    var activeFile, activeEditor = atom.workspace.getActiveTextEditor();
    if (activeEditor !== undefined && activeEditor !== null) {
        activeFile = activeEditor.getPath();
    }
    if (filePath !== activeFile) {
        atom.workspace.open(filePath, {
            initialLine: line - 1,
            initialColumn: col
        });
    }
    else {
        atom.workspace.getActiveTextEditor().cursors[0].setBufferPosition([line - 1, col]);
    }
    list.lastPosition = { filePath: filePath, line: line, col: col };
}
exports.gotoLine = gotoLine;
/**
 * Uses `activeList` to go to the next error or loop back
 * Storing `lastPosition` with the list allows us to be lazy elsewhere and actively find the element here
 */
function findCurrentIndexInList() {
    // Early exit if no members
    if (!exports.activeList.members.length) {
        atom.notifications.addInfo('AtomTS: no go-to members in active list');
        return -1;
    }
    // If we don't have a lastPosition then first is the last position
    if (!exports.activeList.lastPosition)
        return 0;
    var lastPosition = exports.activeList.lastPosition;
    var index = indexOf(exports.activeList.members, function (item) { return item.filePath == lastPosition.filePath && item.line == lastPosition.line; });
    // if the item has since been removed go to 0
    if (index == -1) {
        return 0;
    }
    return index;
}
/** Uses `activeList` to go to the next position or loop back */
function gotoNext() {
    var currentIndex = findCurrentIndexInList();
    if (currentIndex == -1)
        return;
    var nextIndex = currentIndex + 1;
    // If next is == length then loop to zero
    if (nextIndex == exports.activeList.members.length) {
        nextIndex = 0;
    }
    var next = exports.activeList.members[nextIndex];
    gotoLine(next.filePath, next.line, next.col, exports.activeList);
}
exports.gotoNext = gotoNext;
function gotoPrevious() {
    var currentIndex = findCurrentIndexInList();
    if (currentIndex == -1)
        return;
    var previousIndex = currentIndex - 1;
    // If next is == -1 then loop to length
    if (previousIndex == -1) {
        previousIndex = exports.activeList.members.length - 1;
    }
    var previous = exports.activeList.members[previousIndex];
    gotoLine(previous.filePath, previous.line, previous.col, exports.activeList);
}
exports.gotoPrevious = gotoPrevious;
/**
 * Utility Return index of element in an array
 */
function indexOf(items, filter) {
    for (var i = 0; i < items.length; i++) {
        if (filter(items[i])) {
            return i;
        }
    }
    return -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvc3RlZmFuby8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS9nb3RvSGlzdG9yeS50cyIsInNvdXJjZXMiOlsiL2hvbWUvc3RlZmFuby8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS9nb3RvSGlzdG9yeS50cyJdLCJuYW1lcyI6WyJnb3RvTGluZSIsImZpbmRDdXJyZW50SW5kZXhJbkxpc3QiLCJnb3RvTmV4dCIsImdvdG9QcmV2aW91cyIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUNXLHlCQUFpQixHQUF5QixFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUMxRCxtQkFBVyxHQUF5QixFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUNwRCx3QkFBZ0IsR0FBeUIsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFHcEUsQUFEQSxnQ0FBZ0M7QUFDckIsa0JBQVUsR0FBeUIseUJBQWlCLENBQUM7QUFFaEUsU0FBZ0IsUUFBUSxDQUFDLFFBQWdCLEVBQUUsSUFBWSxFQUFFLEdBQVcsRUFBRSxJQUEwQjtJQUM1RkEsSUFBSUEsVUFBVUEsRUFDVkEsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxDQUFDQTtJQUN4REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsS0FBS0EsU0FBU0EsSUFBSUEsWUFBWUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdERBLFVBQVVBLEdBQUdBLFlBQVlBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO0lBQ3hDQSxDQUFDQTtJQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxLQUFLQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMxQkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUE7WUFDMUJBLFdBQVdBLEVBQUVBLElBQUlBLEdB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YWJXaXRoR290b1Bvc2l0aW9ucyA9IHsgbWVtYmVyczogW10gfTtcbmV4cG9ydCB2YXIgYnVpbGRPdXRwdXQ6IFRhYldpdGhHb3RvUG9zaXRpb25zID0geyBtZW1iZXJzOiBbXSB9O1xuZXhwb3J0IHZhciByZWZlcmVuY2VzT3V0cHV0OiBUYWJXaXRoR290b1Bvc2l0aW9ucyA9IHsgbWVtYmVyczogW10gfTtcblxuLyoqIFRoaXMgKm11c3QqIGFsd2F5cyBiZSBzZXQgKi9cbmV4cG9ydCB2YXIgYWN0aXZlTGlzdDogVGFiV2l0aEdvdG9Qb3NpdGlvbnMgPSBlcnJvcnNJbk9wZW5GaWxlcztcblxuZXhwb3J0IGZ1bmN0aW9uIGdvdG9MaW5lKGZpbGVQYXRoOiBzdHJpbmcsIGxpbmU6IG51bWJlciwgY29sOiBudW1iZXIsIGxpc3Q6IFRhYldpdGhHb3RvUG9zaXRpb25zKSB7XG4gICAgdmFyIGFjdGl2ZUZpbGUsXG4gICAgICAgIGFjdGl2ZUVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcbiAgICBpZiAoYWN0aXZlRWRpdG9yICE9PSB1bmRlZmluZWQgJiYgYWN0aXZlRWRpdG9yICE9PSBudWxsKSB7XG4gICAgICAgIGFjdGl2ZUZpbGUgPSBhY3RpdmVFZGl0b3IuZ2V0UGF0aCgpO1xuICAgIH1cblxuICAgIGlmIChmaWxlUGF0aCAhPT0gYWN0aXZlRmlsZSkge1xuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVQYXRoLCB7XG4gICAgICAgICAgICBpbml0aWFsTGluZTogbGluZSAtIDEsXG4gICAgICAgICAgICBpbml0aWFsQ29sdW1uOiBjb2xcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpLmN1cnNvcnNbMF0uc2V0QnVmZmVyUG9zaXRpb24oW2xpbmUgLSAxLCBjb2xdKTtcbiAgICB9XG5cbiAgICBsaXN0Lmxhc3RQb3NpdGlvbiA9IHsgZmlsZVBhdGgsIGxpbmUsIGNvbCB9O1xufVxuXG4vKipcbiAqIFVzZXMgYGFjdGl2ZUxpc3RgIHRvIGdvIHRvIHRoZSBuZXh0IGVycm9yIG9yIGxvb3AgYmFja1xuICogU3RvcmluZyBgbGFzdFBvc2l0aW9uYCB3aXRoIHRoZSBsaXN0IGFsbG93cyB1cyB0byBiZSBsYXp5IGVsc2V3aGVyZSBhbmQgYWN0aXZlbHkgZmluZCB0aGUgZWxlbWVudCBoZXJlXG4gKi9cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SW5kZXhJbkxpc3QoKTogbnVtYmVyIHtcbiAgICAvLyBFYXJseSBleGl0IGlmIG5vIG1lbWJlcnNcbiAgICBpZiAoIWFjdGl2ZUxpc3QubWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEluZm8oJ0F0b21UUzogbm8gZ28tdG8gbWVtYmVycyBpbiBhY3RpdmUgbGlzdCcpO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBsYXN0UG9zaXRpb24gdGhlbiBmaXJzdCBpcyB0aGUgbGFzdCBwb3NpdGlvblxuICAgIGlmICghYWN0aXZlTGlzdC5sYXN0UG9zaXRpb24pXG4gICAgICAgIHJldHVybiAwO1xuXG4gICAgdmFyIGxhc3RQb3NpdGlvbiA9IGFjdGl2ZUxpc3QubGFzdFBvc2l0aW9uO1xuICAgIHZhciBpbmRleCA9IGluZGV4T2YoYWN0aXZlTGlzdC5tZW1iZXJzLCAoaXRlbSkgPT4gaXRlbS5maWxlUGF0aCA9PSBsYXN0UG9zaXRpb24uZmlsZVBhdGggJiYgaXRlbS5saW5lID09IGxhc3RQb3NpdGlvbi5saW5lKTtcblxuICAgIC8vIGlmIHRoZSBpdGVtIGhhcyBzaW5jZSBiZWVuIHJlbW92ZWQgZ28gdG8gMFxuICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuXG4vKiogVXNlcyBgYWN0aXZlTGlzdGAgdG8gZ28gdG8gdGhlIG5leHQgcG9zaXRpb24gb3IgbG9vcCBiYWNrICovXG5leHBvcnQgZnVuY3Rpb24gZ290b05leHQoKSB7XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IGZpbmRDdXJyZW50SW5kZXhJbkxpc3QoKTtcbiAgICBpZiAoY3VycmVudEluZGV4ID09IC0xKSByZXR1cm47XG5cbiAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcbiAgICAvLyBJZiBuZXh0IGlzID09IGxlbmd0aCB0aGVuIGxvb3AgdG8gemVyb1xuICAgIGlmIChuZXh0SW5kZXggPT0gYWN0aXZlTGlzdC5tZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICBuZXh0SW5kZXggPSAwO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gYWN0aXZlTGlzdC5tZW1iZXJzW25leHRJbmRleF07XG4gICAgZ290b0xpbmUobmV4dC5maWxlUGF0aCwgbmV4dC5saW5lLCBuZXh0LmNvbCwgYWN0aXZlTGlzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnb3RvUHJldmlvdXMoKSB7XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IGZpbmRDdXJyZW50SW5kZXhJbkxpc3QoKTtcbiAgICBpZiAoY3VycmVudEluZGV4ID09IC0xKSByZXR1cm47XG5cbiAgICB2YXIgcHJldmlvdXNJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgLy8gSWYgbmV4dCBpcyA9PSAtMSB0aGVuIGxvb3AgdG8gbGVuZ3RoXG4gICAgaWYgKHByZXZpb3VzSW5kZXggPT0gLTEpIHtcbiAgICAgICAgcHJldmlvdXNJbmRleCA9IGFjdGl2ZUxpc3QubWVtYmVycy5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91cyA9IGFjdGl2ZUxpc3QubWVtYmVyc1twcmV2aW91c0luZGV4XTtcbiAgICBnb3RvTGluZShwcmV2aW91cy5maWxlUGF0aCwgcHJldmlvdXMubGluZSwgcHJldmlvdXMuY29sLCBhY3RpdmVMaXN0KTtcbn1cblxuXG4vKipcbiAqIFV0aWxpdHkgUmV0dXJuIGluZGV4IG9mIGVsZW1lbnQgaW4gYW4gYXJyYXlcbiAqL1xuZnVuY3Rpb24gaW5kZXhPZjxUPihpdGVtczogVFtdLCBmaWx0ZXI6IChpdGVtOiBUKSA9PiBib29sZWFuKTogbnVtYmVyIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmaWx0ZXIoaXRlbXNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG4iXX0=
//# sourceURL=/home/stefano/.atom/packages/atom-typescript/lib/main/atom/gotoHistory.ts
