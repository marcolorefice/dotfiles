/// Not useful for user input validation
// But great for simple config validation 
// works only by "n" valid options
exports.types = {
    string: 'string',
    boolean: 'boolean',
    number: 'number'
};
var SimpleValidator = (function () {
    function SimpleValidator(validationInfo) {
        var _this = this;
        this.validationInfo = validationInfo;
        this.potentialLowerCaseMatch = {};
        Object.keys(validationInfo).forEach(function (k) { return _this.potentialLowerCaseMatch[k.toLowerCase()] = k; });
    }
    SimpleValidator.prototype.validate = function (config) {
        var _this = this;
        var keys = Object.keys(config);
        var errors = { invalidValues: [], extraKeys: [], errorMessage: '' };
        keys.forEach(function (k) {
            // Check extra keys
            if (!_this.validationInfo[k]) {
                if (_this.potentialLowerCaseMatch[k]) {
                    errors.extraKeys.push("Key: '" + k + "' is a potential lower case match for '" + _this.potentialLowerCaseMatch[k] + "'. Fix the casing.");
                }
                else {
                    errors.extraKeys.push("Unknown Option: " + k);
                }
            }
            else {
                var validationInfo = _this.validationInfo[k];
                var value = config[k];
                if (validationInfo.validValues && validationInfo.validValues.length) {
                    var validValues = validationInfo.validValues;
                    if (!validValues.some(function (valid) { return valid.toLowerCase() === value.toLowerCase(); })) {
                        errors.invalidValues.push("Key: '" + k + "' has an invalid value: " + value);
                    }
                }
                if (validationInfo.type && typeof value !== validationInfo.type) {
                    errors.invalidValues.push("Key: '" + k + "' has an invalid type: " + typeof value);
                }
            }
        });
        var total = errors.invalidValues.concat(errors.extraKeys);
        if (total.length) {
            errors.errorMessage = total.join("\n");
        }
        return errors;
    };
    return SimpleValidator;
})();
exports.SimpleValidator = SimpleValidator;
function createMap(arr) {
    return arr.reduce(function (result, key) {
        result[key] = true;
        return result;
    }, {});
}
exports.createMap = createMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvc3RlZmFuby8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vdHNjb25maWcvc2ltcGxlVmFsaWRhdG9yLnRzIiwic291cmNlcyI6WyIvaG9tZS9zdGVmYW5vLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9saWIvbWFpbi90c2NvbmZpZy9zaW1wbGVWYWxpZGF0b3IudHMiXSwibmFtZXMiOlsiU2ltcGxlVmFsaWRhdG9yIiwiU2ltcGxlVmFsaWRhdG9yLmNvbnN0cnVjdG9yIiwiU2ltcGxlVmFsaWRhdG9yLnZhbGlkYXRlIiwiY3JlYXRlTWFwIl0sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFDeEMsMENBQTBDO0FBQzFDLGtDQUFrQztBQUV2QixhQUFLLEdBQUc7SUFDZixNQUFNLEVBQUUsUUFBUTtJQUNoQixPQUFPLEVBQUUsU0FBUztJQUNsQixNQUFNLEVBQUUsUUFBUTtDQUNuQixDQUFBO0FBZUQsSUFBYSxlQUFlO0lBR3hCQSxTQUhTQSxlQUFlQSxDQUdMQSxjQUE4QkE7UUFIckRDLGlCQTRDQ0E7UUF6Q3NCQSxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBZ0JBO1FBQzdDQSxJQUFJQSxDQUFDQSx1QkFBdUJBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2xDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxDQUFDQSxJQUFHQSxPQUFBQSxLQUFJQSxDQUFDQSx1QkFBdUJBLENBQUNBLENBQUNBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQWpEQSxDQUFpREEsQ0FBQ0EsQ0FBQ0E7SUFDL0ZBLENBQUNBO0lBRURELGtDQUFRQSxHQUFSQSxVQUFTQSxNQUFXQTtRQUFwQkUsaUJBbUNDQTtRQWxDR0EsSUFBSUEsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLE1BQU1BLEdBQUdBLEVBQUVBLGFBQWFBLEVBQUVBLEVBQUVBLEVBQUVBLFNBQVNBLEVBQUVBLEVBQUVBLEVBQUVBLFlBQVlBLEVBQUVBLEVBQUVBLEVBQUVBLENBQUNBO1FBQ3BFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxDQUFDQTtZQUVWQSxBQURBQSxtQkFBbUJBO1lBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDMUJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUlBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2xDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFTQSxDQUFDQSwrQ0FBMENBLEtBQUlBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsdUJBQW9CQSxDQUFDQSxDQUFDQTtnQkFDbklBLENBQUNBO2dCQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDRkEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EscUJBQW1CQSxDQUFHQSxDQUFDQSxDQUFBQTtnQkFDakRBLENBQUNBO1lBQ0xBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLENBQUNBO2dCQUNGQSxJQUFJQSxjQUFjQSxHQUFHQSxLQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDNUNBLElBQUlBLEtBQUtBLEdBQVFBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsV0FBV0EsSUFBSUEsY0FBY0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2xFQSxJQUFJQSxXQUFXQSxHQUFHQSxjQUFjQSxDQUFDQSxXQUFXQSxDQUFDQTtvQkFDN0NBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLEtBQUtBLElBQUlBLE9BQUFBLEtBQUtBLENBQUNBLFdBQVdBLEVBQUVBLEtBQUtBLEtBQUtBLENBQUNBLFdBQVdBLEVBQUVBLEVBQTNDQSxDQUEyQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQzFFQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFTQSxDQUFDQSxnQ0FBMkJBLEtBQU9BLENBQUNBLENBQUNBO29CQUM1RUEsQ0FBQ0E7Z0JBQ0xBLENBQUNBO2dCQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxjQUFjQSxDQUFDQSxJQUFJQSxJQUFJQSxPQUFPQSxLQUFLQSxLQUFLQSxjQUFjQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDOURBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLFdBQVNBLENBQUNBLCtCQUEwQkEsT0FBT0EsS0FBT0EsQ0FBQ0EsQ0FBQUE7Z0JBQ2pGQSxDQUFDQTtZQUNMQSxDQUFDQTtRQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxJQUFJQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUMxREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDZkEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDM0NBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUNMRixzQkFBQ0E7QUFBREEsQ0FBQ0EsQUE1Q0QsSUE0Q0M7QUE1Q1ksdUJBQWUsR0FBZixlQTRDWixDQUFBO0FBR0QsU0FBZ0IsU0FBUyxDQUFDLEdBQWE7SUFDbkNHLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLFVBQUNBLE1BQWtDQSxFQUFFQSxHQUFXQTtRQUM5REEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDbkJBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2xCQSxDQUFDQSxFQUE4QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7QUFDdkNBLENBQUNBO0FBTGUsaUJBQVMsR0FBVCxTQUtmLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gTm90IHVzZWZ1bCBmb3IgdXNlciBpbnB1dCB2YWxpZGF0aW9uXG4vLyBCdXQgZ3JlYXQgZm9yIHNpbXBsZSBjb25maWcgdmFsaWRhdGlvbiBcbi8vIHdvcmtzIG9ubHkgYnkgXCJuXCIgdmFsaWQgb3B0aW9uc1xuXG5leHBvcnQgdmFyIHR5cGVzID0ge1xuICAgIHN0cmluZzogJ3N0cmluZycsXG4gICAgYm9vbGVhbjogJ2Jvb2xlYW4nLFxuICAgIG51bWJlcjogJ251bWJlcidcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uSW5mbyB7XG4gICAgW25hbWU6IHN0cmluZ106IHtcbiAgICAgICAgdmFsaWRWYWx1ZXM/OiBzdHJpbmdbXTtcbiAgICAgICAgdHlwZT86IHN0cmluZztcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JzIHtcbiAgICBpbnZhbGlkVmFsdWVzOiBzdHJpbmdbXTtcbiAgICBleHRyYUtleXM6IHN0cmluZ1tdO1xuICAgIGVycm9yTWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgU2ltcGxlVmFsaWRhdG9yIHtcblxuICAgIHByaXZhdGUgcG90ZW50aWFsTG93ZXJDYXNlTWF0Y2g6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgY29uc3RydWN0b3IocHVibGljIHZhbGlkYXRpb25JbmZvOiBWYWxpZGF0aW9uSW5mbykge1xuICAgICAgICB0aGlzLnBvdGVudGlhbExvd2VyQ2FzZU1hdGNoID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHZhbGlkYXRpb25JbmZvKS5mb3JFYWNoKGs9PiB0aGlzLnBvdGVudGlhbExvd2VyQ2FzZU1hdGNoW2sudG9Mb3dlckNhc2UoKV0gPSBrKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZShjb25maWc6IGFueSk6IEVycm9ycyB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoY29uZmlnKTtcbiAgICAgICAgdmFyIGVycm9ycyA9IHsgaW52YWxpZFZhbHVlczogW10sIGV4dHJhS2V5czogW10sIGVycm9yTWVzc2FnZTogJycgfTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGs9PiB7XG4gICAgICAgICAgICAvLyBDaGVjayBleHRyYSBrZXlzXG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsaWRhdGlvbkluZm9ba10pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb3RlbnRpYWxMb3dlckNhc2VNYXRjaFtrXSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMuZXh0cmFLZXlzLnB1c2goYEtleTogJyR7a30nIGlzIGEgcG90ZW50aWFsIGxvd2VyIGNhc2UgbWF0Y2ggZm9yICcke3RoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2hba119Jy4gRml4IHRoZSBjYXNpbmcuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMuZXh0cmFLZXlzLnB1c2goYFVua25vd24gT3B0aW9uOiAke2t9YClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgICBcbiAgICAgICAgICAgIC8vIERvIHZhbGlkYXRpb25cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2YWxpZGF0aW9uSW5mbyA9IHRoaXMudmFsaWRhdGlvbkluZm9ba107XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlOiBhbnkgPSBjb25maWdba107XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25JbmZvLnZhbGlkVmFsdWVzICYmIHZhbGlkYXRpb25JbmZvLnZhbGlkVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRWYWx1ZXMgPSB2YWxpZGF0aW9uSW5mby52YWxpZFZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZFZhbHVlcy5zb21lKHZhbGlkID0+IHZhbGlkLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuaW52YWxpZFZhbHVlcy5wdXNoKGBLZXk6ICcke2t9JyBoYXMgYW4gaW52YWxpZCB2YWx1ZTogJHt2YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkluZm8udHlwZSAmJiB0eXBlb2YgdmFsdWUgIT09IHZhbGlkYXRpb25JbmZvLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmludmFsaWRWYWx1ZXMucHVzaChgS2V5OiAnJHtrfScgaGFzIGFuIGludmFsaWQgdHlwZTogJHt0eXBlb2YgdmFsdWV9YClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB0b3RhbCA9IGVycm9ycy5pbnZhbGlkVmFsdWVzLmNvbmNhdChlcnJvcnMuZXh0cmFLZXlzKTtcbiAgICAgICAgaWYgKHRvdGFsLmxlbmd0aCkge1xuICAgICAgICAgICAgZXJyb3JzLmVycm9yTWVzc2FnZSA9IHRvdGFsLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWFwKGFycjogc3RyaW5nW10pOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB7XG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKHJlc3VsdDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0sIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCA8eyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0+e30pO1xufVxuIl19
//# sourceURL=/home/stefano/.atom/packages/atom-typescript/lib/main/tsconfig/simpleValidator.ts
