// Type definitions for Q
// Project: https://github.com/kriskowal/q
// Definitions by: Barrie Nemetchek <https://github.com/bnemetchek>, Andrew Gaspar <https://github.com/AndrewGaspar/>, John Reilly <https://github.com/johnnyreilly>
// Definitions: https://github.com/borisyankov/DefinitelyTyped  
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/stefano/.atom/packages/atom-typescript/lib/typings/q/Q.d.ts
