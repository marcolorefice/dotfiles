// Type definitions for d3JS
// Project: http://d3js.org/
// Definitions by: Boris Yankov <https://github.com/borisyankov>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"/home/stefano/.atom/packages/atom-typescript/lib/typings/d3/d3.d.ts","sources":["/home/stefano/.atom/packages/atom-typescript/lib/typings/d3/d3.d.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,4BAA4B;AAC5B,gEAAgE;AAChE,8DAA8D;AA+3G7D","sourcesContent":["// Type definitions for d3JS\n// Project: http://d3js.org/\n// Definitions by: Boris Yankov <https://github.com/borisyankov>\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\n\ndeclare module D3 {\n    export interface Selectors {\n        /**\n        * Select an element from the current document\n        */\n        select: {\n            /**\n            * Returns the empty selection\n            */\n            (): _Selection<any>;\n            /**\n            * Selects the first element that matches the specified selector string\n            *\n            * @param selector Selection String to match\n            */\n            (selector: string): _Selection<any>;\n            /**\n            * Selects the specified node\n            *\n            * @param element Node element to select\n            */\n            (element: EventTarget): _Selection<any>;\n        };\n\n        /**\n        * Select multiple elements from the current document\n        */\n        selectAll: {\n            /**\n            * Selects all elements that match the specified selector\n            *\n            * @param selector Selection String to match\n            */\n            (selector: string): _Selection<any>;\n            /**\n            * Selects the specified array of elements\n            *\n            * @param elements Array of node elements to select\n            */\n            (elements: EventTarget[]): _Selection<any>;\n        };\n    }\n\n    export interface D3Event extends Event{\n        dx: number;\n        dy: number;\n        clientX: number;\n        clientY: number;\n        translate: number[];\n        scale: number;\n        sourceEvent: D3Event;\n        x: number;\n        y: number;\n        keyCode: number;\n        altKey: any;\n        type: string;\n    }\n\n    export interface Base extends Selectors {\n        /**\n        * Create a behavior\n        */\n        behavior: Behavior.Behavior;\n        /**\n        * Access the current user event for interaction\n        */\n        event: D3Event;\n\n        /**\n        * Compare two values for sorting.\n        * Returns -1 if a is less than b, or 1 if a is greater than b, or 0\n        *\n        * @param a First value\n        * @param b Second value\n        */\n        ascending<T>(a: T, b: T): number;\n        /**\n        * Compare two values for sorting.\n        * Returns -1 if a is greater than b, or 1 if a is less than b, or 0\n        *\n        * @param a First value\n        * @param b Second value\n        */\n        descending<T>(a: T, b: T): number;\n        /**\n        * Find the minimum value in an array\n        *\n        * @param arr Array to search\n        * @param map Accsessor function\n        */\n        min<T, U>(arr: T[], map: (v?: T, i?: number) => U): U;\n        /**\n        * Find the minimum value in an array\n        *\n        * @param arr Array to search\n        */\n        min<T>(arr: T[]): T;\n        /**\n        * Find the maximum value in an array\n        *\n        * @param arr Array to search\n        * @param map Accsessor function\n        */\n        max<T, U>(arr: T[], map: (v?: T, i?: number) => U): U;\n        /**\n        * Find the maximum value in an array\n        *\n        * @param arr Array to search\n        */\n        max<T>(arr: T[]): T;\n        /**\n        * Find the minimum and maximum value in an array\n        *\n        * @param arr Array to search\n        * @param map Accsessor function\n        */\n        extent<T, U>(arr: T[], map: (v: T) => U): U[];\n        /**\n        * Find the minimum and maximum value in an array\n        *\n        * @param arr Array to search\n        */\n        extent<T>(arr: T[]): T[];\n        /**\n        * Compute the sum of an array of numbers\n        *\n        * @param arr Array to search\n        * @param map Accsessor function\n        */\n        sum<T>(arr: T[], map: (v: T) => number): number;\n        /**\n        * Compute the sum of an array of numbers\n        *\n        * @param arr Array to search\n        */\n        sum(arr: number[]): number;\n        /**\n        * Compute the arithmetic mean of an array of numbers\n        *\n        * @param arr Array to search\n        * @param map Accsessor function\n        */\n        mean<T>(arr: T[], map: (v: T) => number): number;\n        /**\n        * Compute the arithmetic mean of an array of numbers\n        *\n        * @param arr Array to search\n        */\n        mean(arr: number[]): number;\n        /**\n        * Compute the median of an array of numbers (the 0.5-quantile).\n        *\n        * @param arr Array to search\n        * @param map Accsessor function\n        */\n        median<T>(arr: T[], map: (v: T) => number): number;\n        /**\n        * Compute the median of an array of numbers (the 0.5-quantile).\n        *\n        * @param arr Array to search\n        */\n        median(arr: number[]): number;\n        /**\n        * Compute a quantile for a sorted array of numbers.\n        *\n        * @param arr Array to search\n        * @param p The quantile to return\n        */\n        quantile: (arr: number[], p: number) => number;\n        /**\n        * Locate the insertion point for x in array to maintain sorted order\n        *\n        * @param arr Array to search\n        * @param x Value to search for insertion point\n        * @param low Minimum value of array subset\n        * @param hihg Maximum value of array subset\n        */\n        bisect<T>(arr: T[], x: T, low?: number, high?: number): number;\n        /**\n        * Locate the insertion point for x in array to maintain sorted order\n        *\n        * @param arr Array to search\n        * @param x Value to serch for insertion point\n        * @param low Minimum value of array subset\n        * @param high Maximum value of array subset\n        */\n        bisectLeft<T>(arr: T[], x: T, low?: number, high?: number): number;\n        /**\n        * Locate the insertion point for x in array to maintain sorted order\n        *\n        * @param arr Array to search\n        * @param x Value to serch for insertion point\n        * @param low Minimum value of array subset\n        * @param high Maximum value of array subset\n        */\n        bisectRight<T>(arr: T[], x: T, low?: number, high?: number): number;\n        /**\n        * Bisect using an accessor.\n        *\n        * @param accessor Accessor function\n        */\n        bisector(accessor: (data: any, index: number) => any): any;\n        /**\n        * Randomize the order of an array.\n        *\n        * @param arr Array to randomize\n        */\n        shuffle<T>(arr: T[]): T[];\n        /**\n        * Reorder an array of elements according to an array of indexes\n        *\n        * @param arr Array to reorder\n        * @param indexes Array containing the order the elements should be returned in\n        */\n        permute(arr: any[], indexes: any[]): any[];\n        /**\n        * Transpose a variable number of arrays.\n        *\n        * @param arrs Arrays to transpose\n        */\n        zip(...arrs: any[]): any[];\n        /**\n        * Parse the given 2D affine transform string, as defined by SVG's transform attribute.\n        *\n        * @param definition 2D affine transform string\n        */\n        transform(definition: string): any;\n        /**\n        * Transpose an array of arrays.\n        *\n        * @param matrix Two dimensional array to transpose\n        */\n        transpose(matrix: any[]): any[];\n        /**\n        * Creates an array containing tuples of adjacent pairs\n        *\n        * @param arr An array containing entries to pair\n        * @returns any[][] An array of 2-element tuples for each pair\n        */\n        pairs(arr: any[]): any[][];\n        /**\n        * List the keys of an associative array.\n        *\n        * @param map Array of objects to get the key values from\n        */\n        keys(map: any): string[];\n        /**\n        * List the values of an associative array.\n        *\n        * @param map Array of objects to get the values from\n        */\n        values(map: any): any[];\n        /**\n        * List the key-value entries of an associative array.\n        *\n        * @param map Array of objects to get the key-value pairs from\n        */\n        entries(map: any): any[];\n        /**\n        * merge multiple arrays into one array\n        *\n        * @param map Arrays to merge\n        */\n        merge(...map: any[]): any[];\n        /**\n        * Generate a range of numeric values.\n        */\n        range: {\n            /**\n            * Generate a range of numeric values from 0.\n            *\n            * @param stop Value to generate the range to\n            * @param step Step between each value\n            */\n            (stop: number, step?: number): number[];\n            /**\n            * Generate a range of numeric values.\n            *\n            * @param start Value to start\n            * @param stop Value to generate the range to\n            * @param step Step between each value\n            */\n            (start: number, stop?: number, step?: number): number[];\n        };\n        /**\n        * Create new nest operator\n        */\n        nest(): Nest;\n        /**\n        * Request a resource using XMLHttpRequest.\n        */\n        xhr: {\n            /**\n            * Creates an asynchronous request for specified url\n            *\n            * @param url Url to request\n            * @param callback Function to invoke when resource is loaded or the request fails\n            */\n            (url: string, callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n            /**\n            * Creates an asynchronous request for specified url\n            *\n            * @param url Url to request\n            * @param mime MIME type to request\n            * @param callback Function to invoke when resource is loaded or the request fails\n            */\n            (url: string, mime: string, callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n        };\n        /**\n        * Request a text file\n        */\n        text: {\n            /**\n            * Request a text file\n            *\n            * @param url Url to request\n            * @param callback Function to invoke when resource is loaded or the request fails\n            */\n            (url: string, callback?: (response: string) => void ): Xhr;\n            /**\n            * Request a text file\n            *\n            * @param url Url to request\n            * @param mime MIME type to request\n            * @param callback Function to invoke when resource is loaded or the request fails\n            */\n            (url: string, mime: string, callback?: (response: string) => void ): Xhr;\n        };\n        /**\n        * Request a JSON blob\n        *\n        * @param url Url to request\n        * @param callback Function to invoke when resource is loaded or the request fails\n        */\n        json: (url: string, callback?: (error: any, data: any) => void ) => Xhr;\n        /**\n        * Request an HTML document fragment.\n        */\n        xml: {\n            /**\n            * Request an HTML document fragment.\n            *\n            * @param url Url to request\n            * @param callback Function to invoke when resource is loaded or the request fails\n            */\n            (url: string, callback?: (response: Document) => void ): Xhr;\n            /**\n            * Request an HTML document fragment.\n            *\n            * @param url Url to request\n            * @param mime MIME type to request\n            * @param callback Function to invoke when resource is loaded or the request fails\n            */\n            (url: string, mime: string, callback?: (response: Document) => void ): Xhr;\n        };\n        /**\n        * Request an XML document fragment.\n        *\n        * @param url Url to request\n        * @param callback Function to invoke when resource is loaded or the request fails\n        */\n        html: (url: string, callback?: (response: DocumentFragment) => void ) => Xhr;\n        /**\n        * Request a comma-separated values (CSV) file.\n        */\n        csv: Dsv;\n        /**\n        * Request a tab-separated values (TSV) file\n        */\n        tsv: Dsv;\n        /**\n        * Time Functions\n        */\n        time: Time.Time;\n        /**\n        * Scales\n        */\n        scale: Scale.ScaleBase;\n        /*\n        * Interpolate two values\n        */\n        interpolate: Transition.BaseInterpolate;\n        /*\n        * Interpolate two numbers\n        */\n        interpolateNumber: Transition.BaseInterpolate;\n        /*\n        * Interpolate two integers\n        */\n        interpolateRound: Transition.BaseInterpolate;\n        /*\n        * Interpolate two strings\n        */\n        interpolateString: Transition.BaseInterpolate;\n        /*\n        * Interpolate two RGB colors\n        */\n        interpolateRgb: Transition.BaseInterpolate;\n        /*\n        * Interpolate two HSL colors\n        */\n        interpolateHsl: Transition.BaseInterpolate;\n        /*\n        * Interpolate two HCL colors\n        */\n        interpolateHcl: Transition.BaseInterpolate;\n        /*\n        * Interpolate two L*a*b* colors\n        */\n        interpolateLab: Transition.BaseInterpolate;\n        /*\n        * Interpolate two arrays of values\n        */\n        interpolateArray: Transition.BaseInterpolate;\n        /*\n        * Interpolate two arbitary objects\n        */\n        interpolateObject: Transition.BaseInterpolate;\n        /*\n        * Interpolate two 2D matrix transforms\n        */\n        interpolateTransform: Transition.BaseInterpolate;\n        /*\n        * The array of built-in interpolator factories\n        */\n        interpolators: Transition.InterpolateFactory[];\n        /**\n        * Layouts\n        */\n        layout: Layout.Layout;\n        /**\n        * Svg's\n        */\n        svg: Svg.Svg;\n        /**\n        * Random number generators\n        */\n        random: Random;\n        /**\n        * Create a function to format a number as a string\n        *\n        * @param specifier The format specifier to use\n        */\n        format(specifier: string): (value: number) => string;\n        /**\n        * Returns the SI prefix for the specified value at the specified precision\n        */\n        formatPrefix(value: number, precision?: number): MetricPrefix;\n        /**\n        * The version of the d3 library\n        */\n        version: string;\n        /**\n        * Returns the root selection\n        */\n        selection(): _Selection<any>;\n        ns: {\n            /**\n            * The map of registered namespace prefixes\n            */\n            prefix: {\n                svg: string;\n                xhtml: string;\n                xlink: string;\n                xml: string;\n                xmlns: string;\n            };\n            /**\n            * Qualifies the specified name\n            */\n            qualify(name: string): { space: string; local: string; };\n        };\n        /**\n        * Returns a built-in easing function of the specified type\n        */\n        ease: (type: string, ...arrs: any[]) => D3.Transition.Transition;\n        /**\n        * Constructs a new RGB color.\n        */\n        rgb: {\n            /**\n            * Constructs a new RGB color with the specified r, g and b channel values\n            */\n            (r: number, g: number, b: number): D3.Color.RGBColor;\n            /**\n            * Constructs a new RGB color by parsing the specified color string\n            */\n            (color: string): D3.Color.RGBColor;\n        };\n        /**\n        * Constructs a new HCL color.\n        */\n        hcl: {\n            /**\n            * Constructs a new HCL color.\n            */\n            (h: number, c: number, l: number): Color.HCLColor;\n            /**\n            * Constructs a new HCL color by parsing the specified color string\n            */\n            (color: string): Color.HCLColor;\n        };\n        /**\n        * Constructs a new HSL color.\n        */\n        hsl: {\n            /**\n            * Constructs a new HSL color with the specified hue h, saturation s and lightness l\n            */\n            (h: number, s: number, l: number): Color.HSLColor;\n            /**\n            * Constructs a new HSL color by parsing the specified color string\n            */\n            (color: string): Color.HSLColor;\n        };\n        /**\n        * Constructs a new RGB color.\n        */\n        lab: {\n            /**\n            * Constructs a new LAB color.\n            */\n            (l: number, a: number, b: number): Color.LABColor;\n            /**\n            * Constructs a new LAB color by parsing the specified color string\n            */\n            (color: string): Color.LABColor;\n        };\n        geo: Geo.Geo;\n        geom: Geom.Geom;\n        /**\n        * gets the mouse position relative to a specified container.\n        */\n        mouse(container: any): number[];\n        /**\n        * gets the touch positions relative to a specified container.\n        */\n        touches(container: any): number[][];\n\n        /**\n        * If the specified value is a function, returns the specified value.\n        * Otherwise, returns a function that returns the specified value.\n        */\n        functor<R,T>(value: (p : R) => T): (p : R) => T;\n        functor<T>(value: T): (p : any) => T;\n\n        map: {\n            (): Map<any>;\n            <T>(object: {[key: string]: T; }): Map<T>;\n            <T>(map: Map<T>): Map<T>;\n            <T>(array: T[]): Map<T>;\n            <T>(array: T[], keyFn: (object: T, index?: number) => string): Map<T>;\n        };\n        set: {\n            (): Set<any>;\n            <T>(array: T[]): Set<T>;\n        };\n        dispatch(...types: string[]): Dispatch;\n        rebind(target: any, source: any, ...names: any[]): any;\n        requote(str: string): string;\n        timer: {\n            (funct: () => boolean, delay?: number, mark?: number): void;\n            flush(): void;\n        }\n        transition(): Transition.Transition;\n\n        round(x: number, n: number): number;\n    }\n\n    export interface Dispatch {\n        [event: string]: any;\n        on: {\n            (type: string): any;\n            (type: string, listener: any): any;\n        }\n    }\n\n    export interface MetricPrefix {\n        /**\n        * the scale function, for converting numbers to the appropriate prefixed scale.\n        */\n        scale: (d: number) => number;\n        /**\n        * the prefix symbol\n        */\n        symbol: string;\n    }\n\n    export interface Xhr {\n        /**\n        * Get or set request header\n        */\n        header: {\n            /**\n            * Get the value of specified request header\n            *\n            * @param name Name of header to get the value for\n            */\n            (name: string): string;\n            /**\n            * Set the value of specified request header\n            *\n            * @param name Name of header to set the value for\n            * @param value Value to set the header to\n            */\n            (name: string, value: string): Xhr;\n        };\n        /**\n        * Get or set MIME Type\n        */\n        mimeType: {\n            /**\n            * Get the current MIME Type\n            */\n            (): string;\n            /**\n            * Set the MIME Type for the request\n            *\n            * @param type The MIME type for the request\n            */\n            (type: string): Xhr;\n        };\n        /*\n        * Get or Set the function used to map the response to the associated data value\n        */\n        response: {\n            /**\n            * Get function used to map the response to the associated data value\n            */\n            (): (xhr: XMLHttpRequest) => any;\n            /**\n            * Set function used to map the response to the associated data value\n            *\n            * @param value The function used to map the response to a data value\n            */\n            (value: (xhr: XMLHttpRequest) => any): Xhr;\n        };\n        /**\n        * Issue the request using the GET method\n        *\n        * @param callback Function to invoke on completion of request\n        */\n        get(callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n        /**\n        * Issue the request using the POST method\n        */\n        post: {\n            /**\n            * Issue the request using the POST method\n            *\n            * @param callback Function to invoke on completion of request\n            */\n            (callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n            /**\n            * Issue the request using the POST method\n            *\n            * @param data Data to post back in the request\n            * @param callback Function to invoke on completion of request\n            */\n            (data: any, callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n        };\n        /**\n        * Issues this request using the specified method\n        */\n        send: {\n            /**\n            * Issues this request using the specified method\n            *\n            * @param method Method to use to make the request\n            * @param callback Function to invoke on completion of request\n            */\n            (method: string, callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n            /**\n            * Issues this request using the specified method\n            *\n            * @param method Method to use to make the request\n            * @param data Data to post back in the request\n            * @param callback Function to invoke on completion of request\n            */\n            (method: string, data: any, callback?: (xhr: XMLHttpRequest) => void ): Xhr;\n        };\n        /**\n        * Aborts this request, if it is currently in-flight\n        */\n        abort(): Xhr;\n        /**\n        * Registers a listener to receive events\n        *\n        * @param type Enent name to attach the listener to\n        * @param listener Function to attach to event\n        */\n        on: (type: string, listener: (data: any, index?: number) => any) => Xhr;\n    }\n\n    export interface Dsv {\n        /**\n        * Request a delimited values file\n        *\n        * @param url Url to request\n        * @param callback Function to invoke when resource is loaded or the request fails\n        */\n        (url: string, callback?: (error: any, response: any[]) => void ): Xhr;\n        /**\n        * Parse a delimited string into objects using the header row.\n        *\n        * @param string delimited formatted string to parse\n        * @param accessor to modify properties of each row\n        */\n        parse(string: string, accessor?: (row: any, index?: number) => any): any[];\n        /**\n        * Parse a delimited string into tuples, ignoring the header row.\n        *\n        * @param string delimited formatted string to parse\n        */\n        parseRows(string: string, accessor: (row: any[], index: number) => any): any;\n        /**\n        * Format an array of tuples into a delimited string.\n        *\n        * @param rows Array to convert to a delimited string\n        */\n        format(rows: any[]): string;\n    }\n\n    export interface _Selection<T> extends Selectors, Array<any> {\n        attr: {\n            (name: string): string;\n            (name: string, value: any): _Selection<T>;\n            (name: string, valueFunction: (data: T, index: number) => any): _Selection<T>;\n            (attrValueMap: Object): _Selection<T>;\n        };\n\n        classed: {\n            (name: string): boolean;\n            (name: string, value: any): _Selection<T>;\n            (name: string, valueFunction: (data: T, index: number) => any): _Selection<T>;\n            (classValueMap: Object): _Selection<T>;\n        };\n\n        style: {\n            (name: string): string;\n            (name: string, value: any, priority?: string): _Selection<T>;\n            (name: string, valueFunction: (data: T, index: number) => any, priority?: string): _Selection<T>;\n            (styleValueMap: Object): _Selection<T>;\n        };\n\n        property: {\n            (name: string): void;\n            (name: string, value: any): _Selection<T>;\n            (name: string, valueFunction: (data: T, index: number) => any): _Selection<T>;\n            (propertyValueMap: Object): _Selection<T>;\n        };\n\n        text: {\n            (): string;\n            (value: any): _Selection<T>;\n            (valueFunction: (data: T, index: number) => any): _Selection<T>;\n        };\n\n        html: {\n            (): string;\n            (value: any): _Selection<T>;\n            (valueFunction: (data: T, index: number) => any): _Selection<T>;\n        };\n\n        append: (name: string) => _Selection<T>;\n        insert: (name: string, before: string) => _Selection<T>;\n        remove: () => _Selection<T>;\n        empty: () => boolean;\n\n        data: {\n            <U>(values: (data: T, index?: number) => U[], key?: (data: U, index?: number) => any): _UpdateSelection<U>;\n            <U>(values: U[], key?: (data: U, index?: number) => any): _UpdateSelection<U>;\n            (): T[];\n        };\n\n        datum: {\n            /**\n             * Sets the element's bound data to the return value of the specified function evaluated\n             * for each selected element.\n             * Unlike the D3.Selection.data method, this method does not compute a join (and thus\n             * does not compute enter and exit selections).\n             * @param values The function to be evaluated for each selected element, being passed the\n             * previous datum d and the current index i, with the this context as the current DOM\n             * element. The function is then used to set each element's data. A null value will\n             * delete the bound data. This operator has no effect on the index.\n             */\n            <U>(values: (data: U, index: number) => any): _UpdateSelection<U>;\n            /**\n             * Sets the element's bound data to the specified value on all selected elements.\n             * Unlike the D3.Selection.data method, this method does not compute a join (and thus\n             * does not compute enter and exit selections).\n             * @param values The same data to be given to all elements.\n             */\n            <U>(values: U): _UpdateSelection<U>;\n            /**\n             * Returns the bound datum for the first non-null element in the selection.\n             * This is generally useful only if you know the selection contains exactly one element.\n             */\n            (): T;\n        };\n\n        filter: {\n            (filter: (data: T, index: number) => boolean, thisArg?: any): _UpdateSelection<T>;\n            (filter: string): _UpdateSelection<T>;\n        };\n\n        call(callback: (selection: _Selection<T>, ...args: any[]) => void, ...args: any[]): _Selection<T>;\n        each(eachFunction: (data: T, index: number) => any): _Selection<T>;\n        on: {\n            (type: string): (data: any, index: number) => any;\n            (type: string, listener: (data: any, index: number) => any, capture?: boolean): _Selection<T>;\n        };\n\n        /**\n        * Returns the total number of elements in the current selection.\n        */\n        size(): number;\n\n        /**\n        * Starts a transition for the current selection. Transitions behave much like selections,\n        * except operators animate smoothly over time rather than applying instantaneously.\n        */\n        transition(): Transition.Transition;\n\n        /**\n        * Sorts the elements in the current selection according to the specified comparator\n        * function.\n        *\n        * @param comparator a comparison function, which will be passed two data elements a and b\n        * to compare, and should return either a negative, positive, or zero value to indicate\n        * their relative order.\n        */\n        sort(comparator?: (a: T, b: T) => number): _Selection<T>;\n\n        /**\n        * Re-inserts elements into the document such that the document order matches the selection\n        * order. This is equivalent to calling sort() if the data is already sorted, but much\n        * faster.\n        */\n        order: () => _Selection<T>;\n\n        /**\n        * Returns the first non-null element in the current selection. If the selection is empty,\n        * returns null.\n        */\n        node: <E extends Element>() => E;\n    }\n\n    export interface Selection extends _Selection<any> { }\n\n    export interface _EnterSelection<T> {\n        append: (name: string) => _Selection<T>;\n        insert: (name: string, before?: string) => _Selection<T>;\n        select: (selector: string) => _Selection<T>;\n        empty: () => boolean;\n        node: () => Element;\n        call: (callback: (selection: _EnterSelection<T>) => void) => _EnterSelection<T>;\n        size: () => number;\n    }\n\n    export interface EnterSelection extends _EnterSelection<any> { }\n\n    export interface _UpdateSelection<T> extends _Selection<T> {\n        enter: () => _EnterSelection<T>;\n        update: () => _Selection<T>;\n        exit: () => _Selection<T>;\n    }\n\n    export interface UpdateSelection extends _UpdateSelection<any> { }\n\n    export interface NestKeyValue {\n        key: string;\n        values: any;\n    }\n\n    export interface Nest {\n        key(keyFunction: (data: any, index: number) => string): Nest;\n        sortKeys(comparator: (d1: any, d2: any) => number): Nest;\n        sortValues(comparator: (d1: any, d2: any) => number): Nest;\n        rollup(rollupFunction: (data: any, index: number) => any): Nest;\n        map(values: any[], mapType?: any): any;\n        entries(values: any[]): NestKeyValue[];\n    }\n\n    export interface MapKeyValue<T> {\n        key: string;\n        value: T;\n    }\n\n    export interface Map<T> {\n        has(key: string): boolean;\n        get(key: string): T;\n        set(key: string, value: T): T;\n        remove(key: string): boolean;\n        keys(): string[];\n        values(): T[];\n        entries(): MapKeyValue<T>[];\n        forEach(func: (key: string, value: T) => void ): void;\n        empty(): boolean;\n        size(): number;\n    }\n\n    export interface Set<T> {\n        has(value: T): boolean;\n        add(value: T): T;\n        remove(value: T): boolean;\n        values(): string[];\n        forEach(func: (value: string) => void ): void;\n        empty(): boolean;\n        size(): number;\n    }\n\n    export interface Random {\n        /**\n        * Returns a function for generating random numbers with a normal distribution\n        *\n        * @param mean The expected value of the generated pseudorandom numbers\n        * @param deviation The given standard deviation\n        */\n        normal(mean?: number, deviation?: number): () => number;\n        /**\n        * Returns a function for generating random numbers with a log-normal distribution\n        *\n        * @param mean The expected value of the generated pseudorandom numbers\n        * @param deviation The given standard deviation\n        */\n        logNormal(mean?: number, deviation?: number): () => number;\n        /**\n        * Returns a function for generating random numbers with an Irwin-Hall distribution\n        *\n        * @param count The number of independent variables\n        */\n        irwinHall(count: number): () => number;\n    }\n\n    // Transitions\n    export module Transition {\n        export interface Transition {\n            duration: {\n                (duration: number): Transition;\n                (duration: (data: any, index: number) => any): Transition;\n            };\n            delay: {\n                (delay: number): Transition;\n                (delay: (data: any, index: number) => any): Transition;\n            };\n            attr: {\n                (name: string): string;\n                (name: string, value: any): Transition;\n                (name: string, valueFunction: (data: any, index: number) => any): Transition;\n                (attrValueMap : any): Transition;\n            };\n            style: {\n                (name: string): string;\n                (name: string, value: any, priority?: string): Transition;\n                (name: string, valueFunction: (data: any, index: number) => any, priority?: string): Transition;\n            };\n            call(callback: (transition: Transition, ...args: any[]) => void, ...args: any[]): Transition;\n            /**\n            * Select an element from the current document\n            */\n            select: {\n                /**\n                * Selects the first element that matches the specified selector string\n                *\n                * @param selector Selection String to match\n                */\n                (selector: string): Transition;\n                /**\n                * Selects the specified node\n                *\n                * @param element Node element to select\n                */\n                (element: EventTarget): Transition;\n            };\n\n            /**\n            * Select multiple elements from the current document\n            */\n            selectAll: {\n                /**\n                * Selects all elements that match the specified selector\n                *\n                * @param selector Selection String to match\n                */\n                (selector: string): Transition;\n                /**\n                * Selects the specified array of elements\n                *\n                * @param elements Array of node elements to select\n                */\n                (elements: EventTarget[]): Transition;\n            }\n            each: {\n                /**\n                 * Immediately invokes the specified function for each element in the current\n                 * transition, passing in the current datum and index, with the this context\n                 * of the current DOM element. Similar to D3.Selection.each.\n                 *\n                 * @param eachFunction The function to be invoked for each element in the\n                 * current transition, passing in the current datum and index, with the this\n                 * context of the current DOM element.\n                 */\n                (eachFunction: (data: any, index: number) => any): Transition;\n                /**\n                 * Adds a listener for transition events, supporting \"start\", \"end\" and\n                 * \"interrupt\" events. The listener will be invoked for each individual\n                 * element in the transition.\n                 *\n                 * @param type Type of transition event. Supported values are \"start\", \"end\"\n                 * and \"interrupt\".\n                 * @param listener The listener to be invoked for each individual element in\n                 * the transition.\n                 */\n                (type: string, listener: (data: any, index: number) => any): Transition;\n            }\n            transition: () => Transition;\n            ease: (value: string, ...arrs: any[]) => Transition;\n            attrTween(name: string, tween: (d: any, i: number, a: any) => BaseInterpolate): Transition;\n            styleTween(name: string, tween: (d: any, i: number, a: any) => BaseInterpolate, priority?: string): Transition;\n            text: {\n                (text: string): Transition;\n                (text: (d: any, i: number) => string): Transition;\n            }\n            tween(name: string, factory: InterpolateFactory): Transition;\n            filter: {\n                (selector: string): Transition;\n                (selector: (data: any, index: number) => boolean): Transition;\n            };\n            remove(): Transition;\n        }\n\n        export interface InterpolateFactory {\n            (a?: any, b?: any): BaseInterpolate;\n        }\n\n        export interface BaseInterpolate {\n            (a: any, b?: any): any;\n        }\n\n        export interface Interpolate {\n            (t: any): any;\n        }\n    }\n\n    //Time\n    export module Time {\n        export interface Time {\n            second: Interval;\n            minute: Interval;\n            hour: Interval;\n            day: Interval;\n            week: Interval;\n            sunday: Interval;\n            monday: Interval;\n            tuesday: Interval;\n            wednesday: Interval;\n            thursday: Interval;\n            friday: Interval;\n            saturday: Interval;\n            month: Interval;\n            year: Interval;\n\n            seconds: Range;\n            minutes: Range;\n            hours: Range;\n            days: Range;\n            weeks: Range;\n            months: Range;\n            years: Range;\n\n            sundays: Range;\n            mondays: Range;\n            tuesdays: Range;\n            wednesdays: Range;\n            thursdays: Range;\n            fridays: Range;\n            saturdays: Range;\n            format: {\n                /**\n                 * Constructs a new local time formatter using the given specifier.\n                 */\n                (specifier: string): TimeFormat;\n                /**\n                 * Returns a new multi-resolution time format given the specified array of predicated formats.\n                 */\n                multi: (formats: any[][]) => TimeFormat;\n\n                utc: {\n                    /**\n                     * Constructs a new local time formatter using the given specifier.\n                     */\n                    (specifier: string): TimeFormat;\n                    /**\n                     * Returns a new multi-resolution UTC time format given the specified array of predicated formats.\n                     */\n                    multi: (formats: any[][]) => TimeFormat;\n                };\n\n                /**\n                 * The full ISO 8601 UTC time format: \"%Y-%m-%dT%H:%M:%S.%LZ\".\n                 */\n                iso: TimeFormat;\n            };\n\n            scale: {\n                /**\n                * Constructs a new time scale with the default domain and range;\n                * the ticks and tick format are configured for local time.\n                */\n                (): Scale.TimeScale;\n                /**\n                * Constructs a new time scale with the default domain and range;\n                * the ticks and tick format are configured for UTC time.\n                */\n                utc(): Scale.TimeScale;\n            };\n        }\n\n        export interface Range {\n            (start: Date, end: Date, step?: number): Date[];\n        }\n\n        export interface Interval {\n            (date: Date): Date;\n            floor: (date: Date) => Date;\n            round: (date: Date) => Date;\n            ceil: (date: Date) => Date;\n            range: Range;\n            offset: (date: Date, step: number) => Date;\n            utc?: Interval;\n        }\n\n        export interface TimeFormat {\n            (date: Date): string;\n            parse: (string: string) => Date;\n        }\n    }\n\n    // Layout\n    export module Layout {\n        export interface Layout {\n            /**\n            * Creates a new Stack layout\n            */\n            stack(): StackLayout;\n            /**\n            * Creates a new pie layout\n            */\n            pie(): PieLayout;\n            /**\n            * Creates a new force layout\n            */\n            force(): ForceLayout;\n            /**\n            * Creates a new tree layout\n            */\n            tree(): TreeLayout;\n            bundle(): BundleLayout;\n            chord(): ChordLayout;\n            cluster(): ClusterLayout;\n            hierarchy(): HierarchyLayout;\n            histogram(): HistogramLayout;\n            pack(): PackLayout;\n            partition(): PartitionLayout;\n            treemap(): TreeMapLayout;\n        }\n\n        export interface StackLayout {\n            <T>(layers: T[], index?: number): T[];\n            values(accessor?: (d: any) => any): StackLayout;\n            offset(offset: string): StackLayout;\n            x(accessor: (d: any, i: number) => any): StackLayout;\n            y(accessor: (d: any, i: number) => any): StackLayout;\n            out(setter: (d: any, y0: number, y: number) => void): StackLayout;\n        }\n\n        export interface TreeLayout {\n            /**\n            * Gets or sets the sort order of sibling nodes for the layout using the specified comparator function\n            */\n            sort: {\n                /**\n                * Gets the sort order function of sibling nodes for the layout\n                */\n                (): (d1: any, d2: any) => number;\n                /**\n                * Sets the sort order of sibling nodes for the layout using the specified comparator function\n                */\n                (comparator: (d1: any, d2: any) => number): TreeLayout;\n            };\n            /**\n            * Gets or sets the specified children accessor function\n            */\n            children: {\n                /**\n                * Gets the children accessor function\n                */\n                (): (d: any) => any;\n                /**\n                * Sets the specified children accessor function\n                */\n                (children: (d: any) => any): TreeLayout;\n            };\n            /**\n            * Runs the tree layout\n            */\n            nodes(root: GraphNode): GraphNode[];\n            /**\n            * Given the specified array of nodes, such as those returned by nodes, returns an array of objects representing the links from parent to child for each node\n            */\n            links(nodes: GraphNode[]): GraphLink[];\n            /**\n            * If separation is specified, uses the specified function to compute separation between neighboring nodes. If separation is not specified, returns the current separation function\n            */\n            separation: {\n                /**\n                * Gets the current separation function\n                */\n                (): (a: GraphNode, b: GraphNode) => number;\n                /**\n                * Sets the specified function to compute separation between neighboring nodes\n                */\n                (separation: (a: GraphNode, b: GraphNode) => number): TreeLayout;\n            };\n            /**\n            * Gets or sets the available layout size\n            */\n            size: {\n                /**\n                * Gets the available layout size\n                */\n                (): number[];\n                /**\n                * Sets the available layout size\n                */\n                (size: number[]): TreeLayout;\n            };\n            /**\n            * Gets or sets the available node size\n            */\n            nodeSize: {\n                /**\n                * Gets the available node size\n                */\n                (): number[];\n                /**\n                * Sets the available node size\n                */\n                (size: number[]): TreeLayout;\n            };\n        }\n\n        export interface PieLayout {\n            (values: any[], index?: number): ArcDescriptor[];\n            value: {\n                (): (d: any, index: number) => number;\n                (accessor: (d: any, index: number) => number): PieLayout;\n            };\n            sort: {\n                (): (d1: any, d2: any) => number;\n                (comparator: (d1: any, d2: any) => number): PieLayout;\n            };\n            startAngle: {\n                (): number;\n                (angle: number): PieLayout;\n                (angle: () => number): PieLayout;\n                (angle: (d : any) => number): PieLayout;\n                (angle: (d : any, i: number) => number): PieLayout;\n            };\n            endAngle: {\n                (): number;\n                (angle: number): PieLayout;\n                (angle: () => number): PieLayout;\n                (angle: (d : any) => number): PieLayout\n                (angle: (d : any, i: number) => number): PieLayout;\n            };\n            padAngle: {\n                (): number;\n                (angle: number): PieLayout;\n                (angle: () => number): PieLayout;\n                (angle: (d : any) => number): PieLayout\n                (angle: (d : any, i: number) => number): PieLayout;\n            };\n        }\n\n        export interface ArcDescriptor {\n            value: any;\n            data: any;\n            startAngle: number;\n            endAngle: number;\n            index: number;\n        }\n\n        export interface GraphNode  {\n            id?: number;\n            index?: number;\n            name?: string;\n            px?: number;\n            py?: number;\n            size?: number;\n            weight?: number;\n            x?: number;\n            y?: number;\n            subindex?: number;\n            startAngle?: number;\n            endAngle?: number;\n            value?: number;\n            fixed?: boolean;\n            children?: GraphNode[];\n            _children?: GraphNode[];\n            parent?: GraphNode;\n            depth?: number;\n        }\n\n        export interface GraphLink {\n            source: GraphNode;\n            target: GraphNode;\n        }\n\n        export interface GraphNodeForce {\n            index?: number;\n            x?: number;\n            y?: number;\n            px?: number;\n            py?: number;\n            fixed?: boolean;\n            weight?: number;\n        }\n\n        export interface GraphLinkForce {\n            source: GraphNodeForce;\n            target: GraphNodeForce;\n        }\n\n        export interface ForceLayout {\n            (): ForceLayout;\n            size: {\n                (): number[];\n                (mysize: number[]): ForceLayout;\n            };\n            linkDistance: {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n            linkStrength:\n            {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n            friction:\n            {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n            alpha: {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n            charge: {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n\n            theta: {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n\n            gravity: {\n                (): number;\n                (number:number): ForceLayout;\n                (accessor: (d: any, index: number) => number): ForceLayout;\n            };\n\n            links: {\n                (): GraphLinkForce[];\n                (arLinks: GraphLinkForce[]): ForceLayout;\n\n            };\n            nodes:\n            {\n                (): GraphNodeForce[];\n                (arNodes: GraphNodeForce[]): ForceLayout;\n\n            };\n            start(): ForceLayout;\n            resume(): ForceLayout;\n            stop(): ForceLayout;\n            tick(): ForceLayout;\n            on(type: string, listener: (arg:any) => void ): ForceLayout;\n            drag(): ForceLayout;\n        }\n\n        export interface BundleLayout{\n            (links: GraphLink[]): GraphNode[][];\n        }\n\n        export interface ChordLayout {\n            matrix: {\n                (): number[][];\n                (matrix: number[][]): ChordLayout;\n            }\n            padding: {\n                (): number;\n                (padding: number): ChordLayout;\n            }\n            sortGroups: {\n                (): (a: number, b: number) => number;\n                (comparator: (a: number, b: number) => number): ChordLayout;\n            }\n            sortSubgroups: {\n                (): (a: number, b: number) => number;\n                (comparator: (a: number, b: number) => number): ChordLayout;\n            }\n            sortChords: {\n                (): (a: number, b: number) => number;\n                (comparator: (a: number, b: number) => number): ChordLayout;\n            }\n            chords(): GraphLink[];\n            groups(): ArcDescriptor[];\n        }\n\n        export interface ClusterLayout{\n            sort: {\n                (): (a: GraphNode, b: GraphNode) => number;\n                (comparator: (a: GraphNode, b: GraphNode) => number): ClusterLayout;\n            }\n            children: {\n                (): (d: any, i?: number) => GraphNode[];\n                (children: (d: any, i?: number) => GraphNode[]): ClusterLayout;\n            }\n            nodes(root: GraphNode): GraphNode[];\n            links(nodes: GraphNode[]): GraphLink[];\n            separation: {\n                (): (a: GraphNode, b: GraphNode) => number;\n                (separation: (a: GraphNode, b: GraphNode) => number): ClusterLayout;\n            }\n            size: {\n                (): number[];\n                (size: number[]): ClusterLayout;\n            }\n            value: {\n                (): (node: GraphNode) => number;\n                (value: (node: GraphNode) => number): ClusterLayout;\n            }\n        }\n\n        export interface HierarchyLayout {\n            sort: {\n                (): (a: GraphNode, b: GraphNode) => number;\n                (comparator: (a: GraphNode, b: GraphNode) => number): HierarchyLayout;\n            }\n            children: {\n                (): (d: any, i?: number) => GraphNode[];\n                (children: (d: any, i?: number) => GraphNode[]): HierarchyLayout;\n            }\n            nodes(root: GraphNode): GraphNode[];\n            links(nodes: GraphNode[]): GraphLink[];\n            value: {\n                (): (node: GraphNode) => number;\n                (value: (node: GraphNode) => number): HierarchyLayout;\n            }\n            reValue(root: GraphNode): HierarchyLayout;\n        }\n\n        export interface Bin extends Array<any> {\n            x: number;\n            dx: number;\n            y: number;\n        }\n\n        export interface HistogramLayout {\n            (values: any[], index?: number): Bin[];\n            value: {\n                (): (value: any) => any;\n                (accessor: (value: any) => any): HistogramLayout\n            }\n            range: {\n                (): (value: any, index: number) => number[];\n                (range: (value: any, index: number) => number[]): HistogramLayout;\n                (range: number[]): HistogramLayout;\n            }\n            bins: {\n                (): (range: any[], index: number) => number[];\n                (bins: (range: any[], index: number) => number[]): HistogramLayout;\n                (bins: number): HistogramLayout;\n                (bins: number[]): HistogramLayout;\n            }\n            frequency: {\n                (): boolean;\n                (frequency: boolean): HistogramLayout;\n            }\n        }\n\n        export interface PackLayout {\n            sort: {\n                (): (a: GraphNode, b: GraphNode) => number;\n                (comparator: (a: GraphNode, b: GraphNode) => number): PackLayout;\n            }\n            children: {\n                (): (d: any, i?: number) => GraphNode[];\n                (children: (d: any, i?: number) => GraphNode[]): PackLayout;\n            }\n            nodes(root: GraphNode): GraphNode[];\n            links(nodes: GraphNode[]): GraphLink[];\n            value: {\n                (): (node: GraphNode) => number;\n                (value: (node: GraphNode) => number): PackLayout;\n            }\n            size: {\n                (): number[];\n                (size: number[]): PackLayout;\n            }\n            padding: {\n                (): number;\n                (padding: number): PackLayout;\n            }\n        }\n\n        export interface PartitionLayout {\n            sort: {\n                (): (a: GraphNode, b: GraphNode) => number;\n                (comparator: (a: GraphNode, b: GraphNode) => number): PackLayout;\n            }\n            children: {\n                (): (d: any, i?: number) => GraphNode[];\n                (children: (d: any, i?: number) => GraphNode[]): PackLayout;\n            }\n            nodes(root: GraphNode): GraphNode[];\n            links(nodes: GraphNode[]): GraphLink[];\n            value: {\n                (): (node: GraphNode) => number;\n                (value: (node: GraphNode) => number): PackLayout;\n            }\n            size: {\n                (): number[];\n                (size: number[]): PackLayout;\n            }\n        }\n\n        export interface TreeMapLayout {\n            sort: {\n                (): (a: GraphNode, b: GraphNode) => number;\n                (comparator: (a: GraphNode, b: GraphNode) => number): TreeMapLayout;\n            }\n            children: {\n                (): (d: any, i?: number) => GraphNode[];\n                (children: (d: any, i?: number) => GraphNode[]): TreeMapLayout;\n            }\n            nodes(root: GraphNode): GraphNode[];\n            links(nodes: GraphNode[]): GraphLink[];\n            value: {\n                (): (node: GraphNode) => number;\n                (value: (node: GraphNode) => number): TreeMapLayout;\n            }\n            size: {\n                (): number[];\n                (size: number[]): TreeMapLayout;\n            }\n            padding: {\n                (): number;\n                (padding: number): TreeMapLayout;\n            }\n            round: {\n                (): boolean;\n                (round: boolean): TreeMapLayout;\n            }\n            sticky: {\n                (): boolean;\n                (sticky: boolean): TreeMapLayout;\n            }\n            mode: {\n                (): string;\n                (mode: string): TreeMapLayout;\n            }\n        }\n    }\n\n    // Color\n    export module Color {\n        export interface Color {\n            /**\n            * increase lightness by some exponential factor (gamma)\n            */\n            brighter(k?: number): Color;\n            /**\n            * decrease lightness by some exponential factor (gamma)\n            */\n            darker(k?: number): Color;\n            /**\n            * convert the color to a string.\n            */\n            toString(): string;\n        }\n\n        export interface RGBColor extends Color{\n            /**\n            * the red color channel.\n            */\n            r: number;\n            /**\n            * the green color channel.\n            */\n            g: number;\n            /**\n            * the blue color channel.\n            */\n            b: number;\n            /**\n            * convert from RGB to HSL.\n            */\n            hsl(): HSLColor;\n        }\n\n        export interface HSLColor extends Color{\n            /**\n            * hue\n            */\n            h: number;\n            /**\n            * saturation\n            */\n            s: number;\n            /**\n            * lightness\n            */\n            l: number;\n            /**\n            * convert from HSL to RGB.\n            */\n            rgb(): RGBColor;\n        }\n\n        export interface LABColor extends Color{\n            /**\n            * lightness\n            */\n            l: number;\n            /**\n            * a-dimension\n            */\n            a: number;\n            /**\n            * b-dimension\n            */\n            b: number;\n            /**\n            * convert from LAB to RGB.\n            */\n            rgb(): RGBColor;\n        }\n\n        export interface HCLColor extends Color{\n            /**\n            * hue\n            */\n            h: number;\n            /**\n            * chroma\n            */\n            c: number;\n            /**\n            * luminance\n            */\n            l: number;\n            /**\n            * convert from HCL to RGB.\n            */\n            rgb(): RGBColor;\n        }\n    }\n\n    // SVG\n    export module Svg {\n        export interface Svg {\n            /**\n            * Create a new symbol generator\n            */\n            symbol(): Symbol;\n            /**\n            * Create a new axis generator\n            */\n            axis(): Axis;\n            /**\n            * Create a new arc generator\n            */\n            arc(): Arc;\n            /**\n            * Create a new line generator\n            */\n            line: {\n                (): Line;\n                radial(): LineRadial;\n            }\n            /**\n            * Create a new area generator\n            */\n            area: {\n                (): Area;\n                radial(): AreaRadial;\n            }\n            /**\n            * Create a new brush generator\n            */\n            brush(): Brush;\n            /**\n            * Create a new chord generator\n            */\n            chord(): Chord;\n            /**\n            * Create a new diagonal generator\n            */\n            diagonal: {\n                (): Diagonal;\n                radial(): Diagonal;\n            }\n            /**\n            * The array of supported symbol types.\n            */\n            symbolTypes: string[];\n        }\n\n        export interface Symbol {\n            type: (symbolType: string | ((datum: any, index: number) => string)) => Symbol;\n            size: (size: number | ((datum: any, index: number) => number)) => Symbol;\n            (datum?: any, index?: number): string;\n        }\n\n        export interface Brush {\n            /**\n            * Draws or redraws this brush into the specified selection of elements\n            */\n            (selection: _Selection<any>): void;\n            /**\n            * Gets or sets the x-scale associated with the brush\n            */\n            x: {\n                /**\n                * Gets  the x-scale associated with the brush\n                */\n                (): D3.Scale.Scale;\n                /**\n                * Sets the x-scale associated with the brush\n                *\n                * @param accessor The new Scale\n                */\n                (scale: D3.Scale.Scale): Brush;\n            };\n            /**\n            * Gets or sets the x-scale associated with the brush\n            */\n            y: {\n                /**\n                * Gets  the x-scale associated with the brush\n                */\n                (): D3.Scale.Scale;\n                /**\n                * Sets the x-scale associated with the brush\n                *\n                * @param accessor The new Scale\n                */\n                (scale: D3.Scale.Scale): Brush;\n            };\n            /**\n            * Gets or sets the current brush extent\n            */\n            extent: {\n                /**\n                * Gets the current brush extent\n                */\n                (): any[];\n                /**\n                * Sets the current brush extent\n                */\n                (values: any[]): Brush;\n            };\n            /**\n            * Clears the extent, making the brush extent empty.\n            */\n            clear(): Brush;\n            /**\n            * Returns true if and only if the brush extent is empty\n            */\n            empty(): boolean;\n            /**\n            * Gets or sets the listener for the specified event type\n            */\n            on: {\n                /**\n                * Gets the listener for the specified event type\n                */\n                (type: string): (data: any, index: number) => any;\n                /**\n                * Sets the listener for the specified event type\n                */\n                (type: string, listener: (data: any, index: number) => any, capture?: boolean): Brush;\n            };\n        }\n\n        export interface Axis {\n            (selection: _Selection<any>): void;\n            (transition: Transition.Transition): void;\n\n            scale: {\n                (): any;\n                (scale: any): Axis;\n            };\n\n            orient: {\n                (): string;\n                (orientation: string): Axis;\n            };\n\n            ticks: {\n                (): any[];\n                (...arguments: any[]): Axis;\n            };\n\n            tickPadding: {\n                (): number;\n                (padding: number): Axis;\n            };\n\n            tickValues: {\n                (): any[];\n                (values: any[]): Axis;\n            };\n            tickSubdivide(count: number): Axis;\n            tickSize: {\n                (): number;\n                (inner: number, outer?: number): Axis;\n            }\n            innerTickSize: {\n                (): number;\n                (value: number): Axis;\n            }\n            outerTickSize: {\n                (): number;\n                (value: number): Axis;\n            }\n            tickFormat(formatter: (value: any, index?: number) => string): Axis;\n            nice(count?: number): Axis;\n        }\n\n        export interface Arc {\n           /**\n           * Returns the path data string\n           *\n           * @param data Array of data elements\n           * @param index Optional index\n           */\n           (data: any, index?: number): string;\n           innerRadius: {\n                (): (data: any, index?: number) => number;\n                (radius: number): Arc;\n                (radius: () => number): Arc;\n                (radius: (data: any) => number): Arc;\n                (radius: (data: any, index: number) => number): Arc;\n            };\n            outerRadius: {\n                (): (data: any, index?: number) => number;\n                (radius: number): Arc;\n                (radius: () => number): Arc;\n                (radius: (data: any) => number): Arc;\n                (radius: (data: any, index: number) => number): Arc;\n            };\n            startAngle: {\n                (): (data: any, index?: number) => number;\n                (angle: number): Arc;\n                (angle: () => number): Arc;\n                (angle: (data: any) => number): Arc;\n                (angle: (data: any, index: number) => number): Arc;\n            };\n            endAngle: {\n                (): (data: any, index?: number) => number;\n                (angle: number): Arc;\n                (angle: () => number): Arc;\n                (angle: (data: any) => number): Arc;\n                (angle: (data: any, index: number) => number): Arc;\n            };\n            centroid(data: any, index?: number): number[];\n        }\n\n        export interface Line {\n            /**\n            * Returns the path data string\n            *\n            * @param data Array of data elements\n            * @param index Optional index\n            */\n            (data: any[], index?: number): string;\n            /**\n            * Get or set the x-coordinate accessor.\n            */\n            x: {\n                /**\n                * Get the x-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the x-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Line;\n                (accessor: (data: any, index: number) => number): Line;\n                /**\n                * Set the  x-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): Line;\n            };\n            /**\n            * Get or set the y-coordinate accessor.\n            */\n            y: {\n                /**\n                * Get the y-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Line;\n                (accessor: (data: any, index: number) => number): Line;\n                /**\n                * Set the  y-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): Line;\n            };\n            /**\n            * Get or set the interpolation mode.\n            */\n            interpolate: {\n                /**\n                * Get the interpolation accessor.\n                */\n                (): string;\n                /**\n                * Set the interpolation accessor.\n                *\n                * @param interpolate The interpolation mode\n                */\n                (interpolate: string): Line;\n            };\n            /**\n            * Get or set the cardinal spline tension.\n            */\n            tension: {\n                /**\n                * Get the cardinal spline accessor.\n                */\n                (): number;\n                /**\n                * Set the cardinal spline accessor.\n                *\n                * @param tension The Cardinal spline interpolation tension\n                */\n                (tension: number): Line;\n            };\n            /**\n            * Control whether the line is defined at a given point.\n            */\n            defined: {\n                /**\n                * Get the accessor function that controls where the line is defined.\n                */\n                (): (data: any, index?: number) => boolean;\n                /**\n                * Set the accessor function that controls where the area is defined.\n                *\n                * @param defined The new accessor function\n                */\n                (defined: (data: any, index?: number) => boolean): Line;\n            };\n        }\n\n        export interface LineRadial {\n            /**\n            * Returns the path data string\n            *\n            * @param data Array of data elements\n            * @param index Optional index\n            */\n            (data: any[], index?: number): string;\n            /**\n            * Get or set the x-coordinate accessor.\n            */\n            x: {\n                /**\n                * Get the x-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the x-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): LineRadial;\n                (accessor: (data: any, index: number) => number): LineRadial;\n\n                /**\n                * Set the  x-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): LineRadial;\n            };\n            /**\n            * Get or set the y-coordinate accessor.\n            */\n            y: {\n                /**\n                * Get the y-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): LineRadial;\n                (accessor: (data: any, index: number) => number): LineRadial;\n                /**\n                * Set the  y-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): LineRadial;\n            };\n            /**\n            * Get or set the interpolation mode.\n            */\n            interpolate: {\n                /**\n                * Get the interpolation accessor.\n                */\n                (): string;\n                /**\n                * Set the interpolation accessor.\n                *\n                * @param interpolate The interpolation mode\n                */\n                (interpolate: string): LineRadial;\n            };\n            /**\n            * Get or set the cardinal spline tension.\n            */\n            tension: {\n                /**\n                * Get the cardinal spline accessor.\n                */\n                (): number;\n                /**\n                * Set the cardinal spline accessor.\n                *\n                * @param tension The Cardinal spline interpolation tension\n                */\n                (tension: number): LineRadial;\n            };\n            /**\n            * Control whether the line is defined at a given point.\n            */\n            defined: {\n                /**\n                * Get the accessor function that controls where the line is defined.\n                */\n                (): (data: any) => any;\n                /**\n                * Set the accessor function that controls where the area is defined.\n                *\n                * @param defined The new accessor function\n                */\n                (defined: (data: any) => any): LineRadial;\n            };\n            radius: {\n                (): (d: any, i?: number) => number;\n                (radius: number): LineRadial;\n                (radius: (d: any) => number): LineRadial;\n                (radius: (d: any, i: number) => number): LineRadial;\n            }\n            angle: {\n                (): (d: any, i?: any) => number;\n                (angle: number): LineRadial;\n                (angle: (d: any) => number): LineRadial;\n                (angle: (d: any, i: any) => number): LineRadial;\n            }\n        }\n\n        export interface Area {\n            /**\n            * Generate a piecewise linear area, as in an area chart.\n            */\n            (data: any[], index?: number): string;\n            /**\n            * Get or set the x-coordinate accessor.\n            */\n            x: {\n                /**\n                * Get the x-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the x-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Area;\n                (accessor: (data: any, index: number) => number): Area;\n                /**\n                * Set the  x-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): Area;\n            };\n            /**\n            * Get or set the x0-coordinate (baseline) accessor.\n            */\n            x0: {\n                /**\n                * Get the  x0-coordinate (baseline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the  x0-coordinate (baseline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Area;\n                (accessor: (data: any, index: number) => number): Area;\n                /**\n                * Set the  x0-coordinate (baseline) to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): Area;\n            };\n            /**\n            * Get or set the x1-coordinate (topline) accessor.\n            */\n            x1: {\n                /**\n                * Get the  x1-coordinate (topline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the  x1-coordinate (topline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Area;\n                (accessor: (data: any, index: number) => number): Area;\n                /**\n                * Set the  x1-coordinate (topline) to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): Area;\n            };\n            /**\n            * Get or set the y-coordinate accessor.\n            */\n            y: {\n                /**\n                * Get the y-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Area;\n                (accessor: (data: any, index: number) => number): Area;\n                /**\n                * Set the y-coordinate to a constant.\n                *\n                * @param cnst The constant value\n                */\n                (cnst: number): Area;\n            };\n            /**\n            * Get or set the y0-coordinate (baseline) accessor.\n            */\n            y0: {\n                /**\n                * Get the y0-coordinate (baseline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y0-coordinate (baseline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Area;\n                (accessor: (data: any, index: number) => number): Area;\n                /**\n                * Set the y0-coordinate (baseline) to a constant.\n                *\n                * @param cnst The constant value\n                */\n                (cnst: number): Area;\n            };\n            /**\n            * Get or set the y1-coordinate (topline) accessor.\n            */\n            y1: {\n                /**\n                * Get the y1-coordinate (topline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y1-coordinate (topline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): Area;\n                (accessor: (data: any, index: number) => number): Area;\n                /**\n                * Set the y1-coordinate (baseline) to a constant.\n                *\n                * @param cnst The constant value\n                */\n                (cnst: number): Area;\n            };\n            /**\n            * Get or set the interpolation mode.\n            */\n            interpolate: {\n                /**\n                * Get the interpolation accessor.\n                */\n                (): string;\n                /**\n                * Set the interpolation accessor.\n                *\n                * @param interpolate The interpolation mode\n                */\n                (interpolate: string): Area;\n            };\n            /**\n            * Get or set the cardinal spline tension.\n            */\n            tension: {\n                /**\n                * Get the cardinal spline accessor.\n                */\n                (): number;\n                /**\n                * Set the cardinal spline accessor.\n                *\n                * @param tension The Cardinal spline interpolation tension\n                */\n                (tension: number): Area;\n            };\n            /**\n            * Control whether the area is defined at a given point.\n            */\n            defined: {\n                /**\n                * Get the accessor function that controls where the area is defined.\n                */\n                (): (data: any, index?: number) => any;\n                /**\n                * Set the accessor function that controls where the area is defined.\n                *\n                * @param defined The new accessor function\n                */\n                (defined: (data: any, index?: number) => any): Area;\n            };\n        }\n\n        export interface AreaRadial {\n            /**\n            * Generate a piecewise linear area, as in an area chart.\n            */\n            (data: any[], index?: number): string;\n            /**\n            * Get or set the x-coordinate accessor.\n            */\n            x: {\n                /**\n                * Get the x-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the x-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): AreaRadial;\n                (accessor: (data: any, index: number) => number): AreaRadial;\n                /**\n                * Set the  x-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): AreaRadial;\n            };\n            /**\n            * Get or set the x0-coordinate (baseline) accessor.\n            */\n            x0: {\n                /**\n                * Get the  x0-coordinate (baseline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the  x0-coordinate (baseline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): AreaRadial;\n                (accessor: (data: any, index: number) => number): AreaRadial;\n                /**\n                * Set the  x0-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): AreaRadial;\n            };\n            /**\n            * Get or set the x1-coordinate (topline) accessor.\n            */\n            x1: {\n                /**\n                * Get the  x1-coordinate (topline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the  x1-coordinate (topline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): AreaRadial;\n                (accessor: (data: any, index: number) => number): AreaRadial;\n                /**\n                * Set the  x1-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): AreaRadial;\n            };\n            /**\n            * Get or set the y-coordinate accessor.\n            */\n            y: {\n                /**\n                * Get the y-coordinate accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): AreaRadial;\n                (accessor: (data: any, index: number) => number): AreaRadial;\n                /**\n                * Set the y-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): AreaRadial;\n            };\n            /**\n            * Get or set the y0-coordinate (baseline) accessor.\n            */\n            y0: {\n                /**\n                * Get the y0-coordinate (baseline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y0-coordinate (baseline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): AreaRadial;\n                (accessor: (data: any, index: number) => number): AreaRadial;\n                /**\n                * Set the  y0-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): AreaRadial;\n            };\n            /**\n            * Get or set the y1-coordinate (topline) accessor.\n            */\n            y1: {\n                /**\n                * Get the y1-coordinate (topline) accessor.\n                */\n                (): (data: any, index ?: number) => number;\n                /**\n                * Set the y1-coordinate (topline) accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: any) => number): AreaRadial;\n                (accessor: (data: any, index: number) => number): AreaRadial;\n                /**\n                * Set the  y1-coordinate to a constant.\n                *\n                * @param cnst The new constant value.\n                */\n                (cnst: number): AreaRadial;\n            };\n            /**\n            * Get or set the interpolation mode.\n            */\n            interpolate: {\n                /**\n                * Get the interpolation accessor.\n                */\n                (): string;\n                /**\n                * Set the interpolation accessor.\n                *\n                * @param interpolate The interpolation mode\n                */\n                (interpolate: string): AreaRadial;\n            };\n            /**\n            * Get or set the cardinal spline tension.\n            */\n            tension: {\n                /**\n                * Get the cardinal spline accessor.\n                */\n                (): number;\n                /**\n                * Set the cardinal spline accessor.\n                *\n                * @param tension The Cardinal spline interpolation tension\n                */\n                (tension: number): AreaRadial;\n            };\n            /**\n            * Control whether the area is defined at a given point.\n            */\n            defined: {\n                /**\n                * Get the accessor function that controls where the area is defined.\n                */\n                (): (data: any) => any;\n                /**\n                * Set the accessor function that controls where the area is defined.\n                *\n                * @param defined The new accessor function\n                */\n                (defined: (data: any) => any): AreaRadial;\n            };\n            radius: {\n                (): number;\n                (radius: number): AreaRadial;\n                (radius: () => number): AreaRadial;\n                (radius: (data: any) => number): AreaRadial;\n                (radius: (data: any, index: number) => number): AreaRadial;\n            };\n            innerRadius: {\n                (): number;\n                (radius: number): AreaRadial;\n                (radius: () => number): AreaRadial;\n                (radius: (data: any) => number): AreaRadial;\n                (radius: (data: any, index: number) => number): AreaRadial;\n            };\n            outerRadius: {\n                (): number;\n                (radius: number): AreaRadial;\n                (radius: () => number): AreaRadial;\n                (radius: (data: any) => number): AreaRadial;\n                (radius: (data: any, index: number) => number): AreaRadial;\n            };\n            angle: {\n                (): number;\n                (angle: number): AreaRadial;\n                (angle: () => number): AreaRadial;\n                (angle: (data: any) => number): AreaRadial;\n                (angle: (data: any, index: number) => number): AreaRadial;\n            };\n            startAngle: {\n                (): number;\n                (angle: number): AreaRadial;\n                (angle: () => number): AreaRadial;\n                (angle: (data: any) => number): AreaRadial;\n                (angle: (data: any, index: number) => number): AreaRadial;\n            };\n            endAngle: {\n                (): number;\n                (angle: number): AreaRadial;\n                (angle: () => number): AreaRadial;\n                (angle: (data: any) => number): AreaRadial;\n                (angle: (data: any, index: number) => number): AreaRadial;\n            };\n        }\n\n        export interface Chord {\n            (datum: any, index?: number): string;\n            radius: {\n                (): number;\n                (radius: number): Chord;\n                (radius: () => number): Chord;\n            };\n            startAngle: {\n                (): number;\n                (angle: number): Chord;\n                (angle: () => number): Chord;\n            };\n            endAngle: {\n                (): number;\n                (angle: number): Chord;\n                (angle: () => number): Chord;\n            };\n            source: {\n                (): any;\n                (angle: any): Chord;\n                (angle: (d: any, i?: number) => any): Chord;\n            };\n            target: {\n                (): any;\n                (angle: any): Chord;\n                (angle: (d: any, i?: number) => any): Chord;\n            };\n        }\n\n        export interface Diagonal {\n            (datum: any, index?: number): string;\n            projection: {\n                (): (datum: any, index?: number) => number[];\n                (proj: (datum: any) => number[]): Diagonal;\n                (proj: (datum: any, index: number) => number[]): Diagonal;\n            };\n            source: {\n                (): (datum: any, index?: number) => any;\n                (src: (datum: any) => any): Diagonal;\n                (src: (datum: any, index: number) => any): Diagonal;\n                (src: any): Diagonal;\n            };\n            target: {\n                (): (datum: any, index?: number) => any;\n                (target: (d: any) => any): Diagonal;\n                (target: (d: any, i: number) => any): Diagonal;\n                (target: any): Diagonal;\n            };\n        }\n    }\n\n    // Scales\n    export module Scale {\n        export interface ScaleBase {\n            /**\n            * Construct a linear quantitative scale.\n            */\n            linear(): LinearScale;\n            /*\n            * Construct an ordinal scale.\n            */\n            ordinal(): OrdinalScale;\n            /**\n            * Construct a linear quantitative scale with a discrete output range.\n            */\n            quantize(): QuantizeScale;\n            /*\n            * Construct an ordinal scale with ten categorical colors.\n            */\n            category10(): OrdinalScale;\n            /*\n            * Construct an ordinal scale with twenty categorical colors\n            */\n            category20(): OrdinalScale;\n            /*\n            * Construct an ordinal scale with twenty categorical colors\n            */\n            category20b(): OrdinalScale;\n            /*\n            * Construct an ordinal scale with twenty categorical colors\n            */\n            category20c(): OrdinalScale;\n            /*\n            * Construct a linear identity scale.\n            */\n            identity(): IdentityScale;\n            /*\n            * Construct a quantitative scale with an logarithmic transform.\n            */\n            log(): LogScale;\n            /*\n            * Construct a quantitative scale with an exponential transform.\n            */\n            pow(): PowScale;\n            /*\n            * Construct a quantitative scale mapping to quantiles.\n            */\n            quantile(): QuantileScale;\n            /*\n            * Construct a quantitative scale with a square root transform.\n            */\n            sqrt(): SqrtScale;\n            /*\n            * Construct a threshold scale with a discrete output range.\n            */\n            threshold(): ThresholdScale;\n        }\n\n        export interface GenericScale<S> {\n            (value: any): any;\n            domain: {\n                (values: any[]): S;\n                (): any[];\n            };\n            range: {\n                (values: any[]): S;\n                (): any[];\n            };\n            invertExtent?(y: any): any[];\n            copy(): S;\n        }\n\n        export interface Scale extends GenericScale<Scale> { }\n\n        export interface GenericQuantitativeScale<S> extends GenericScale<S> {\n            /**\n            * Get the range value corresponding to a given domain value.\n            *\n            * @param value Domain Value\n            */\n            (value: number): number;\n            /**\n            * Get the domain value corresponding to a given range value.\n            *\n            * @param value Range Value\n            */\n            invert(value: number): number;\n            /**\n            * Set the scale's output range, and enable rounding.\n            *\n            * @param value The output range.\n            */\n            rangeRound: (values: any[]) => S;\n            /**\n            * get or set the scale's output interpolator.\n            */\n            interpolate: {\n                (): D3.Transition.Interpolate;\n                (factory: D3.Transition.Interpolate): S;\n            };\n            /**\n            * enable or disable clamping of the output range.\n            *\n            * @param clamp Enable or disable\n            */\n            clamp: {\n                (): boolean;\n                (clamp: boolean): S;\n            }\n            /**\n            * extend the scale domain to nice round numbers.\n            *\n            * @param count Optional number of ticks to exactly fit the domain\n            */\n            nice(count?: number): S;\n            /**\n            * get representative values from the input domain.\n            *\n            * @param count Aproximate representative values to return.\n            */\n            ticks(count: number): any[];\n            /**\n            * get a formatter for displaying tick values\n            *\n            * @param count Aproximate representative values to return\n            */\n            tickFormat(count: number, format?: string): (n: number) => string;\n        }\n\n        export interface QuantitativeScale extends GenericQuantitativeScale<QuantitativeScale> { }\n\n        export interface LinearScale extends GenericQuantitativeScale<LinearScale> { }\n\n        export interface IdentityScale extends GenericScale<IdentityScale> {\n            /**\n            * Get the range value corresponding to a given domain value.\n            *\n            * @param value Domain Value\n            */\n            (value: number): number;\n            /**\n            * Get the domain value corresponding to a given range value.\n            *\n            * @param value Range Value\n            */\n            invert(value: number): number;\n            /**\n            * get representative values from the input domain.\n            *\n            * @param count Aproximate representative values to return.\n            */\n            ticks(count: number): any[];\n            /**\n            * get a formatter for displaying tick values\n            *\n            * @param count Aproximate representative values to return\n            */\n            tickFormat(count: number): (n: number) => string;\n        }\n\n        export interface SqrtScale extends GenericQuantitativeScale<SqrtScale> { }\n\n        export interface PowScale extends GenericQuantitativeScale<PowScale> { }\n\n        export interface LogScale extends GenericQuantitativeScale<LogScale> { }\n\n        export interface OrdinalScale extends GenericScale<OrdinalScale> {\n            rangePoints(interval: any[], padding?: number): OrdinalScale;\n            rangeBands(interval: any[], padding?: number, outerPadding?: number): OrdinalScale;\n            rangeRoundBands(interval: any[], padding?: number, outerPadding?: number): OrdinalScale;\n            rangeBand(): number;\n            rangeExtent(): any[];\n        }\n\n        export interface QuantizeScale extends GenericScale<QuantizeScale> { }\n\n        export interface ThresholdScale extends GenericScale<ThresholdScale> { }\n\n        export interface QuantileScale extends GenericScale<QuantileScale> {\n            quantiles(): any[];\n        }\n\n        export interface TimeScale extends GenericScale<TimeScale> {\n            (value: Date): number;\n            invert(value: number): Date;\n            rangeRound: (values: any[]) => TimeScale;\n            interpolate: {\n                (): D3.Transition.Interpolate;\n                (factory: D3.Transition.InterpolateFactory): TimeScale;\n            };\n            clamp(clamp: boolean): TimeScale;\n            ticks: {\n                (count: number): any[];\n                (range: D3.Time.Range, count: number): any[];\n            };\n            tickFormat(count: number): (n: number) => string;\n            nice(count?: number): TimeScale;\n        }\n    }\n\n    // Behaviour\n    export module Behavior {\n        export interface Behavior{\n            /**\n            * Constructs a new drag behaviour\n            */\n            drag(): Drag;\n            /**\n            * Constructs a new zoom behaviour\n            */\n            zoom(): Zoom;\n        }\n\n        export interface Zoom {\n            /**\n            * Applies the zoom behavior to the specified selection,\n            * registering the necessary event listeners to support\n            * panning and zooming.\n            */\n            (selection: _Selection<any>): void;\n\n            /**\n            * Registers a listener to receive events\n            *\n            * @param type Enent name to attach the listener to\n            * @param listener Function to attach to event\n            */\n            on: (type: string, listener: (data: any, index?: number) => any) => Zoom;\n\n            /**\n            * Gets or set the current zoom scale\n            */\n            scale: {\n                /**\n                * Get the current current zoom scale\n                */\n                (): number;\n                /**\n                * Set the current current zoom scale\n                *\n                * @param origin Zoom scale\n                */\n                (scale: number): Zoom;\n            };\n\n            /**\n            * Gets or set the current zoom translation vector\n            */\n            translate: {\n                /**\n                * Get the current zoom translation vector\n                */\n                (): number[];\n                /**\n                * Set the current zoom translation vector\n                *\n                * @param translate Tranlation vector\n                */\n                (translate: number[]): Zoom;\n            };\n\n            /**\n            * Gets or set the allowed scale range\n            */\n            scaleExtent: {\n                /**\n                * Get the current allowed zoom range\n                */\n                (): number[];\n                /**\n                * Set the allowable zoom range\n                *\n                * @param extent Allowed zoom range\n                */\n                (extent: number[]): Zoom;\n            };\n\n            /**\n            * Gets or set the X-Scale that should be adjusted when zooming\n            */\n            x: {\n                /**\n                * Get the X-Scale\n                */\n                (): D3.Scale.Scale;\n                /**\n                * Set the X-Scale to be adjusted\n                *\n                * @param x The X Scale\n                */\n                (x: D3.Scale.Scale): Zoom;\n\n            };\n\n            /**\n            * Gets or set the Y-Scale that should be adjusted when zooming\n            */\n            y: {\n                /**\n                * Get the Y-Scale\n                */\n                (): D3.Scale.Scale;\n                /**\n                * Set the Y-Scale to be adjusted\n                *\n                * @param y The Y Scale\n                */\n                (y: D3.Scale.Scale): Zoom;\n            };\n        }\n\n        export interface Drag {\n            /**\n            * Execute drag method\n            */\n            (): any;\n\n            /**\n            * Registers a listener to receive events\n            *\n            * @param type Enent name to attach the listener to\n            * @param listener Function to attach to event\n            */\n            on: (type: string, listener: (data: any, index?: number) => any) => Drag;\n\n            /**\n            * Gets or set the current origin accessor function\n            */\n            origin: {\n                /**\n                * Get the current origin accessor function\n                */\n                (): any;\n                /**\n                * Set the origin accessor function\n                *\n                * @param origin Accessor function\n                */\n                (origin?: any): Drag;\n            };\n        }\n    }\n\n    // Geography\n    export module Geo {\n        export interface Geo {\n            /**\n            * create a new geographic path generator\n            */\n            path(): Path;\n            /**\n            * create a circle generator.\n            */\n            circle(): Circle;\n            /**\n            * compute the spherical area of a given feature.\n            */\n            area(feature: any): number;\n            /**\n            * compute the latitude-longitude bounding box for a given feature.\n            */\n            bounds(feature: any): number[][];\n            /**\n            * compute the spherical centroid of a given feature.\n            */\n            centroid(feature: any): number[];\n            /**\n            * compute the great-arc distance between two points.\n            */\n            distance(a: number[], b: number[]): number;\n            /**\n            * interpolate between two points along a great arc.\n            */\n            interpolate(a: number[], b: number[]): (t: number) => number[];\n            /**\n            * compute the length of a line string or the circumference of a polygon.\n            */\n            length(feature: any): number;\n            /**\n            * create a standard projection from a raw projection.\n            */\n            projection(raw: RawProjection): Projection;\n            /**\n            * create a standard projection from a mutable raw projection.\n            */\n            projectionMutator(rawFactory: RawProjection): ProjectionMutator;\n            /**\n            * the Albers equal-area conic projection.\n            */\n            albers(): Projection;\n            /**\n            * a composite Albers projection for the United States.\n            */\n            albersUsa(): Projection;\n            /**\n            * the azimuthal equal-area projection.\n            */\n            azimuthalEqualArea: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the azimuthal equidistant projection.\n            */\n            azimuthalEquidistant: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the conic conformal projection.\n            */\n            conicConformal: {\n                (): Projection;\n                raw(phi1:number, phi2:number): RawProjection;\n            }\n            /**\n            * the conic equidistant projection.\n            */\n            conicEquidistant: {\n                (): Projection;\n                raw(phi1:number, phi2:number): RawProjection;\n            }\n            /**\n            * the conic equal-area (a.k.a. Albers) projection.\n            */\n            conicEqualArea: {\n                (): Projection;\n                raw(phi1:number, phi2:number): RawProjection;\n            }\n            /**\n            * the equirectangular (plate carreé) projection.\n            */\n            equirectangular: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the gnomonic projection.\n            */\n            gnomonic: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the spherical Mercator projection.\n            */\n            mercator: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the azimuthal orthographic projection.\n            */\n            orthographic: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the azimuthal stereographic projection.\n            */\n            stereographic: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * the transverse Mercator projection.\n            */\n            transverseMercator: {\n                (): Projection;\n                raw: RawProjection;\n            }\n            /**\n            * convert a GeoJSON object to a geometry stream.\n            */\n            stream(object: GeoJSON, listener: Stream): void;\n            /**\n            *\n            */\n            graticule(): Graticule;\n            /**\n            *\n            */\n            greatArc(): GreatArc;\n            /**\n            *\n            */\n            rotation(rotation: number[]): Rotation;\n        }\n\n        export interface Path {\n            /**\n            * Returns the path data string for the given feature\n            */\n            (feature: any, index?: any): string;\n            /**\n            * get or set the geographic projection.\n            */\n            projection: {\n                /**\n                * get the geographic projection.\n                */\n                (): Projection;\n                /**\n                * set the geographic projection.\n                */\n                (projection: Projection): Path;\n            }\n            /**\n            * get or set the render context.\n            */\n            context: {\n                /**\n                * return an SVG path string invoked on the given feature.\n                */\n                (): string;\n                /**\n                * sets the render context and returns the path generator\n                */\n                (context: Context): Path;\n            }\n            /**\n            * Computes the projected area\n            */\n            area(feature: any): any;\n            /**\n            * Computes the projected centroid\n            */\n            centroid(feature: any): any;\n            /**\n            * Computes the projected bounding box\n            */\n            bounds(feature: any): any;\n            /**\n            * get or set the radius to display point features.\n            */\n            pointRadius: {\n                /**\n                * returns the current radius\n                */\n                (): number;\n                /**\n                * sets the radius used to display Point and MultiPoint features to the specified number\n                */\n                (radius: number): Path;\n                /**\n                * sets the radius used to display Point and MultiPoint features to the specified number\n                */\n                (radius: (feature: any, index: number) => number): Path;\n            }\n        }\n\n        export interface Context {\n            beginPath(): any;\n            moveTo(x: number, y: number): any;\n            lineTo(x: number, y: number): any;\n            arc(x: number, y: number, radius: number, startAngle: number, endAngle: number): any;\n            closePath(): any;\n        }\n\n        export interface Circle {\n            (...args: any[]): GeoJSON;\n            origin: {\n                (): number[];\n                (origin: number[]): Circle;\n                (origin: (...args: any[]) => number[]): Circle;\n            }\n            angle: {\n                (): number;\n                (angle: number): Circle;\n            }\n            precision: {\n                (): number;\n                (precision: number): Circle;\n            }\n        }\n\n        export interface Graticule{\n            (): GeoJSON;\n            lines(): GeoJSON[];\n            outline(): GeoJSON;\n            extent: {\n                (): number[][];\n                (extent: number[][]): Graticule;\n            }\n            minorExtent: {\n                (): number[][];\n                (extent: number[][]): Graticule;\n            }\n            majorExtent: {\n                (): number[][];\n                (extent: number[][]): Graticule;\n            }\n            step: {\n                (): number[][];\n                (extent: number[][]): Graticule;\n            }\n            minorStep: {\n                (): number[][];\n                (extent: number[][]): Graticule;\n            }\n            majorStep: {\n                (): number[][];\n                (extent: number[][]): Graticule;\n            }\n            precision: {\n                (): number;\n                (precision: number): Graticule;\n            }\n        }\n\n        export interface GreatArc {\n            (): GeoJSON;\n            distance(): number;\n            source: {\n                (): any;\n                (source: any): GreatArc;\n            }\n            target: {\n                (): any;\n                (target: any): GreatArc;\n            }\n            precision: {\n                (): number;\n                (precision: number): GreatArc;\n            }\n        }\n\n        export interface GeoJSON {\n            coordinates: number[][];\n            type: string;\n        }\n\n        export interface RawProjection {\n            (lambda: number, phi: number): number[];\n            invert?(x: number, y: number): number[];\n        }\n\n        export interface Projection {\n            (coordinates: number[]): number[];\n            invert?(point: number[]): number[];\n            rotate: {\n                (): number[];\n                (rotation: number[]): Projection;\n            };\n            center: {\n                (): number[];\n                (location: number[]): Projection;\n            };\n            parallels: {\n                (): number[];\n                (location: number[]): Projection;\n            };\n            translate: {\n                (): number[];\n                (point: number[]): Projection;\n            };\n            scale: {\n                (): number;\n                (scale: number): Projection;\n            };\n            clipAngle: {\n                (): number;\n                (angle: number): Projection;\n            };\n            clipExtent: {\n                (): number[][];\n                (extent: number[][]): Projection;\n            };\n            precision: {\n                (): number;\n                (precision: number): Projection;\n            };\n            stream(listener?: Stream): Stream;\n        }\n\n        export interface Stream {\n            point(x: number, y: number, z?: number): void;\n            lineStart(): void;\n            lineEnd(): void;\n            polygonStart(): void;\n            polygonEnd(): void;\n            sphere(): void;\n        }\n\n        export interface Rotation extends Array<any> {\n            (location: number[]): Rotation;\n            invert(location: number[]): Rotation;\n        }\n\n        export interface ProjectionMutator {\n            (lambda: number, phi: number): Projection;\n        }\n    }\n\n    // Geometry\n    export module Geom {\n        export interface Geom {\n            voronoi<T>(): Voronoi<T>;\n            /**\n            * compute the Voronoi diagram for the specified points.\n            */\n            voronoi(vertices: Vertice[]): Polygon[];\n            /**\n            * compute the Delaunay triangulation for the specified points.\n            */\n            delaunay(vertices?: Vertice[]): Polygon[];\n            /**\n            * constructs a quadtree for an array of points.\n            */\n            quadtree(): QuadtreeFactory;\n            /**\n            * Constructs a new quadtree for the specified array of points.\n            */\n            quadtree(points: Point[], x1: number, y1: number, x2: number, y2: number): Quadtree;\n            /**\n            * Constructs a new quadtree for the specified array of points.\n            */\n            quadtree(points: Point[], width: number, height: number): Quadtree;\n            /**\n            * Returns the input array of vertices with additional methods attached\n            */\n            polygon(vertices:Vertice[]): Polygon;\n            /**\n            * creates a new hull layout with the default settings.\n            */\n            hull(): Hull;\n\n            hull(vertices:Vertice[]): Vertice[];\n        }\n\n        export interface Vertice extends Array<number> {\n            /**\n            * Returns the angle of the vertice\n            */\n            angle?: number;\n        }\n\n        export interface Polygon extends Array<Vertice> {\n            /**\n            * Returns the signed area of this polygon\n            */\n            area(): number;\n            /**\n            * Returns a two-element array representing the centroid of this polygon.\n            */\n            centroid(): number[];\n            /**\n            * Clips the subject polygon against this polygon\n            */\n            clip(subject: Polygon): Polygon;\n        }\n\n        export interface QuadtreeFactory {\n            /**\n            * Constructs a new quadtree for the specified array of points.\n            */\n            (): Quadtree;\n            /**\n            * Constructs a new quadtree for the specified array of points.\n            */\n            (points: Point[], x1: number, y1: number, x2: number, y2: number): Quadtree;\n            /**\n            * Constructs a new quadtree for the specified array of points.\n            */\n            (points: Point[], width: number, height: number): Quadtree;\n\n            x: {\n                (): (d: any) => any;\n                (accesor: (d: any) => any): QuadtreeFactory;\n\n            }\n            y: {\n                (): (d: any) => any;\n                (accesor: (d: any) => any): QuadtreeFactory;\n\n            }\n            size(): number[];\n            size(size: number[]): QuadtreeFactory;\n            extent(): number[][];\n            extent(points: number[][]): QuadtreeFactory;\n        }\n\n        export interface Quadtree {\n            /**\n            * Adds a new point to the quadtree.\n            */\n            add(point: Point): void;\n            visit(callback: any): void;\n        }\n\n        export interface Point {\n            x: number;\n            y: number;\n        }\n\n        export interface Voronoi<T> {\n            /**\n            * Compute the Voronoi diagram for the specified data.\n            */\n            (data: T[]): Polygon[];\n            /**\n            * Compute the graph links for the Voronoi diagram for the specified data.\n            */\n            links(data: T[]): Layout.GraphLink[];\n            /**\n            * Compute the triangles for the Voronoi diagram for the specified data.\n            */\n            triangles(data: T[]): number[][];\n            x: {\n                /**\n                * Get the x-coordinate accessor.\n                */\n                (): (data: T, index ?: number) => number;\n\n                /**\n                * Set the x-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: T, index: number) => number): Voronoi<T>;\n\n                /**\n                * Set the x-coordinate to a constant.\n                *\n                * @param constant The new constant value.\n                */\n                (constant: number): Voronoi<T>;\n            }\n            y: {\n                /**\n                * Get the y-coordinate accessor.\n                */\n                (): (data: T, index ?: number) => number;\n\n                /**\n                * Set the y-coordinate accessor.\n                *\n                * @param accessor The new accessor function\n                */\n                (accessor: (data: T, index: number) => number): Voronoi<T>;\n\n                /**\n                * Set the y-coordinate to a constant.\n                *\n                * @param constant The new constant value.\n                */\n                (constant: number): Voronoi<T>;\n            }\n            clipExtent: {\n                /**\n                * Get the clip extent.\n                */\n                (): number[][];\n                /**\n                * Set the clip extent.\n                *\n                * @param extent The new clip extent.\n                */\n                (extent: number[][]): Voronoi<T>;\n            }\n            size: {\n                /**\n                * Get the size.\n                */\n                (): number[];\n                /**\n                * Set the size, equivalent to a clip extent starting from (0,0).\n                *\n                * @param size The new size.\n                */\n                (size: number[]): Voronoi<T>;\n            }\n        }\n\n        export interface Hull {\n            (vertices: Vertice[]): Vertice[];\n            x: {\n                (): (d: any) => any;\n                (accesor: (d: any) => any): any;\n            }\n            y: {\n                (): (d: any) => any;\n                (accesor: (d: any) => any): any;\n            }\n        }\n    }\n}\n\ndeclare var d3: D3.Base;\n\ndeclare module \"d3\" {\n    export = d3;\n}\n"]}
//# sourceURL=/home/stefano/.atom/packages/atom-typescript/lib/typings/d3/d3.d.ts
