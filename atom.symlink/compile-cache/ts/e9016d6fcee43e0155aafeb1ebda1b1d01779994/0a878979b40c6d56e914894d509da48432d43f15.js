var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var view = require('./view');
var $ = view.$;
var LineMessageView = (function (_super) {
    __extends(LineMessageView, _super);
    function LineMessageView() {
        _super.apply(this, arguments);
    }
    LineMessageView.content = function () {
        var _this = this;
        return this.div({
            class: 'line-message'
        }, function () {
            _this.div({
                class: 'text-subtle inline-block',
                outlet: 'position',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
            _this.div({
                class: 'message inline-block',
                outlet: 'contents'
            });
            _this.pre({
                class: 'preview',
                outlet: 'code',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
        });
    };
    LineMessageView.prototype.init = function () {
        var message = 'at line ' + this.options.line;
        if (this.options.file !== undefined) {
            message += ', file ' + this.options.file;
        }
        this.position.text(message);
        this.contents.text(this.options.message);
        if (this.options.preview) {
            this.code.text(this.options.preview);
        }
        else {
            this.code.remove();
        }
    };
    LineMessageView.prototype.goToLine = function () {
        this.options.goToLine(this.options.file, this.options.line, this.options.col);
    };
    LineMessageView.prototype.getSummary = function () {
        var pos = this.options.line.toString();
        if (this.options.file !== undefined) {
            pos += ', ' + this.options.file;
        }
        return {
            summary: pos + ' ' + this.options.message,
            rawSummary: true,
            handler: function (element) {
                $(element).css('cursor', 'pointer').click(this.goToLine.bind(this));
            }.bind(this)
        };
    };
    return LineMessageView;
})(view.View);
exports.LineMessageView = LineMessageView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvc3RlZmFuby8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS92aWV3cy9saW5lTWVzc2FnZVZpZXcudHMiLCJzb3VyY2VzIjpbIi9ob21lL3N0ZWZhbm8vLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi9tYWluL2F0b20vdmlld3MvbGluZU1lc3NhZ2VWaWV3LnRzIl0sIm5hbWVzIjpbIkxpbmVNZXNzYWdlVmlldyIsIkxpbmVNZXNzYWdlVmlldy5jb25zdHJ1Y3RvciIsIkxpbmVNZXNzYWdlVmlldy5jb250ZW50IiwiTGluZU1lc3NhZ2VWaWV3LmluaXQiLCJMaW5lTWVzc2FnZVZpZXcuZ29Ub0xpbmUiLCJMaW5lTWVzc2FnZVZpZXcuZ2V0U3VtbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxJQUFJLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFDaEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQW9CZixJQUFhLGVBQWU7SUFBU0EsVUFBeEJBLGVBQWVBLFVBQStCQTtJQUEzREEsU0FBYUEsZUFBZUE7UUFBU0MsOEJBQXNCQTtJQWtFM0RBLENBQUNBO0lBNURVRCx1QkFBT0EsR0FBZEE7UUFBQUUsaUJBc0JDQTtRQXJCR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDWkEsS0FBS0EsRUFBRUEsY0FBY0E7U0FDeEJBLEVBQUVBO1lBQ0NBLEtBQUlBLENBQUNBLEdBQUdBLENBQUNBO2dCQUNMQSxLQUFLQSxFQUFFQSwwQkFBMEJBO2dCQUNqQ0EsTUFBTUEsRUFBRUEsVUFBVUE7Z0JBQ2xCQSxLQUFLQSxFQUFFQSxVQUFVQTtnQkFDakJBLEtBQUtBLEVBQUVBLGtCQUFrQkE7YUFDNUJBLENBQUNBLENBQUNBO1lBQ0hBLEtBQUlBLENBQUNBLEdBQUdBLENBQUNBO2dCQUNMQSxLQUFLQSxFQUFFQSxzQkFBc0JBO2dCQUM3QkEsTUFBTUEsRUFBRUEsVUFB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L3ZpZXcnKTtcbnZhciAkID0gdmlldy4kO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld09wdGlvbnMge1xuICAgIC8qKiBUaGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IGdvb2QgZ290byBuZXh0IC8gZ290byBwcmV2aW91cyBsb2dpY1xuICAgICAqICBXZSBpbmZvcm0gdGhlIHBhcmVudCBhYm91dCBvdXIgbmF2aWdhdGlvblxuICAgICAqL1xuICAgIGdvVG9MaW5lOiAoZmlsZVBhdGg6IHN0cmluZywgbGluZTogbnVtYmVyLCBjb2w6IG51bWJlcikgPT4gYW55O1xuICAgIC8qKiB5b3VyIG1lc3NhZ2UgdG8gdGhlIHBlb3BsZSAqL1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAvKiogd2hhdCBsaW5lIGFyZSB3ZSB0YWxraW5nIGFib3V0PyAqL1xuICAgIGxpbmU6IG51bWJlcjtcbiAgICAvKiogd2hpY2ggY29sdW1uICovXG4gICAgY29sOiBudW1iZXI7XG4gICAgLyoqIHNvLCB3YXMgdGhhdCBpbiBzb21lIG90aGVyIGZpbGU/ICovXG4gICAgZmlsZTogc3RyaW5nO1xuICAgIC8qKiBsZXRzIHlvdSBkaXNwbGF5IGEgY29kZSBzbmlwcGV0IGluc2lkZSBhIHByZSB0YWcgKi9cbiAgICBwcmV2aWV3OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBMaW5lTWVzc2FnZVZpZXcgZXh0ZW5kcyB2aWV3LlZpZXc8Vmlld09wdGlvbnM+IHtcblxuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xuICAgIHByaXZhdGUgcG9zaXRpb246IEpRdWVyeTtcbiAgICBwcml2YXRlIGNvbnRlbnRzOiBKUXVlcnk7XG4gICAgcHJpdmF0ZSBjb2RlOiBKUXVlcnk7XG4gICAgc3RhdGljIGNvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpdih7XG4gICAgICAgICAgICBjbGFzczogJ2xpbmUtbWVzc2FnZSdcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXYoe1xuICAgICAgICAgICAgICAgIGNsYXNzOiAndGV4dC1zdWJ0bGUgaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICBvdXRsZXQ6ICdwb3NpdGlvbicsXG4gICAgICAgICAgICAgICAgY2xpY2s6ICdnb1RvTGluZScsXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdjdXJzb3I6IHBvaW50ZXI7J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmRpdih7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdtZXNzYWdlIGlubGluZS1ibG9jaycsXG4gICAgICAgICAgICAgICAgb3V0bGV0OiAnY29udGVudHMnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5wcmUoe1xuICAgICAgICAgICAgICAgIGNsYXNzOiAncHJldmlldycsXG4gICAgICAgICAgICAgICAgb3V0bGV0OiAnY29kZScsXG4gICAgICAgICAgICAgICAgY2xpY2s6ICdnb1RvTGluZScsXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdjdXJzb3I6IHBvaW50ZXI7J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gJ2F0IGxpbmUgJyArIHRoaXMub3B0aW9ucy5saW5lO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9ICcsIGZpbGUgJyArIHRoaXMub3B0aW9ucy5maWxlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zaXRpb24udGV4dChtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb250ZW50cy50ZXh0KHRoaXMub3B0aW9ucy5tZXNzYWdlKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuY29kZS50ZXh0KHRoaXMub3B0aW9ucy5wcmV2aWV3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29kZS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdvVG9MaW5lKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZ29Ub0xpbmUodGhpcy5vcHRpb25zLmZpbGUsIHRoaXMub3B0aW9ucy5saW5lLCB0aGlzLm9wdGlvbnMuY29sKTtcbiAgICB9XG5cbiAgICBnZXRTdW1tYXJ5KCkge1xuICAgICAgICB2YXIgcG9zID0gdGhpcy5vcHRpb25zLmxpbmUudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvcyArPSAnLCAnICsgdGhpcy5vcHRpb25zLmZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1bW1hcnk6IHBvcyArICcgJyArIHRoaXMub3B0aW9ucy5tZXNzYWdlLFxuICAgICAgICAgICAgcmF3U3VtbWFyeTogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgICAgICAgICAgICAgICAgLmNsaWNrKHRoaXMuZ29Ub0xpbmUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgfTtcbiAgICB9XG5cbn1cbiJdfQ==
//# sourceURL=/home/stefano/.atom/packages/atom-typescript/lib/main/atom/views/lineMessageView.ts
