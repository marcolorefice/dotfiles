{"name":"angular-2-typeScript-snippets","author":{"name":"Gregor Woiwode","email":"gregor.woiwode@gmail.com","url":"https://github.com/gregonnet"},"version":"0.4.6","description":"Angular 2 TypeSctipt Snippets for Atom.","keywords":["angular2","typescript","snippets","productivity"],"repository":{"type":"git","url":"git+https://github.com/GregOnNet/atom-angular-2-typeScript-snippets.git"},"license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{},"readme":"# Angular 2 TypeScript Snippets for Atom\n\nThis extension for Atom adds snippets for Angular 2 for TypeScript and HTML.\n\n## Usage\n\nType part of a snippet, press `enter`, and the snippet unfolds.\n\n### TypeScript Snippets\n\n|snippet|explanation|\n|-------|-----------|\n|[ng2-component-root](#ng2-component-root)|Angular 2 root App component|\n|[ng2-bootstrap](#ng2-bootstrap)          |Angular 2 bootstraping, for main.ts|\n|[ng2-component](#ng2-component)          |Angular 2 component|\n|[ng2-directive](#ng2-directive)          |Angular 2 directive|\n|[ng2-pipe](#ng2-pipe)                    |Angular 2 pipe|\n|[ng2-routes](#ng2-routes)                |Angular 2 @Routes|\n|[ng2-route-path](#ng2-route-path)        |Angular 2 routing path|\n|[ng2-service](#ng2-service)              |Angular 2 service|\n|[ng2-subscribe](#ng2-subscribe)          |Angular 2 observable|\n|[ng2-rx-map](#ng2-rx-map)                |RxJs map-operator gets imported|\n\n### HTML Snippets\n\n|snippet                          |\n|---------------------------------|\n|[ng2-ngClass](#ng2-ngclass)      |\n|[ng2-ngFor](#ng2-ngfor)          |\n|[ng2-ngIf](#ng2-ngif)            |\n|[ng2-ngModel](#ng2-ngmodel)      |\n|[ng2-property](#ng2-property)    |\n|[ng2-event](#ng2-event)          |\n|[ng2-routerLink](#ng2-routerlink)|\n|[ng2-ngStyle](#ng2-ngstyle)      |\n|[ng2-ngSwitch](#ng2-ngswitch)    |\n\nAlternatively, press `Ctrl`+`Space` (Windows, Linux) or `Cmd`+`Space` (OSX) to activate snippets from within the editor.\n\n## Known Issues\n\nIt seems that you need to have a `tsconfig.json` to get the TypeScript snippets to work.\n\n## Snippets in Detail\n\nNo one wants to buy a pig in a poke.\nThe following section will show you what the provided snippets actually do for you.\n\n### ng2-component-root\n\n`ng2-component-root` gives you a component that you want as entry point for your application.\nIt also sets up Routing, the HTTP client and RxJS.\nPer default the RxJs library is referenced.\n\n```ts\nimport { Component } from '@angular/core';\nimport { HTTP_PROVIDERS } from '@angular/http';\nimport { Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';\nimport 'rxjs/Rx'; // load the full rxjs\n\n@Component({\n  moduleId: module.id,\n  selector: '<selector>',\n  templateUrl: '<template-name>.component.html',\n  directives: [ROUTER_DIRECTIVES],\n  providers: [\n    HTTP_PROVIDERS,\n    ROUTER_PROVIDERS\n  ]\n})\n@Routes([\n\n])\nexport class AppComponent {}\n```\n\n### ng2-bootstrap\n\n`ng2-bootstrap` allows you to start your root component to get your app up and running.\nIt also prepares `enableProdMode()` for you.\n\n```ts\nimport { enableProdMode } from '@angular/core';\nimport { bootstrap } from '@angular/platform-browser-dynamic';\n\nimport { <component-name> } from './<reference-path-of-module>.component';\n\n// enableProdMode();\n\nbootstrap(<component-name>)\n  .then(success => console.log(`Bootstrap success`))\n  .catch(error => console.log(error));\n```\n\n### ng2-component\n\n`ng2-component` provides a skeleton for an Angular 2 Component.\nIt saves you time typing the mandatory Decorator properties.\n\n```ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  moduleId: module.id,\n  selector: '<selector>',\n  templateUrl: '<component-name>.component.html',\n})\nexport class <ComponentName>Component implements OnInit {\n  constructor() {  }\n\n  ngOnInit() {}\n}\n```\n\n### ng2-import\n\n`ng2-import` gives you a shorthand writing import-statements.\n\n```ts\nimport {<Module or Component>} from '<path to component>';\n```\n\n### ng2-directive\n\n`ng2-directive` provides a skeleton for an Angular 2 Attribute or Structural Directive.\n\n```ts\nimport { Directive, Input } from '@angular/core';\n\n@Directive({ selector: '[<selector>]' })\nexport class [DirectiveName]Directive { }\n```\n\n### ng2-pipe\n\n`ng2-pipe` provides a skeleton for an Angular 2 Pipe.\n\n```ts\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: '<pipe-name>'\n})\nexport class <PipeName>Pipe implements PipeTransform {\n  transform(value: <value-type>, args: any[]) : <value-type> {\n    return ;\n  }\n}\n```\n\n### ng2-routes\n\n`ng2-routes` creates the `@Routes` decorator with a single route in it.\n\n```ts\n@Routes([\n  { path: '/<route>', component: <component-name> }\n])\n```\n\n### ng2-route-path\n\n`ng2-route-path` adds a single route to `@Routes`.\n**Use** this snippet inside the `@Routes` decorator.\n\n```ts\n{ path: '/<route>', component: <component-name> }\n```\n\n### ng2-service\n\n`ng2-service` provides a skeleton for an Angular 2 Service.\n\n```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class <service-name>Service {\n  constructor() {  }\n}\n```\n\n### ng2-subscribe\n\n`ng2-subscribe` gives you a shorthand to call a service function, that returns a observable.\nThe `subscribe` method is also created for you. So you can assign the response quickly.\n\n```ts\nthis.<service-name>.<service-function>\n    .subscribe(<response> => this.<assign-target> = <response>});\n```\n\n### ng2-rx-map\n\n`ng2-rx-map` simply creates the import statement to reference the map operator of RxJs.\n\n```ts\nimport 'rxjs/add/operator/map';\n```\n\n### ng2-ngClass\n\nThis snippet inserts the `ngClass` directive.\n\n```html\n<div [ngClass]=\"cssClass: expression\"></div>\n```\n\n### ng2-ngFor\n\nThis snippet inserts the `ngFor` directive.\n\n```html\n<div *ngFor=\"let {1:$item} of list\"></div>\n```\n\n### ng2-ngIf\n\nThis snippet inserts the `ngIf` directive.\n\n```html\n<div *ngIf=\"expression\"></div>\n```\n\n### ng2-ngModel\n\nThis snippet inserts the `ngModel` directive.\n\n```html\n<div [(ngModel)]=\"binding\"></div>\n```\n\n### ng2-property\n\nThis snippet inserts the skeleton for a property binding directive.\n\n```html\n<div [property]=\"value\"></div>\n```\n\n### ng2-event\n\nThis snippet inserts the skeleton for a event binding directive.\n\n```html\n<div (event)=\"callback()\"></div>\n```\n\n### ng2-routerLink\n\nThis snippet inserts the `routerLink` directive.\n\n```html\n<a [routerLink]=\"routeName\"></a>\n```\n\n### ng2-ngStyle\n\nThis snippet inserts the `ngStyle` directive.\n\n```html\n<div [ngStyle]=\"'style': expression\"></div>\n```\n\n### ng2-ngSwitch\n\nThis snippet inserts the `ngSwitch` directive.\n\n```html\n<div [ngSwitch]=\"conditionExpression\">\n  <div *ngSwitchWhen=\"expression\">output</div>\n  <div *ngSwitchDefault>output2</div>\n</div>\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/GregOnNet/atom-angular-2-typeScript-snippets/issues"},"homepage":"https://github.com/GregOnNet/atom-angular-2-typeScript-snippets#readme","_id":"angular-2-typeScript-snippets@0.4.6","_shasum":"d2348e3d485be824376ef762f8d3340a7453b5b4","_resolved":"file:../d-116724-26611-trlibn/package.tgz","_from":"../d-116724-26611-trlibn/package.tgz"}