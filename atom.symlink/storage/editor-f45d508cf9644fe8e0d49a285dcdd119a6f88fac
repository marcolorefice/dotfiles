{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":838,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/n4z4/Downloads/ElasticProgress/js"],"buffers":[{"text":"$(document).ready(function() {\n\t\t$(\".Download\").eq(0).ElasticProgress({\n\t\t\t\tbuttonSize: 60,\n\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\tcolorBg: \"#adeca8\",\n\t\t\t\tcolorFg: \"#7cc576\",\n\t\t\t\tonClick: function(event) {\n\t\t\t\t\t\tconsole.log(\"onClick\");\n\t\t\t\t\t\t$(this).ElasticProgress(\"open\");\n\t\t\t\t},\n\t\t\t\tonOpen: function(event) {\n\t\t\t\t\t\tconsole.log(\"onOpen\");\n\t\t\t\t\t\tfakeLoading($(this));\n\t\t\t\t},\n\t\t\t\tonComplete: function(event) {\n\t\t\t\t\t\tconsole.log(\"onComplete\");\n\t\t\t\t},\n\t\t\t\tonClose: function(event) {\n\t\t\t\t\t\tconsole.log(\"onClose\");\n\t\t\t\t},\n\t\t\t\tonFail: function(event) {\n\t\t\t\t\t\tconsole.log(\"onFail\");\n\t\t\t\t\t\t$(this).ElasticProgress(\"open\");\n\t\t\t\t},\n\t\t\t\tonCancel: function(event) {\n\t\t\t\t\t\tconsole.log(\"onCancel\");\n\t\t\t\t\t\t$(this).ElasticProgress(\"open\");\n\t\t\t\t}\n\t\t});\n\n\t\t$(\".Download\").eq(1).ElasticProgress({\n\t\t\t\talign: \"center\",\n\t\t\t\tfontFamily: \"Roboto\",\n\t\t\t\tcolorFg: \"#77c2ff\",\n\t\t\t\tcolorBg: \"#4e80dd\",\n\t\t\t\tbleedTop: 110,\n\t\t\t\tbleedBottom: 40,\n\t\t\t\tbuttonSize: 100,\n\t\t\t\tlabelTilt: 70,\n\t\t\t\tarrowDirection: \"up\",\n\t\t\t\tonClick: function() {\n\t\t\t\t\t\t$(this).ElasticProgress(\"open\");\n\t\t\t\t\t\t//$(this).ElasticProgress(\"close\");\n\t\t\t\t},\n\t\t\t\tonOpen: function() {\n\t\t\t\t\t\tfakeLoading($(this))\n\t\t\t\t},\n\t\t\t\tonCancel: function() {\n\t\t\t\t\t\t$(this).ElasticProgress(\"close\");\n\t\t\t\t},\n\t\t\t\tonComplete: function() {\n\t\t\t\t\t\tvar $obj = $(this)\n\n\t\t\t\t\t\t$obj.ElasticProgress(\"close\");\n\t\t\t\t}\n\t\t});\n\n\t\t$(\".Download\").eq(2).ElasticProgress({\n\t\t\t\talign: \"center\",\n\t\t\t\tcolorFg: \"#686e85\",\n\t\t\t\tcolorBg: \"#b4bad2\",\n\t\t\t\thighlightColor: \"#ffab91\",\n\t\t\t\twidth: Math.min($(window).width()/2 - 100, 600),\n\t\t\t\tbarHeight: 10,\n\t\t\t\tlabelHeight: 50,\n\t\t\t\tlabelWobbliness: 0,\n\t\t\t\tbleedTop: 120,\n\t\t\t\tbleedRight: 100,\n\t\t\t\tbuttonSize: 60,\n\t\t\t\tfontFamily: \"Arvo\",\n\t\t\t\tbarStretch: 0,\n\t\t\t\tbarInset: 4,\n\t\t\t\tbarElasticOvershoot: 1,\n\t\t\t\tbarElasticPeriod: 0.6,\n\t\t\t\ttextFail: \"Download Failed\",\n\t\t\t\ttextComplete: \"Download Complete\",\n\t\t\t\tarrowHangOnFail: false,\n\t\t\t\tonClick: function() {\n\t\t\t\t\t\t$(this).ElasticProgress(\"open\");\n\t\t\t\t},\n\t\t\t\tonOpen: function() {\n\t\t\t\t\t\tfakeLoading($(this))\n\t\t\t\t},\n\t\t\t\tonComplete: function() {\n\t\t\t\t\t\tvar $obj = $(this)\n\n\t\t\t\t\t\tTweenMax.delayedCall(1.5, function() {\n\t\t\t\t\t\t\t\t$obj.ElasticProgress(\"close\");\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t});\n\n\t\tvar e = new ElasticProgress(document.querySelectorAll('.Download')[3], {\n\t\t\t\tcolorFg: \"#ed7499\",\n\t\t\t\tcolorBg: \"#635c73\",\n\t\t\t\thighlightColor: \"#ed7499\",\n\t\t\t\tbarHeight: 14,\n\t\t\t\tbarInset: 10,\n\t\t\t\tfontFamily: \"Indie Flower\"\n\t\t});\n\t\te.onClick(function() {\n\t\t\t\te.open();\n\t\t})\n\t\te.onOpen(function() {\n\t\t\t\tfakeLoading(e, 2, 0.5);\n\t\t});\n\t\te.onFail(function() {\n\t\t\t\te.close();\n\t\t})\n\n\t\tfunction fakeLoading($obj, speed, failAt) {\n\t\t\t\tif (typeof speed == \"undefined\") speed = 2;\n\t\t\t\tif (typeof failAt == \"undefined\") failAt = -1;\n\t\t\t\tvar v = 0;\n\t\t\t\tvar l = function() {\n\t\t\t\t\t\tif (failAt > -1) {\n\t\t\t\t\t\t\t\tif (v >= failAt) {\n\t\t\t\t\t\t\t\t\t\tif (typeof $obj.jquery != \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\t$obj.ElasticProgress(\"fail\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t$obj.fail();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv += Math.pow(Math.random(), 2) * 0.1 * speed;\n\n\t\t\t\t\t\tif (typeof $obj.jquery != \"undefined\") {\n\t\t\t\t\t\t\t\t$obj.ElasticProgress(\"setValue\", v);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$obj.setValue(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v < 1) {\n\t\t\t\t\t\t\t\tTweenMax.delayedCall(0.05 + (Math.random() * 0.14), l)\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tl();\n\t\t}\n});\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/n4z4/Downloads/ElasticProgress/js/main.js","digestWhenLastPersisted":"957bc620dbe3055b4e1df2581332673f4789397f","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ElasticProgress = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\narguments[4][2][0].apply(exports,arguments)\n},{\"dup\":2}],4:[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  this.length = 0\n  this.parent = undefined\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n},{\"base64-js\":1,\"ieee754\":8,\"is-array\":10}],5:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nfunction isBuffer(arg) {\n  return Buffer.isBuffer(arg);\n}\nexports.isBuffer = isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n}).call(this,require(\"buffer\").Buffer)\n},{\"buffer\":4}],6:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n},{}],8:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],9:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],10:[function(require,module,exports){\n\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n},{}],11:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],12:[function(require,module,exports){\n(function (process){\n'use strict';\nmodule.exports = nextTick;\n\nfunction nextTick(fn) {\n  var args = new Array(arguments.length - 1);\n  var i = 0;\n  while (i < args.length) {\n    args[i++] = arguments[i];\n  }\n  process.nextTick(function afterTick() {\n    fn.apply(null, args);\n  });\n}\n\n}).call(this,require('_process'))\n},{\"_process\":13}],13:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],14:[function(require,module,exports){\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n},{\"./_stream_readable\":16,\"./_stream_writable\":18,\"core-util-is\":5,\"inherits\":9,\"process-nextick-args\":12}],15:[function(require,module,exports){\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n},{\"./_stream_transform\":17,\"core-util-is\":5,\"inherits\":9}],16:[function(require,module,exports){\n(function (process){\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n\n\n/*<replacement>*/\nvar Stream;\n(function (){try{\n  Stream = require('st' + 'ream');\n}catch(_){}finally{\n  if (!Stream)\n    Stream = require('events').EventEmitter;\n}}())\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function')\n    this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function() {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (ret !== null)\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!(Buffer.isBuffer(chunk)) &&\n      typeof chunk !== 'string' &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      processNextTick(emitReadable_, stream);\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    processNextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined))\n      return;\n    else if (!state.objectMode && (!chunk || !chunk.length))\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }; }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n}).call(this,require('_process'))\n},{\"./_stream_duplex\":14,\"_process\":13,\"buffer\":4,\"core-util-is\":5,\"events\":6,\"inherits\":9,\"isarray\":11,\"process-nextick-args\":12,\"string_decoder/\":20,\"util\":2}],17:[function(require,module,exports){\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined)\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function')\n      this._transform = options.transform;\n\n    if (typeof options.flush === 'function')\n      this._flush = options.flush;\n  }\n\n  this.once('prefinish', function() {\n    if (typeof this._flush === 'function')\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n},{\"./_stream_duplex\":14,\"core-util-is\":5,\"inherits\":9}],18:[function(require,module,exports){\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n\n\n/*<replacement>*/\nvar Stream;\n(function (){try{\n  Stream = require('st' + 'ream');\n}catch(_){}finally{\n  if (!Stream)\n    Stream = require('events').EventEmitter;\n}}())\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function (){try {\nObject.defineProperty(WritableState.prototype, 'buffer', {\n  get: require('util-deprecate')(function() {\n    return this.getBuffer();\n  }, '_writableState.buffer is deprecated. Use ' +\n      '_writableState.getBuffer() instead.')\n});\n}catch(_){}}());\n\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function')\n      this._write = options.write;\n\n    if (typeof options.writev === 'function')\n      this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n\n  if (!(Buffer.isBuffer(chunk)) &&\n      typeof chunk !== 'string' &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function')\n    cb = nop;\n\n  if (state.ended)\n    writeAfterEnd(this, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.bufferedRequest)\n      clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string')\n    encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',\n'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']\n.indexOf((encoding + '').toLowerCase()) > -1))\n    throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync)\n    processNextTick(cb, er);\n  else\n    cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      processNextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var buffer = [];\n    var cbs = [];\n    while (entry) {\n      cbs.push(entry.callback);\n      buffer.push(entry);\n      entry = entry.next;\n    }\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    doWrite(stream, state, true, state.length, buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null)\n      state.lastBufferedRequest = null;\n  }\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined)\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(state) {\n  return (state.ending &&\n          state.length === 0 &&\n          state.bufferedRequest === null &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      processNextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n\n},{\"./_stream_duplex\":14,\"buffer\":4,\"core-util-is\":5,\"events\":6,\"inherits\":9,\"process-nextick-args\":12,\"util-deprecate\":25}],19:[function(require,module,exports){\nvar Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n},{\"./lib/_stream_duplex.js\":14,\"./lib/_stream_passthrough.js\":15,\"./lib/_stream_readable.js\":16,\"./lib/_stream_transform.js\":17,\"./lib/_stream_writable.js\":18}],20:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":4}],21:[function(require,module,exports){\nfunction SVGPathData(content) {\n  this.commands = SVGPathData.parse(content);\n}\n\nSVGPathData.prototype.encode = function() {\n  return SVGPathData.encode(this.commands);\n};\n\nSVGPathData.prototype.round = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.ROUND].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.toAbs = function() {\n  return this.transform(SVGPathData.Transformer.TO_ABS);\n};\n\nSVGPathData.prototype.toRel = function() {\n  return this.transform(SVGPathData.Transformer.TO_REL);\n};\n\nSVGPathData.prototype.translate = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.TRANSLATE].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.scale = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.SCALE].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.rotate = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.ROTATE].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.matrix = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.MATRIX].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.skewX = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.SKEW_X].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.skewY = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.SKEW_Y].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.xSymetry = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.X_AXIS_SIMETRY].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.ySymetry = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.Y_AXIS_SIMETRY].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.aToC = function() {\n  return this.transform.apply(this, [SVGPathData.Transformer.A_TO_C].concat(\n    [].slice.call(arguments, 0)));\n};\n\nSVGPathData.prototype.transform = function(transformFunction) {\n  var newCommands = []\n    , transformFunction = transformFunction.apply(null, [].slice.call(arguments, 1))\n    , curCommands = []\n    , commands = this.commands;\n  for(var i=0, ii=commands.length; i<ii; i++) {\n    curCommands = transformFunction(commands[i]);\n    if(curCommands instanceof Array) {\n      newCommands = newCommands.concat(curCommands);\n    } else {\n      newCommands.push(curCommands);\n    }\n  }\n  this.commands = newCommands;\n  return this;\n};\n\n// Static methods\nSVGPathData.encode = function(commands) {\n  var content = '', encoder = new SVGPathData.Encoder();\n  encoder.on('readable', function () {\n    var str;\n    do {\n      str = encoder.read();\n      if(str !== null) {\n        content += str;\n      }\n    } while(str !== null);\n  });\n  encoder.write(commands);\n  encoder.end();\n  return content;\n};\n\nSVGPathData.parse = function(content) {\n  var commands = [], parser = new SVGPathData.Parser();\n  parser.on('readable', function () {\n    var command;\n    do {\n      command = parser.read();\n      if(command !== null) {\n        commands.push(command);\n      }\n    } while(command !== null);\n  });\n  parser.write(content);\n  parser.end();\n  return commands;\n};\n\n// Commands static vars\nSVGPathData.CLOSE_PATH = 1;\nSVGPathData.MOVE_TO = 2;\nSVGPathData.HORIZ_LINE_TO = 4;\nSVGPathData.VERT_LINE_TO = 8;\nSVGPathData.LINE_TO = 16;\nSVGPathData.CURVE_TO = 32;\nSVGPathData.SMOOTH_CURVE_TO = 64;\nSVGPathData.QUAD_TO = 128;\nSVGPathData.SMOOTH_QUAD_TO = 256;\nSVGPathData.ARC = 512;\nSVGPathData.DRAWING_COMMANDS =\n  SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO | SVGPathData.LINE_TO |\n  SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO | SVGPathData.QUAD_TO |\n  SVGPathData.SMOOTH_QUAD_TO | SVGPathData.ARC;\n\n// Export the main contructor first (tests are failing otherwise)\nmodule.exports = SVGPathData;\n\n// Expose the internal constructors\nSVGPathData.Parser = require('./SVGPathDataParser.js');\nSVGPathData.Encoder = require('./SVGPathDataEncoder.js');\nSVGPathData.Transformer = require('./SVGPathDataTransformer.js');\n\n\n},{\"./SVGPathDataEncoder.js\":22,\"./SVGPathDataParser.js\":23,\"./SVGPathDataTransformer.js\":24}],22:[function(require,module,exports){\n(function (Buffer){\n// Encode SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n\n// Access to SVGPathData constructor\nvar SVGPathData = require('./SVGPathData.js');\n\n// TransformStream inherance required modules\nvar TransformStream = require('readable-stream').Transform;\nvar util = require('util');\n\n// Private consts : Char groups\nvar WSP = ' ';\n\n// Inherit of writeable stream\nutil.inherits(SVGPathDataEncoder, TransformStream);\n\n// Constructor\nfunction SVGPathDataEncoder(options) {\n\n  // Ensure new were used\n  if(!(this instanceof SVGPathDataEncoder)) {\n    return new SVGPathDataEncoder(options);\n  }\n\n  // Parent constructor\n  TransformStream.call(this, {\n    objectMode: true\n  });\n\n  // Setting objectMode separately\n  this._writableState.objectMode = true;\n  this._readableState.objectMode = false;\n\n}\n\n\n// Read method\nSVGPathDataEncoder.prototype._transform = function(commands, encoding, done) {\n  var str = '';\n  if(!(commands instanceof Array)) {\n    commands = [commands];\n  }\n  for(var i=0, j=commands.length; i<j; i++) {\n    // Horizontal move to command\n    if(commands[i].type === SVGPathData.CLOSE_PATH) {\n      str += 'z';\n      continue;\n    // Horizontal move to command\n    } else if(commands[i].type === SVGPathData.HORIZ_LINE_TO) {\n      str += (commands[i].relative?'h':'H') +\n        commands[i].x;\n    // Vertical move to command\n    } else if(commands[i].type === SVGPathData.VERT_LINE_TO) {\n      str += (commands[i].relative?'v':'V') +\n        commands[i].y;\n    // Move to command\n    } else if(commands[i].type === SVGPathData.MOVE_TO) {\n      str += (commands[i].relative?'m':'M') +\n        commands[i].x + WSP + commands[i].y;\n    // Line to command\n    } else if(commands[i].type === SVGPathData.LINE_TO) {\n      str += (commands[i].relative?'l':'L') +\n        commands[i].x + WSP + commands[i].y;\n    // Curve to command\n    } else if(commands[i].type === SVGPathData.CURVE_TO) {\n      str += (commands[i].relative?'c':'C') +\n        commands[i].x2 + WSP + commands[i].y2 +\n        WSP + commands[i].x1 + WSP + commands[i].y1 +\n        WSP + commands[i].x + WSP + commands[i].y;\n    // Smooth curve to command\n    } else if(commands[i].type === SVGPathData.SMOOTH_CURVE_TO) {\n      str += (commands[i].relative?'s':'S') +\n        commands[i].x2 + WSP + commands[i].y2 +\n        WSP + commands[i].x + WSP + commands[i].y;\n    // Quadratic bezier curve to command\n    } else if(commands[i].type === SVGPathData.QUAD_TO) {\n      str += (commands[i].relative?'q':'Q') +\n        commands[i].x1 + WSP + commands[i].y1 +\n        WSP + commands[i].x + WSP + commands[i].y;\n    // Smooth quadratic bezier curve to command\n    } else if(commands[i].type === SVGPathData.SMOOTH_QUAD_TO) {\n      str += (commands[i].relative?'t':'T') +\n        commands[i].x + WSP + commands[i].y;\n    // Elliptic arc command\n    } else if(commands[i].type === SVGPathData.ARC) {\n      str += (commands[i].relative?'a':'A') +\n        commands[i].rX + WSP + commands[i].rY +\n        WSP + commands[i].xRot +\n        WSP + commands[i].lArcFlag + WSP + commands[i].sweepFlag +\n        WSP + commands[i].x + WSP + commands[i].y;\n    // Unkown command\n    } else {\n      this.emit('error', new Error('Unexpected command type \"' +\n        commands[i].type + '\" at index ' + i + '.'));\n    }\n  }\n  this.push(new Buffer(str, 'utf8'));\n  done();\n};\n\nmodule.exports = SVGPathDataEncoder;\n\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"./SVGPathData.js\":21,\"buffer\":4,\"readable-stream\":19,\"util\":27}],23:[function(require,module,exports){\n(function (Buffer){\n// Parse SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n\n// Access to SVGPathData constructor\nvar SVGPathData = require('./SVGPathData.js');\n\n// TransformStream inherance required modules\nvar TransformStream = require('readable-stream').Transform;\nvar util = require('util');\n\n// Private consts : Char groups\nvar WSP = [' ', '\\t', '\\r', '\\n'];\nvar DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nvar SIGNS = ['-', '+'];\nvar EXPONENTS = ['e', 'E'];\nvar DECPOINT = ['.'];\nvar FLAGS = ['0', '1'];\nvar COMMA = [','];\nvar COMMANDS = [\n  'm', 'M', 'z', 'Z', 'l', 'L', 'h', 'H', 'v', 'V', 'c', 'C',\n  's', 'S', 'q', 'Q', 't', 'T', 'a', 'A'\n];\n\n// Inherit of transform stream\nutil.inherits(SVGPathDataParser, TransformStream);\n\n// Constructor\nfunction SVGPathDataParser(options) {\n\n  // Ensure new were used\n  if(!(this instanceof SVGPathDataParser)) {\n    return new SVGPathDataParser(options);\n  }\n\n  // Parent constructor\n  TransformStream.call(this, {\n    objectMode: true\n  });\n\n  // Setting objectMode separately\n  this._writableState.objectMode = false;\n  this._readableState.objectMode = true;\n\n  // Parsing vars\n  this.state = SVGPathDataParser.STATE_COMMAS_WSPS;\n  this.curNumber = '';\n  this.curCommand = null;\n  this._flush = function(callback) {\n    this._transform(new Buffer(' '), 'utf-8', function() {});\n    // Adding residual command\n    if(null !== this.curCommand) {\n      if(this.curCommand.invalid) {\n        this.emit('error',\n          new SyntaxError('Unterminated command at the path end.'));\n      }\n      this.push(this.curCommand);\n      this.curCommand = null;\n      this.state ^= this.state&SVGPathDataParser.STATE_COMMANDS_MASK;\n    }\n    callback();\n  };\n  this._transform = function(chunk, encoding, callback) {\n    var str = chunk.toString(encoding !== 'buffer' ? encoding : 'utf8');\n    for(var i=0, j=str.length; i<j; i++) {\n      // White spaces parsing\n      if(this.state&SVGPathDataParser.STATE_WSP ||\n        this.state&SVGPathDataParser.STATE_WSPS) {\n          if(-1 !== WSP.indexOf(str[i])) {\n            this.state ^= this.state&SVGPathDataParser.STATE_WSP;\n            // any space stops current number parsing\n            if('' !== this.curNumber) {\n              this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;\n            } else {\n              continue;\n            }\n          }\n      }\n      // Commas parsing\n      if(this.state&SVGPathDataParser.STATE_COMMA ||\n        this.state&SVGPathDataParser.STATE_COMMAS) {\n          if(-1 !== COMMA.indexOf(str[i])) {\n            this.state ^= this.state&SVGPathDataParser.STATE_COMMA;\n            // any comma stops current number parsing\n            if('' !== this.curNumber) {\n              this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;\n            } else {\n              continue;\n            }\n          }\n      }\n      // Numbers parsing : -125.25e-125\n      if(this.state&SVGPathDataParser.STATE_NUMBER) {\n        // Reading the sign\n        if((this.state&SVGPathDataParser.STATE_NUMBER_MASK) ===\n          SVGPathDataParser.STATE_NUMBER) {\n          this.state |= SVGPathDataParser.STATE_NUMBER_INT |\n            SVGPathDataParser.STATE_NUMBER_DIGITS;\n          if(-1 !== SIGNS.indexOf(str[i])) {\n            this.curNumber += str[i];\n            continue;\n          }\n        }\n        // Reading the exponent sign\n        if(this.state&SVGPathDataParser.STATE_NUMBER_EXPSIGN) {\n          this.state ^= SVGPathDataParser.STATE_NUMBER_EXPSIGN;\n          this.state |= SVGPathDataParser.STATE_NUMBER_DIGITS;\n          if(-1 !== SIGNS.indexOf(str[i])) {\n            this.curNumber += str[i];\n            continue;\n          }\n        }\n        // Reading digits\n        if(this.state&SVGPathDataParser.STATE_NUMBER_DIGITS) {\n          if(-1 !== DIGITS.indexOf(str[i])) {\n            this.curNumber += str[i];\n            continue;\n          }\n          this.state ^= SVGPathDataParser.STATE_NUMBER_DIGITS;\n        }\n        // Ended reading left side digits\n        if(this.state&SVGPathDataParser.STATE_NUMBER_INT) {\n          this.state ^= SVGPathDataParser.STATE_NUMBER_INT;\n          // if got a point, reading right side digits\n          if(-1 !== DECPOINT.indexOf(str[i])) {\n            this.curNumber += str[i];\n            this.state |= SVGPathDataParser.STATE_NUMBER_FLOAT |\n              SVGPathDataParser.STATE_NUMBER_DIGITS;\n            continue;\n          // if got e/E, reading the exponent\n          } else if(-1 !== EXPONENTS.indexOf(str[i])) {\n            this.curNumber += str[i];\n            this.state |= SVGPathDataParser.STATE_NUMBER_EXP |\n              SVGPathDataParser.STATE_NUMBER_EXPSIGN;\n            continue;\n          }\n          // else we're done with that number\n          this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;\n        }\n        // Ended reading decimal digits\n        if(this.state&SVGPathDataParser.STATE_NUMBER_FLOAT) {\n          this.state ^= SVGPathDataParser.STATE_NUMBER_FLOAT;\n          // if got e/E, reading the exponent\n          if(-1 !== EXPONENTS.indexOf(str[i])) {\n            this.curNumber += str[i];\n            this.state |= SVGPathDataParser.STATE_NUMBER_EXP |\n              SVGPathDataParser.STATE_NUMBER_EXPSIGN;\n            continue;\n          }\n          // else we're done with that number\n          this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;\n        }\n        // Ended reading exponent digits\n        if(this.state&SVGPathDataParser.STATE_NUMBER_EXP) {\n          // we're done with that number\n          this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;\n        }\n      }\n      // New number\n      if(this.curNumber) {\n        // Horizontal move to command (x)\n        if(this.state&SVGPathDataParser.STATE_HORIZ_LINE_TO) {\n          if(null === this.curCommand) {\n            this.push({\n              type: SVGPathData.HORIZ_LINE_TO,\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              x: Number(this.curNumber)\n            });\n          } else {\n            this.curCommand.x = Number(this.curNumber);\n            delete this.curCommand.invalid;\n            this.push(this.curCommand);\n            this.curCommand = null;\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        // Vertical move to command (y)\n        } else if(this.state&SVGPathDataParser.STATE_VERT_LINE_TO) {\n          if(null === this.curCommand) {\n            this.push({\n              type: SVGPathData.VERT_LINE_TO,\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              y: Number(this.curNumber)\n            });\n          } else {\n            this.curCommand.y = Number(this.curNumber);\n            delete this.curCommand.invalid;\n            this.push(this.curCommand);\n            this.curCommand = null;\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        // Move to / line to / smooth quadratic curve to commands (x, y)\n        } else if(this.state&SVGPathDataParser.STATE_MOVE_TO ||\n          this.state&SVGPathDataParser.STATE_LINE_TO ||\n          this.state&SVGPathDataParser.STATE_SMOOTH_QUAD_TO) {\n          if(null === this.curCommand) {\n            this.curCommand = {\n              type: (this.state&SVGPathDataParser.STATE_MOVE_TO ?\n                SVGPathData.MOVE_TO :\n                  (this.state&SVGPathDataParser.STATE_LINE_TO ?\n                    SVGPathData.LINE_TO : SVGPathData.SMOOTH_QUAD_TO\n                  )\n                ),\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              x: Number(this.curNumber)\n            };\n          } else if('undefined' === typeof this.curCommand.x) {\n            this.curCommand.x = Number(this.curNumber);\n          } else {\n            delete this.curCommand.invalid;\n            this.curCommand.y = Number(this.curNumber);\n            this.push(this.curCommand);\n            this.curCommand = null;\n            // Switch to line to state\n            if(this.state&SVGPathDataParser.STATE_MOVE_TO) {\n              this.state ^= SVGPathDataParser.STATE_MOVE_TO;\n              this.state |= SVGPathDataParser.STATE_LINE_TO;\n            }\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        // Curve to commands (x1, y1, x2, y2, x, y)\n        } else if(this.state&SVGPathDataParser.STATE_CURVE_TO) {\n          if(null === this.curCommand) {\n            this.curCommand = {\n              type: SVGPathData.CURVE_TO,\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              invalid: true,\n              x2:  Number(this.curNumber)\n            };\n          } else if('undefined' === typeof this.curCommand.x2) {\n            this.curCommand.x2 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y2) {\n            this.curCommand.y2 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.x1) {\n            this.curCommand.x1 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y1) {\n            this.curCommand.y1 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.x) {\n            this.curCommand.x = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y) {\n            this.curCommand.y = Number(this.curNumber);\n            delete this.curCommand.invalid;\n            this.push(this.curCommand);\n            this.curCommand = null;\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        // Smooth curve to commands (x1, y1, x, y)\n        } else if(this.state&SVGPathDataParser.STATE_SMOOTH_CURVE_TO) {\n          if(null === this.curCommand) {\n            this.curCommand = {\n              type: SVGPathData.SMOOTH_CURVE_TO,\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              invalid: true,\n              x2:  Number(this.curNumber)\n            };\n          } else if('undefined' === typeof this.curCommand.x2) {\n            this.curCommand.x2 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y2) {\n            this.curCommand.y2 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.x) {\n            this.curCommand.x = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y) {\n            this.curCommand.y = Number(this.curNumber);\n            delete this.curCommand.invalid;\n            this.push(this.curCommand);\n            this.curCommand = null;\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        // Quadratic bezier curve to commands (x1, y1, x, y)\n        } else if(this.state&SVGPathDataParser.STATE_QUAD_TO) {\n          if(null === this.curCommand) {\n            this.curCommand = {\n              type: SVGPathData.QUAD_TO,\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              invalid: true,\n              x1:  Number(this.curNumber)\n            };\n          } else if('undefined' === typeof this.curCommand.x1) {\n            this.curCommand.x1 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y1) {\n            this.curCommand.y1 = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.x) {\n            this.curCommand.x = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y) {\n            this.curCommand.y = Number(this.curNumber);\n            delete this.curCommand.invalid;\n            this.push(this.curCommand);\n            this.curCommand = null;\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        // Elliptic arc commands (rX, rY, xRot, lArcFlag, sweepFlag, x, y)\n        } else if(this.state&SVGPathDataParser.STATE_ARC) {\n          if(null === this.curCommand) {\n            this.curCommand = {\n              type: SVGPathData.ARC,\n              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n              invalid: true,\n              rX:  Number(this.curNumber)\n            };\n          } else if('undefined' === typeof this.curCommand.rX) {\n            if(Number(this.curNumber) < 0) {\n              this.emit('error', new SyntaxError('Expected positive number,' +\n                ' got \"' + this.curNumber + '\" at index \"' + i + '\"'));\n            }\n            this.curCommand.rX = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.rY) {\n            if(Number(this.curNumber) < 0) {\n              this.emit('error', new SyntaxError('Expected positive number,' +\n                ' got \"' + this.curNumber + '\" at index \"' + i + '\"'));\n            }\n            this.curCommand.rY = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.xRot) {\n            this.curCommand.xRot = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.lArcFlag) {\n            if('0' !== this.curNumber && '1' !== this.curNumber) {\n              this.emit('error', new SyntaxError('Expected a flag, got \"' +\n                this.curNumber + '\" at index \"' + i + '\"'));\n            }\n            this.curCommand.lArcFlag = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.sweepFlag) {\n            if('0' !== this.curNumber && '1' !== this.curNumber) {\n              this.emit('error', new SyntaxError('Expected a flag, got \"' +\n                this.curNumber +'\" at index \"' + i + '\"'));\n            }\n            this.curCommand.sweepFlag = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.x) {\n            this.curCommand.x = Number(this.curNumber);\n          } else if('undefined' === typeof this.curCommand.y) {\n            this.curCommand.y = Number(this.curNumber);\n            delete this.curCommand.invalid;\n            this.push(this.curCommand);\n            this.curCommand = null;\n          }\n          this.state |= SVGPathDataParser.STATE_NUMBER;\n        }\n        this.curNumber = '';\n        // Continue if a white space or a comma was detected\n        if(-1 !== WSP.indexOf(str[i]) || -1 !== COMMA.indexOf(str[i])) {\n          continue;\n        }\n        // if a sign is detected, then parse the new number\n        if(-1 !== SIGNS.indexOf(str[i])) {\n          this.curNumber = str[i];\n          this.state |= SVGPathDataParser.STATE_NUMBER_INT |\n            SVGPathDataParser.STATE_NUMBER_DIGITS;\n          continue;\n        }\n        // if the decpoint is detected, then parse the new number\n        if(-1 !== DECPOINT.indexOf(str[i])) {\n          this.curNumber = str[i];\n          this.state |= SVGPathDataParser.STATE_NUMBER_FLOAT |\n            SVGPathDataParser.STATE_NUMBER_DIGITS;\n          continue;\n        }\n      }\n      // End of a command\n      if(-1 !== COMMANDS.indexOf(str[i])) {\n        // Adding residual command\n        if(null !== this.curCommand) {\n          if(this.curCommand.invalid) {\n            this.emit('error',\n              new SyntaxError('Unterminated command at index ' + i + '.'));\n          }\n          this.push(this.curCommand);\n          this.curCommand = null;\n          this.state ^= this.state&SVGPathDataParser.STATE_COMMANDS_MASK;\n        }\n      }\n      // Detecting the next command\n      this.state ^= this.state&SVGPathDataParser.STATE_COMMANDS_MASK;\n      // Is the command relative\n      if(str[i]===str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_RELATIVE;\n      } else {\n        this.state ^= this.state&SVGPathDataParser.STATE_RELATIVE;\n      }\n      // Horizontal move to command\n      if('z' === str[i].toLowerCase()) {\n        this.push({\n          type: SVGPathData.CLOSE_PATH\n        });\n        this.state = SVGPathDataParser.STATE_COMMAS_WSPS;\n        continue;\n      // Horizontal move to command\n      } else if('h' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_HORIZ_LINE_TO;\n        this.curCommand = {\n          type: SVGPathData.HORIZ_LINE_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Vertical move to command\n      } else if('v' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_VERT_LINE_TO;\n        this.curCommand = {\n          type: SVGPathData.VERT_LINE_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Move to command\n      } else if('m' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_MOVE_TO;\n        this.curCommand = {\n          type: SVGPathData.MOVE_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Line to command\n      } else if('l' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_LINE_TO;\n        this.curCommand = {\n          type: SVGPathData.LINE_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Curve to command\n      } else if('c' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_CURVE_TO;\n        this.curCommand = {\n          type: SVGPathData.CURVE_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Smooth curve to command\n      } else if('s' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_SMOOTH_CURVE_TO;\n        this.curCommand = {\n          type: SVGPathData.SMOOTH_CURVE_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Quadratic bezier curve to command\n      } else if('q' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_QUAD_TO;\n        this.curCommand = {\n          type: SVGPathData.QUAD_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Smooth quadratic bezier curve to command\n      } else if('t' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_SMOOTH_QUAD_TO;\n        this.curCommand = {\n          type: SVGPathData.SMOOTH_QUAD_TO,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Elliptic arc command\n      } else if('a' === str[i].toLowerCase()) {\n        this.state |= SVGPathDataParser.STATE_ARC;\n        this.curCommand = {\n          type: SVGPathData.ARC,\n          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),\n          invalid: true\n        };\n      // Unkown command\n      } else {\n        this.emit('error', new SyntaxError('Unexpected character \"' + str[i] +\n          '\" at index ' + i + '.'));\n      }\n      // White spaces can follow a command\n      this.state |= SVGPathDataParser.STATE_COMMAS_WSPS |\n        SVGPathDataParser.STATE_NUMBER;\n    }\n    callback();\n  };\n}\n\n// Static consts\n// Parsing states\nSVGPathDataParser.STATE_WSP = 1;\nSVGPathDataParser.STATE_WSPS = 2;\nSVGPathDataParser.STATE_COMMA = 4;\nSVGPathDataParser.STATE_COMMAS = 8;\nSVGPathDataParser.STATE_COMMAS_WSPS =\n  SVGPathDataParser.STATE_WSP | SVGPathDataParser.STATE_WSPS |\n  SVGPathDataParser.STATE_COMMA | SVGPathDataParser.STATE_COMMAS;\nSVGPathDataParser.STATE_NUMBER = 16;\nSVGPathDataParser.STATE_NUMBER_DIGITS = 32;\nSVGPathDataParser.STATE_NUMBER_INT = 64;\nSVGPathDataParser.STATE_NUMBER_FLOAT = 128;\nSVGPathDataParser.STATE_NUMBER_EXP = 256;\nSVGPathDataParser.STATE_NUMBER_EXPSIGN = 512;\nSVGPathDataParser.STATE_NUMBER_MASK = SVGPathDataParser.STATE_NUMBER |\n  SVGPathDataParser.STATE_NUMBER_DIGITS | SVGPathDataParser.STATE_NUMBER_INT |\n  SVGPathDataParser.STATE_NUMBER_EXP | SVGPathDataParser.STATE_NUMBER_FLOAT;\nSVGPathDataParser.STATE_RELATIVE = 1024;\nSVGPathDataParser.STATE_CLOSE_PATH = 2048; // Close path command (z/Z)\nSVGPathDataParser.STATE_MOVE_TO = 4096; // Move to command (m/M)\nSVGPathDataParser.STATE_LINE_TO = 8192; // Line to command (l/L=)\nSVGPathDataParser.STATE_HORIZ_LINE_TO = 16384; // Horizontal line to command (h/H)\nSVGPathDataParser.STATE_VERT_LINE_TO = 32768; // Vertical line to command (v/V)\nSVGPathDataParser.STATE_CURVE_TO = 65536; // Curve to command (c/C)\nSVGPathDataParser.STATE_SMOOTH_CURVE_TO = 131072; // Smooth curve to command (s/S)\nSVGPathDataParser.STATE_QUAD_TO = 262144; // Quadratic bezier curve to command (q/Q)\nSVGPathDataParser.STATE_SMOOTH_QUAD_TO = 524288; // Smooth quadratic bezier curve to command (t/T)\nSVGPathDataParser.STATE_ARC = 1048576; // Elliptic arc command (a/A)\nSVGPathDataParser.STATE_COMMANDS_MASK =\n  SVGPathDataParser.STATE_CLOSE_PATH | SVGPathDataParser.STATE_MOVE_TO |\n  SVGPathDataParser.STATE_LINE_TO | SVGPathDataParser.STATE_HORIZ_LINE_TO |\n  SVGPathDataParser.STATE_VERT_LINE_TO | SVGPathDataParser.STATE_CURVE_TO |\n  SVGPathDataParser.STATE_SMOOTH_CURVE_TO | SVGPathDataParser.STATE_QUAD_TO |\n  SVGPathDataParser.STATE_SMOOTH_QUAD_TO | SVGPathDataParser.STATE_ARC;\n\nmodule.exports = SVGPathDataParser;\n\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"./SVGPathData.js\":21,\"buffer\":4,\"readable-stream\":19,\"util\":27}],24:[function(require,module,exports){\n// Transform SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n\n// Access to SVGPathData constructor\nvar SVGPathData = require('./SVGPathData.js');\n\n// TransformStream inherance required modules\nvar TransformStream = require('readable-stream').Transform;\nvar util = require('util');\n\n// Inherit of transform stream\nutil.inherits(SVGPathDataTransformer, TransformStream);\n\nfunction SVGPathDataTransformer(transformFunction) {\n  // Ensure new were used\n  if(!(this instanceof SVGPathDataTransformer)) {\n    return new (SVGPathDataTransformer.bind.apply(SVGPathDataTransformer,\n      [SVGPathDataTransformer].concat([].slice.call(arguments, 0))));\n  }\n\n  // Transform function needed\n  if('function' !== typeof transformFunction) {\n    throw new Error('Please provide a transform callback to receive commands.');\n  }\n  this._transformer = transformFunction.apply(null, [].slice.call(arguments, 1));\n  if('function' !== typeof this._transformer) {\n    throw new Error('Please provide a valid transform (returning a function).');\n  }\n\n  // Parent constructor\n  TransformStream.call(this, {\n    objectMode: true\n  });\n}\n\nSVGPathDataTransformer.prototype._transform = function(commands, encoding, done) {\n  if(!(commands instanceof Array)) {\n    commands = [commands];\n  }\n  for(var i=0, j=commands.length; i<j; i++) {\n    this.push(this._transformer(commands[i]));\n  }\n  done();\n};\n\n// Predefined transforming functions\n// Rounds commands values\nSVGPathDataTransformer.ROUND = function roundGenerator(roundVal) {\n  roundVal = roundVal || 10e12;\n  return function round(command) {\n    // x1/y1 values\n    if('undefined' !== typeof command.x1) {\n      command.x1 = Math.round(command.x1*roundVal)/roundVal;\n    }\n    if('undefined' !== typeof command.y1) {\n      command.y1 = Math.round(command.y1*roundVal)/roundVal;\n    }\n    // x2/y2 values\n    if('undefined' !== typeof command.x2) {\n      command.x2 = Math.round(command.x2*roundVal)/roundVal;\n    }\n    if('undefined' !== typeof command.y2) {\n      command.y2 = Math.round(command.y2*roundVal)/roundVal;\n    }\n    // Finally x/y values\n    if('undefined' !== typeof command.x) {\n      command.x = Math.round(command.x*roundVal,12)/roundVal;\n    }\n    if('undefined' !== typeof command.y) {\n      command.y = Math.round(command.y*roundVal,12)/roundVal;\n    }\n    return command;\n  };\n};\n\n// Relative to absolute commands\nSVGPathDataTransformer.TO_ABS = function toAbsGenerator() {\n  var prevX = 0, prevY = 0, pathStartX = NaN, pathStartY = NaN;\n  return function toAbs(command) {\n    if(isNaN(pathStartX) && (command.type&SVGPathData.DRAWING_COMMANDS)) {\n      pathStartX = prevX;\n      pathStartY = prevY;\n    }\n    if((command.type&SVGPathData.CLOSE_PATH) && !isNaN(pathStartX)) {\n      prevX = isNaN(pathStartX) ? 0 : pathStartX;\n      prevY = isNaN(pathStartY) ? 0 : pathStartY;\n      pathStartX = NaN;\n      pathStartY = NaN;\n    }\n    if(command.relative) {\n      // x1/y1 values\n      if('undefined' !== typeof command.x1) {\n        command.x1 = prevX + command.x1;\n      }\n      if('undefined' !== typeof command.y1) {\n        command.y1 = prevY + command.y1;\n      }\n      // x2/y2 values\n      if('undefined' !== typeof command.x2) {\n        command.x2 = prevX + command.x2;\n      }\n      if('undefined' !== typeof command.y2) {\n        command.y2 = prevY + command.y2;\n      }\n      // Finally x/y values\n      if('undefined' !== typeof command.x) {\n        command.x = prevX + command.x;\n      }\n      if('undefined' !== typeof command.y) {\n        command.y = prevY + command.y;\n      }\n      command.relative = false;\n    }\n    prevX = ('undefined' !== typeof command.x ? command.x : prevX);\n    prevY = ('undefined' !== typeof command.y ? command.y : prevY);\n    return command;\n  };\n};\n\n// Absolute to relative commands\nSVGPathDataTransformer.TO_REL = function toRelGenerator() {\n  var prevX = 0, prevY = 0;\n  return function toRel(command) {\n    if(!command.relative) {\n      // x1/y1 values\n      if('undefined' !== typeof command.x1) {\n        command.x1 = command.x1 - prevX;\n      }\n      if('undefined' !== typeof command.y1) {\n        command.y1 = command.y1 - prevY;\n      }\n      // x2/y2 values\n      if('undefined' !== typeof command.x2) {\n        command.x2 = command.x2 - prevX;\n      }\n      if('undefined' !== typeof command.y2) {\n        command.y2 = command.y2 - prevY;\n      }\n      // Finally x/y values\n      if('undefined' !== typeof command.x) {\n        command.x = command.x - prevX;\n      }\n      if('undefined' !== typeof command.y) {\n        command.y = command.y - prevY;\n      }\n    command.relative = true;\n    }\n    prevX = ('undefined' !== typeof command.x ? prevX + command.x : prevX);\n    prevY = ('undefined' !== typeof command.y ? prevY + command.y : prevY);\n    return command;\n  };\n};\n\n// SVG Transforms : http://www.w3.org/TR/SVGTiny12/coords.html#TransformList\n// Matrix : http://apike.ca/prog_svg_transform.html\nSVGPathDataTransformer.MATRIX = function matrixGenerator(a, b, c, d, e, f) {\n  var prevX, prevY;\n  if('number' !== typeof a, 'number' !== typeof b,\n    'number' !== typeof c, 'number' !== typeof d,\n    'number' !== typeof e, 'number' !== typeof f) {\n    throw new Error('A matrix transformation requires parameters' +\n      ' [a,b,c,d,e,f] to be set and to be numbers.');\n  }\n  return function matrix(command) {\n    var origX = command.x, origX1 = command.x1, origX2 = command.x2;\n    if('undefined' !== typeof command.x) {\n      command.x =  command.x * a +\n        ('undefined' !== typeof command.y ?\n          command.y : (command.relative ? 0 : prevY || 0)\n        ) * c +\n        (command.relative && 'undefined' !== typeof prevX ? 0 : e);\n    }\n    if('undefined' !== typeof command.y) {\n      command.y = ('undefined' !== typeof origX ?\n          origX : (command.relative ? 0 : prevX || 0)\n        ) * b +\n        command.y * d +\n        (command.relative && 'undefined' !== typeof prevY ? 0 : f);\n    }\n    if('undefined' !== typeof command.x1) {\n      command.x1 = command.x1 * a + command.y1 * c +\n        (command.relative && 'undefined' !== typeof prevX ? 0 : e);\n    }\n    if('undefined' !== typeof command.y1) {\n      command.y1 = origX1 * b + command.y1 * d +\n        (command.relative && 'undefined' !== typeof prevY ? 0 : f);\n    }\n    if('undefined' !== typeof command.x2) {\n      command.x2 = command.x2 * a + command.y2 * c +\n        (command.relative && 'undefined' !== typeof prevX ? 0 : e);\n    }\n    if('undefined' !== typeof command.y2) {\n      command.y2 = origX2 * b + command.y2 * d +\n        (command.relative && 'undefined' !== typeof prevY ? 0 : f);\n    }\n    prevX = ('undefined' !== typeof command.x ?\n      (command.relative ? (prevX || 0) + command.x : command.x) :\n      prevX || 0);\n    prevY = ('undefined' !== typeof command.y ?\n      (command.relative ? (prevY || 0) + command.y : command.y) :\n      prevY || 0);\n    return command;\n  };\n};\n\n// Rotation\nSVGPathDataTransformer.ROTATE = function rotateGenerator(a, x, y) {\n  if('number' !== typeof a) {\n    throw new Error('A rotate transformation requires the parameter a' +\n      ' to be set and to be a number.');\n  }\n  return (function(toOrigin, doRotate, fromOrigin) {\n    return function rotate(command) {\n      return fromOrigin(doRotate(toOrigin(command)));\n    };\n  })(SVGPathDataTransformer.TRANSLATE(-(x || 0), -(y || 0)),\n    SVGPathDataTransformer.MATRIX(Math.cos(a), Math.sin(a),\n      -Math.sin(a), Math.cos(a), 0, 0),\n    SVGPathDataTransformer.TRANSLATE(x || 0, y || 0)\n  );\n};\n\n// Translation\nSVGPathDataTransformer.TRANSLATE = function translateGenerator(dX, dY) {\n  if('number' !== typeof dX) {\n    throw new Error('A translate transformation requires the parameter dX' +\n      ' to be set and to be a number.');\n  }\n  return SVGPathDataTransformer.MATRIX(1, 0, 0, 1, dX, dY || 0);\n};\n\n// Scaling\nSVGPathDataTransformer.SCALE = function scaleGenerator(dX, dY) {\n  if('number' !== typeof dX) {\n    throw new Error('A scale transformation requires the parameter dX' +\n      ' to be set and to be a number.');\n  }\n  return SVGPathDataTransformer.MATRIX(dX, 0, 0, dY || dX, 0, 0);\n};\n\n// Skew\nSVGPathDataTransformer.SKEW_X = function skewXGenerator(a) {\n  if('number' !== typeof a) {\n    throw new Error('A skewX transformation requires the parameter x' +\n      ' to be set and to be a number.');\n  }\n  return SVGPathDataTransformer.MATRIX(1, 0, Math.atan(a), 1, 0, 0);\n};\nSVGPathDataTransformer.SKEW_Y = function skewYGenerator(a) {\n  if('number' !== typeof a) {\n    throw new Error('A skewY transformation requires the parameter y' +\n      ' to be set and to be a number.');\n  }\n  return SVGPathDataTransformer.MATRIX(1, Math.atan(a), 0, 1, 0, 0);\n};\n\n// Symetry througth the X axis\nSVGPathDataTransformer.X_AXIS_SIMETRY = function xSymetryGenerator(xDecal) {\n  return (function(toAbs, scale, translate) {\n    return function xSymetry(command) {\n      return translate(scale(toAbs(command)));\n    };\n  })(SVGPathDataTransformer.TO_ABS(),\n    SVGPathDataTransformer.SCALE(-1, 1),\n    SVGPathDataTransformer.TRANSLATE(xDecal || 0, 0)\n  );\n};\n\n// Symetry througth the Y axis\nSVGPathDataTransformer.Y_AXIS_SIMETRY = function ySymetryGenerator(yDecal) {\n  return (function(toAbs, scale, translate) {\n    return function ySymetry(command) {\n      return translate(scale(toAbs(command)));\n    };\n  })(SVGPathDataTransformer.TO_ABS(),\n    SVGPathDataTransformer.SCALE(1, -1),\n    SVGPathDataTransformer.TRANSLATE(0, yDecal || 0)\n  );\n};\n\n// Convert arc commands to curve commands\nSVGPathDataTransformer.A_TO_C = function a2CGenerator() {\n  var prevX = 0, prevY = 0, args;\n  return (function(toAbs) {\n    return function a2C(command) {\n      var commands = [];\n      command = toAbs(command);\n      if(command.type === SVGPathData.ARC) {\n        args = a2c(prevX, prevY, command.rX, command.rX, command.xRot,\n          command.lArcFlag, command.sweepFlag, command.x, command.y);\n        prevX = command.x; prevY = command.y;\n        for(var i=0, ii=args.length; i<ii; i+=6) {\n          commands.push({\n            type: SVGPathData.CURVE_TO,\n            relative: false,\n            x2: args[i],\n            y2: args[i+1],\n            x1: args[i+2],\n            y1: args[i+3],\n            x: args[i+4],\n            y: args[i+5]\n          });\n        }\n        return commands;\n      } else {\n        prevX = command.x; prevY = command.y;\n        return command;\n      }\n    };\n  })(SVGPathDataTransformer.TO_ABS());\n};\n\nfunction a2c (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n  var PI = Math.PI;\n  // Borrowed from https://github.com/PPvG/svg-path/blob/master/lib/Path.js#L208\n  // that were borrowed from https://github.com/DmitryBaranovskiy/raphael/blob/4d97d4ff5350bb949b88e6d78b877f76ea8b5e24/raphael.js#L2216-L2304\n  // (MIT licensed; http://raphaeljs.com/license.html).\n  // --------------------------------------------------------------------------\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = PI * 120 / 180,\n      rad = PI / 180 * (+angle || 0),\n      res = [],\n      xy,\n      rotate = function (x, y, rad) {\n        var X = x * Math.cos(rad) - y * Math.sin(rad),\n        Y = x * Math.sin(rad) + y * Math.cos(rad);\n        return {x: X, y: Y};\n      };\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n    var cos = Math.cos(PI / 180 * angle),\n        sin = Math.sin(PI / 180 * angle),\n        x = (x1 - x2) / 2,\n        y = (y1 - y2) / 2;\n    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n    var rx2 = rx * rx,\n        ry2 = ry * ry,\n        k = (large_arc_flag == sweep_flag ? -1 : 1) *\n          Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) /\n          (rx2 * y * y + ry2 * x * x))),\n        cx = k * rx * y / ry + (x1 + x2) / 2,\n        cy = k * -ry * x / rx + (y1 + y2) / 2,\n        f1 = Math.asin(((y1 - cy) / ry).toFixed(9)),\n        f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n\n    f1 = x1 < cx ? PI - f1 : f1;\n    f2 = x2 < cx ? PI - f2 : f2;\n    f1 < 0 && (f1 = PI * 2 + f1);\n    f2 < 0 && (f2 = PI * 2 + f2);\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n  var df = f2 - f1;\n  if (Math.abs(df) > _120) {\n    var f2old = f2,\n        x2old = x2,\n        y2old = y2;\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old,\n      [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  var c1 = Math.cos(f1),\n      s1 = Math.sin(f1),\n      c2 = Math.cos(f2),\n      s2 = Math.sin(f2),\n      t = Math.tan(df / 4),\n      hx = 4 / 3 * rx * t,\n      hy = 4 / 3 * ry * t,\n      m1 = [x1, y1],\n      m2 = [x1 + hx * s1, y1 - hy * c1],\n      m3 = [x2 + hx * s2, y2 - hy * c2],\n      m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y :\n        rotate(res[i], res[i + 1], rad).x;\n    }\n    return newres;\n  }\n}\n\nmodule.exports = SVGPathDataTransformer;\n\n\n},{\"./SVGPathData.js\":21,\"readable-stream\":19,\"util\":27}],25:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  if (!global.localStorage) return false;\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],26:[function(require,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],27:[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./support/isBuffer\":26,\"_process\":13,\"inherits\":9}],28:[function(require,module,exports){\nvar extend=require(\"extend\");\n\nmodule.exports=function(obj){\n  return extend(true,{},obj);\n}\n\n},{\"extend\":7}],29:[function(require,module,exports){\nfunction createSVG(width,height){\n  if(typeof width==\"undefined\") width=1200;\n  if(typeof height==\"undefined\") height=1200;\n\n  var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  svg.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n  svg.setAttribute('width', width);\n  svg.setAttribute('height', height);\n  return svg;\n}\n\nmodule.exports=createSVG;\n\n},{}],30:[function(require,module,exports){\nmodule.exports=function(v,min,max){\n  return Math.max(Math.min(v,max),min);\n}\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\nvar CSSPlugin=require('gsap/src/uncompressed/plugins/CSSPlugin');\nvar EasePack=require('gsap/src/uncompressed/easing/EasePack');\nvar TweenLite=require('gsap/src/uncompressed/TweenLite');\nvar SVGPathData=require('svg-pathdata');\nvar extend=require('extend');\nvar clone=require('./clone');\nvar createSVG=require('./create-svg');\nvar gfxOf=require('./gfx-of');\nvar isSet=require('./is-set');\nvar cutoff=require('./cutoff');\nvar pointerEvents=require('./pointer-events');\n\n// Load SVG Graphic\nvar generateGraphic=require('./svg/bt.svg');\n\n// Setup GSAP\n// use either TweenLite or TweenMax, which one is available\nvar Tween=TweenLite;\nif(Object.keys(Tween).length==0){ // if TweenLite is not bundled\n  if(isSet(window.TweenLite))\n    Tween=window.TweenLite;\n  else if(isSet(window.TweenMax))\n    Tween=window.TweenMax;\n  else\n    this.error(\"GSAP could not be found.\");\n}\n\n// Utils\nfunction updatePath(path,pathData){\n  path.setAttribute(\"d\",pathData.encode());\n}\n\nfunction getD(path){\n  return path.getAttribute(\"d\");\n}\n\nfunction getPathData(path){\n  return new SVGPathData(getD(path)).toAbs();\n}\nfunction setVisibility(visible,obj){\n  if(!isSet(obj)){\n    return function(obj){\n      setVisibility(visible,obj);\n    }\n  }\n  Tween.set(obj,{\n    display:visible?\"inline\":\"none\"\n  });\n}\nvar hide=setVisibility(false);\nvar show=setVisibility(true);\n\nfunction setTransformOrigin(origin,obj){\n  if(!isSet(obj)){\n    return function(obj){\n      setTransformOrigin(origin,obj);\n    }\n  }\n  Tween.set(obj,{\n    transformOrigin:origin\n  });\n}\nvar originCenter=setTransformOrigin(\"50% 50%\");\nvar originBottomCenter=setTransformOrigin(\"50% 100%\");\n\nfunction tweenTheseTo(groups,options){\n  var dur=1;\n  var value=0;\n  if(isSet(options.duration)){\n    dur=options.duration;\n    delete options.duration;\n  }\n  if(isSet(options.value)){\n    value=options.value;\n    delete options.value;\n  }\n\n  groups.forEach(function(item){\n    var props={};\n    if(isSet(item.prop)){\n      item.props=item.prop;\n    }\n    if(!Array.isArray(item.props)){\n      item.props=[item.props];\n    }\n    item.props.forEach(function(propName){\n      props[propName]=value;\n    });\n\n    Tween.to(item.obj,dur,extend(\n      props,\n      options\n    ));\n  });\n}\n\nvar defaultOptions={\n  colorFg:\"#fff\",\n  colorBg:\"#000\",\n  background:getComputedStyle(document.body).getPropertyValue(\"background-color\"),\n  highlightColor:\"#08F\",\n\n  progressbar:null,\n  progressbarLabel:\"\",\n\n  buttonSize:-1,\n  width:-1,\n  align:\"center\",\n\n  barStretch:20,\n  barElasticOvershoot:1.8,\n  barElasticPeriod:0.15,\n  barHeight:4,\n  barInset:-0.5,\n\n  labelHeight:53,\n  labelWobbliness:40,\n\n  bleedTop:100,\n  bleedBottom:50,\n  bleedLeft:60,\n  bleedRight:60,\n\n  fontFamily:\"\",\n  fontWeight:\"bold\",\n\n  jumpHeight:50,\n  arrowDirection:\"down\",\n  arrowHangOnFail:true,\n  arrowHangOnCancel:true,\n\n  textComplete:\"Done\",\n  textFail:\"Failed\",\n  textCancel:\"Canceled\",\n\n  onClick:function(event){},\n  onOpen:function(event){},\n  onComplete:function(event){},\n  onClose:function(event){},\n  onFail:function(event){},\n  onCancel:function(event){},\n  onChange:function(event){}\n};\nvar vars={\n  logPrefix:\"ElasticProgress\",\n  eventPrefix:\"elasticProgress.\",\n  options:null,\n  target:null,\n  progress:null,\n  progressbar:null,\n  progressbarLabel:\"\",\n  canvas:null,\n  lastValue:0,\n  value:0,\n  visibleValue:0, // used for tweening the displayed value\n  lastVisibleValue:0,\n  state:{ // default states obj / will be cloned for each instance\n    animating:false,\n    opening:false,\n    open:false,\n    closing:false,\n    completing:false,\n    complete:false,\n    pressed:false,\n    hover:false,\n    focused:false,\n    failing:false,\n    failed:false,\n    calceling:false,\n    canceled:false\n  },\n  graphics:null,\n  buttonRadius:null,\n  buttonScale:null,\n  containerX:null,\n  barOverstretch:0,\n  base:null, // y position of the bar\n  arrowRelativeScale:0.8, // rescaling of the arrow relative to the button\n  arrowRatio:null, // scale of the arrow relative to the button size\n  arrowScale:null, // calculated scale of the arrow\n  arrowPos:null, // calculated pos Y of the arrow\n  arrowUp:false,\n  arrowRotation:null, // initial rotation of the arrow, in case it points up\n  labelScale:null, // calculated scale of the arrow when open\n  labelRegularHeight:53, // default size of the label, used for calculation\n  queue:null // next queued function\n}\n\nvar defaultFontFamily=\"'Helvetica Neue','Helvetica','Arial'\";\n\nfunction ElasticProgress(target,options){\n  if(!isSet(options)){\n    options={};\n  };\n  this.options=extend(\n    {},\n    defaultOptions,\n    options\n  );\n  // shortcut to options\n  options=this.options;\n\n  this.target=target;\n\n  //// setup options\n  // format align in case it's a string\n  // if(typeof options.align==\"string\"){\n  //   switch(options.align){\n  //     case \"left\":\n  //       options.align=0;\n  //       break;\n  //     case \"right\":\n  //       options.align=1;\n  //       break;\n  //     default:\n  //       options.align=0.5;\n  //       break;\n  //   }\n  // }\n  // ... however, align is not supported for now\n  options.align=0.5;\n\n  // width by default is the element's width...\n  if(options.width <= -1){\n    options.width = target.clientWidth;\n  }else{\n    // otherwise it sets the element's width\n    target.style.width = options.width+\"px\";\n  }\n\n  // buttonSize by default is the element's height\n  if(options.buttonSize <= -1){\n    options.buttonSize = target.clientHeight;\n  }else{\n    // otherwise it sets the element's height\n    target.style.height = options.buttonSize+\"px\";\n  }\n\n  var progressbar=target.getAttribute(\"data-progressbar\");\n  if(progressbar!=null){\n    options.progressbar=progressbar;\n  }\n\n  var progressbarLabel=target.getAttribute(\"data-progressbar-label\");\n  if(progressbarLabel!=null){\n    options.progressbarLabel=progressbarLabel;\n  }\n\n  this.graphics={};\n  this.state=clone(this.state);\n\n  this.init();\n}\n\nElasticProgress.prototype=extend(\n  {},\n  vars,{\n  init:function(){\n    var\n      instance=this,\n      options=this.options,\n      target=this.target,\n      state=this.state,\n      graphics=this.graphics;\n\n    this.styleTarget();\n    this.createProgressElement();\n    this.createCanvas();\n    this.setupGraphicsShortcuts();\n\n    // set registration points\n    originCenter([graphics.circle, graphics.overlay, graphics.hitArea, graphics.bgCircle, graphics.overlayCircle,graphics.label]);\n    originBottomCenter(graphics.arrow);\n    originBottomCenter([graphics.arrowHead,graphics.arrowShaft]);\n\n    // hide elements not visible at the start\n    hide([graphics.label, graphics.fillLine, graphics.overlay]);\n\n    this.calculateValues();\n\n    // draw stuff\n    this.updateColors();\n    this.updateBarHeight();\n    this.updateButtonSize();\n    this.updateAlign();\n\n    // format container after formatting the button, cause we have its correct size\n    Tween.set(graphics.container,{\n      transformOrigin:\"50% 50%\",\n      y:options.bleedTop,\n      x:options.bleedLeft\n    });\n    originCenter(graphics.circle);\n\n    graphics.labelText.setAttribute(\"text-anchor\",\"middle\");\n    graphics.labelText.setAttribute(\"font-family\",options.fontFamily+\",\"+defaultFontFamily);\n    graphics.labelText.setAttribute(\"font-weight\",options.fontWeight);\n\n    graphics.hitArea.style.pointerEvents=\"fill\";\n    graphics.hitArea.style.cursor=\"pointer\";\n    graphics.hitAreaCircle.style.fill=\"transparent\";\n\n    this.setupEvents();\n\n    return this;\n  },\n  addToQueue:function(f){\n    this.queue=f;\n  },\n  processQueue:function(){\n    if(this.queue!=null){\n      var q=this.queue;\n      this.queue=null;\n      q.call(this);\n    }\n  },\n  styleTarget:function(){\n    var\n      target=this.target,\n      style=target.style;\n\n    style.border=\"none\";\n    style.background=\"transparent\";\n    style.outline=\"none\";\n    style.pointerEvents=\"none\";\n    style.webkitTapHighlightColor=\"transparent\";\n    style.textAlign=\"left\";\n  },\n  createProgressElement:function(){\n    var\n      options=this.options,\n      target=this.target;\n\n    if(options.progressbar){\n      this.progress=options.progressbar;\n    }else{\n      this.progress=document.createElement(\"progress\");\n      this.progress.style.position=\"absolute\";\n      this.progress.style.left=\"-99999px\";\n      this.progress.setAttribute(\"aria-label\",options.progressbarLabel);\n    }\n    this.progress.setAttribute(\"value\",0);\n    this.progress.setAttribute(\"max\",1);\n    this.progress.setAttribute(\"aria-hidden\",true);\n\n    target.parentNode.insertBefore(this.progress, target.nextSibling);\n  },\n  createCanvas:function(){\n    var options=this.options;\n\n    var svg = createSVG(\n      options.width + options.bleedLeft + options.bleedRight,\n      options.buttonSize + options.bleedTop + options.bleedBottom\n    );\n    svg.appendChild(generateGraphic());\n    this.target.appendChild(svg);\n    svg.style.position=\"relative\";\n    //svg.style.top=-options.bleedTop;\n    svg.style.marginRight=-options.bleedRight+\"px\";\n    svg.style.marginLeft=-options.bleedLeft+\"px\";\n    svg.style.marginTop=-options.bleedTop+\"px\";\n    svg.style.marginBottom=-options.bleedBottom+\"px\";\n\n    this.canvas=svg;\n  },\n  setupGraphicsShortcuts:function(){\n    var\n      graphics=this.graphics,\n      canvas=this.canvas;\n\n    graphics.container         = canvas.querySelector(\"#container\");\n    graphics.hitArea           = canvas.querySelector(\"#hit-area\");\n    graphics.hitAreaCircle     = graphics.hitArea.querySelector(\"path\");\n    graphics.circle            = canvas.querySelector(\"#circle\");\n    graphics.arrow             = canvas.querySelector(\"#arrow\");\n    graphics.arrowHead         = graphics.arrow.querySelector(\"#head\");\n    graphics.arrowShaft        = graphics.arrow.querySelector(\"#line\");\n    graphics.label             = graphics.arrow.querySelector(\"#label\");\n    graphics.labelText         = graphics.label.querySelector(\"text\");\n    graphics.overlay           = canvas.querySelector(\"#overlay\");\n    graphics.overlayCircle     = graphics.overlay.querySelector(\"path\");\n    graphics.bg                = canvas.querySelector(\"#background\");\n    graphics.bgCircle          = graphics.bg.querySelector(\"path\");\n    graphics.line              = canvas.querySelector(\"#border path\");\n    graphics.fillLineContainer = canvas.querySelector(\"#fill-line\");\n    graphics.fillLine          = graphics.fillLineContainer.querySelector(\"path\");\n  },\n  calculateValues:function(){\n    var\n      graphics=this.graphics,\n      options=this.options;\n\n    var originalCircleHeight=graphics.bgCircle.getBBox().height;\n    var originalArrowHeight=graphics.arrow.getBBox().height;\n\n    this.buttonRadius=options.buttonSize/2;\n    this.arrowRatio=((originalArrowHeight/originalCircleHeight)+0.05)*this.arrowRelativeScale;\n    this.buttonScale=options.buttonSize/originalCircleHeight;\n    this.arrowScale=this.buttonScale*this.arrowRelativeScale;\n    this.arrowUp=options.arrowDirection==\"up\";\n    this.arrowPos=options.buttonSize*(1-((1-this.arrowRatio)/2)); // dang\n    var arrowSize=options.buttonSize*this.arrowRatio;\n    if(this.arrowUp) this.arrowPos-=arrowSize;\n    this.arrowRotation=this.arrowUp?180:0;\n    this.base=options.buttonSize/2;\n    this.labelScale=options.labelHeight/this.labelRegularHeight;\n  },\n  updateColors:function(){\n    var\n      graphics = this.graphics,\n      options = this.options;\n\n    Tween.set(gfxOf([graphics.arrowHead, graphics.arrowShaft]),{\n      fill: options.colorFg\n    });\n    Tween.set(gfxOf(graphics.fillLine),{\n      stroke: options.colorFg\n    });\n    Tween.set(gfxOf([graphics.bg, graphics.labelText]),{\n      fill: options.colorBg\n    });\n    Tween.set(gfxOf(graphics.line),{\n      stroke: options.colorBg\n    });\n    Tween.set(gfxOf(graphics.overlay),{\n      fill:options.background\n    });\n  },\n  updateBarHeight:function(){\n    var\n      graphics=this.graphics,\n      options=this.options;\n\n    graphics.line.setAttribute(\"stroke-width\",options.barHeight);\n    graphics.fillLine.setAttribute(\"stroke-width\",options.barHeight-options.barInset);\n  },\n  updateButtonSize:function(){\n    var\n      graphics = this.graphics,\n      options = this.options,\n      r = this.buttonRadius,\n      r2 = options.buttonSize;\n\n    Tween.set([graphics.bgCircle,graphics.overlayCircle],{\n      x:0,\n      y:r,\n      scale:this.buttonScale\n    });\n\n    Tween.set(graphics.arrow,{\n      scale: this.arrowScale,\n      rotation:this.arrowRotation,\n      y: this.arrowPos\n    });\n\n    var linePath=this.getPathPointsCirclingCircle();\n    updatePath(graphics.line,linePath);\n  },\n  getPathPointsCirclingCircle:function(){\n    var\n      options=this.options,\n      graphics=this.graphics,\n      r=this.buttonRadius,\n      r2=r*2;\n\n    var linePath=getPathData(graphics.line);\n    var points=linePath.commands;\n\n    //svg strokes are drawn \"around\" their paths\n    //this offset squishes the line inside the circle a little\n    var offset=(options.barHeight/2)+1;\n    //more or less how far along the x axis the bezier control points have to be from the center of the circle\n    var p=1.318;\n    var rp=(r-offset)*p;\n\n    points[0].x=0;\n    points[0].y=offset;\n\n    points[1].x=0;\n    points[1].y=r2-offset;\n    points[1].x1=-rp;\n    points[1].y1=r2-offset;\n    points[1].x2=-rp;\n    points[1].y2=offset;\n\n    points[2].x=points[0].x;\n    points[2].y=points[0].y;\n    points[2].x1=rp;\n    points[2].y1=offset;\n    points[2].x2=rp;\n    points[2].y2=r2-offset;\n\n    return linePath;\n  },\n  updateAlign:function(){\n    var\n      graphics = this.graphics,\n      options = this.options;\n\n    this.containerX=(options.width*options.align)+(options.buttonSize*(((1-options.align))-0.5));\n    Tween.set([graphics.circle,graphics.arrow],{\n      x:this.containerX\n    });\n\n    Tween.set(graphics.hitArea,{\n      x:options.bleedLeft+this.containerX,\n      y:options.bleedTop+(options.buttonSize/2),\n      scale:this.buttonScale\n    });\n\n  },\n  setupEvents:function(){\n    var\n      instance=this,\n      graphics=this.graphics;\n\n    pointerEvents.on(\"down\",graphics.hitArea,function(event){\n      instance.setState(\"pressed\",true);\n      instance.setState(\"hover\",false);\n    });\n    pointerEvents.on(\"up\",document,function(){\n      instance.setState(\"pressed\",false);\n    });\n    pointerEvents.on(\"mouseover\",graphics.hitArea,function(){\n      instance.setState(\"hover\",true);\n    });\n    pointerEvents.on(\"mouseout\",graphics.hitArea,function(){\n      instance.setState(\"hover\",false);\n    });\n    pointerEvents.on(\"click\",graphics.hitArea,function(event){\n      instance.triggerClick(event);\n    });\n    this.addEventListener(\"keydown\",function(event){\n      if(event.keyCode==\"13\" || event.keyCode==\"32\"){\n        event.preventDefault();\n        this.triggerClick(event);\n      }\n    });\n    this.addEventListener(\"focus\",function(event){\n      this.setState(\"focused\",true);\n    });\n    this.addEventListener(\"blur\",function(event){\n      this.setState(\"focused\",false);\n    });\n\n    this.addEventListener(this.eventPrefix+\"animatingFinish\",this.processQueue);\n\n    this.setupEventHandlers();\n  },\n  triggerClick:function(event){\n    var state=this.state;\n\n    if(!state.open){\n      this.dispatchEvent('click');\n      this.options.onClick.call(this.target,event);\n    }\n  },\n  setupEventHandlers:function(){\n    var options=this.options;\n\n    this.setupEventHandler('openingFinish','onOpen');\n    this.setupEventHandler('closingFinish','onClose');\n    this.setupEventHandler('complete','onComplete');\n    this.setupEventHandler('fail','onFail');\n    this.setupEventHandler('cancel','onCancel');\n    this.setupEventHandler('change','onChange');\n  },\n  setupEventHandler:function(eventType,handler){\n    var\n      instance=this,\n      target=this.target,\n      options=this.options;\n\n    target.addEventListener(this.eventPrefix+eventType,function(event){\n      options[handler].call(target,event);\n    });\n  },\n  addEventListener:function(event,callback){\n    this.target.addEventListener(event,callback.bind(this));\n  },\n  dispatchEvent:function(event){\n    this.target.dispatchEvent(new Event(this.eventPrefix+event));\n  },\n  setState:function(states,value){\n    if(!Array.isArray(states)){\n      states=[states];\n    }\n\n    var hasAnyStateChanged=false;\n    states.forEach(function(name){\n      var previousValue=this.state[name];\n      this.state[name] = value;\n\n      if(value!=previousValue){\n        this.checkStateEvents(name)\n        hasAnyStateChanged=true;\n      }\n\n    },this);\n    if(hasAnyStateChanged){\n      this.dispatchEvent(\"stateChange\");\n    }\n    this.updateStates();\n  },\n  updateStates:function(){\n    var\n      target=this.target,\n      state=this.state,\n      options=this.options,\n      graphics=this.graphics;\n\n    if(state.focused && !state.pressed && !state.open && !state.hover){\n      graphics.hitAreaCircle.setAttribute(\"stroke\",options.highlightColor);\n      Tween.to(graphics.hitAreaCircle,0.05,{attr:{\n        \"stroke-width\":2/Math.max(0.01,this.buttonScale)\n      }})\n    }else{\n      Tween.to(graphics.hitAreaCircle,0.05,{attr:{\n        \"stroke-width\":0\n      }})\n    }\n\n    if(state.pressed && !state.open){\n      Tween.to(graphics.container,0.1,{\n        scale:0.82,\n        ease:Quint.easeOut\n      });\n      Tween.to(graphics.circle,0.1,{\n        scale:1.06,\n        ease:Quint.easeOut\n      });\n    }else{\n      Tween.to([graphics.container,graphics.circle],0.1,{\n        scale:1,\n        ease:Quint.easeOut\n      });\n    }\n\n    if(state.hover && !state.pressed && !state.open){\n      Tween.to(graphics.container,0.2,{\n        scale:1.15,\n        ease:Quint.easeOut\n      });\n      Tween.to(graphics.circle,0.2,{\n        scale:0.92,\n        ease:Quint.easeOut\n      });\n    }else if(!state.pressed){\n      Tween.to([graphics.circle,graphics.container],0.2,{\n        scale:1,\n        ease:Quint.easeOut\n      });\n    }\n\n    if(!state.open){\n      show(graphics.hitArea);\n    }else{\n      hide(graphics.hitArea);\n    }\n  },\n  checkStateEvents:function(name){\n    var\n      instance=this,\n      state=this.state;\n\n    var value=state[name];\n    function checkStateEvent(nameCheck,ifTrue,ifFalse){\n      if(name==nameCheck){\n        instance.dispatchEvent(value?ifTrue:ifFalse);\n      }\n    }\n\n    checkStateEvent(\"open\",\"open\",\"close\");\n    checkStateEvent(\"press\",\"press\",\"release\");\n    checkStateEvent(\"animating\",\"animatingStart\",\"animatingFinish\");\n    checkStateEvent(\"opening\",\"openingStart\",\"openingFinish\");\n    checkStateEvent(\"closing\",\"closingStart\",\"closingFinish\");\n    checkStateEvent(\"failing\",\"failingStart\",\"failingFinish\");\n    checkStateEvent(\"canceling\",\"cancelingStart\",\"cancelingFinish\");\n  },\n  setText:function(text,upsideDown){\n    var graphics=this.graphics;\n\n    if(!isSet(upsideDown)) upsideDown=false;\n    graphics.labelText.textContent=text;\n    if(upsideDown){\n      var labelBBox=graphics.label.getBBox();\n      var arrowShaftBBox=graphics.arrowShaft.getBBox();\n      Tween.set(graphics.label,{\n        x:-parseFloat(graphics.labelText.getAttribute(\"font-size\"))/2,\n        rotation:180\n      })\n    }else{\n      Tween.set(graphics.label,{\n        x:0,\n        rotation:0\n      })\n    }\n  },\n  setPercentage:function(v){\n    this.setText(Math.floor(v*100)+\"%\");\n  },\n  changeText:function(text,upsideDown){\n    var\n      instance=this,\n      graphics=this.graphics;\n\n    var t=0.15;\n    // fade out text\n    Tween.to(graphics.label,t,{\n      opacity:0,\n      onComplete:function(){\n        instance.setText(text,upsideDown);\n        var textBB=graphics.label.getBBox();\n        var boxBB=graphics.arrowShaft.getBBox();\n        var targetSize=textBB.width+40;\n        var targetScale=targetSize/boxBB.width;\n        // resize text box\n        Tween.to(graphics.arrowShaft,t,{\n          scaleX:targetScale,\n          ease:Quad.easeInOut,\n          onComplete:function(){\n            // fade in text\n            Tween.to(graphics.label,t,{\n              opacity:1\n            });\n          }\n        })\n      }\n    })\n  },\n  open:function(){\n    var\n      instance=this,\n      options=this.options,\n      graphics=this.graphics,\n      state=this.state;\n\n    if(state.open && !state.closing && !state.failed && !state.canceled){\n      return false;\n    }\n    if(state.animating){\n      this.addToQueue(this.open);\n      return false;\n    }\n    this.progress.setAttribute(\"aria-hidden\",false);\n\n    Tween.killTweensOf(this);\n    this.setState([\"animating\",\"opening\",\"open\"],true);\n    this.value=this.visibleValue=this.lastValue=this.lastVisibleValue=0;\n\n    if(state.open && (state.failed || state.canceled)){\n      this.setState([\"failed\",\"canceled\"],false);\n\n      hide(graphics.fillLine);\n\n      this.animOpenArrowJump(false);\n      this.changeText(\"0%\");\n      this.animOpenBar();\n\n    }else{\n      this.animOpenOverlay();\n      this.animOpenArrowJump();\n      this.animLabelExpand();\n\n      Tween.delayedCall(0.2,function(){\n        instance.animOpenBar();\n      });\n    }\n\n    Tween.delayedCall(1.3,function(){\n      this.resetFillLine();\n\n      this.setState([\"animating\",\"opening\"],false);\n\n      instance.setValue(instance.value);\n    },null,this);\n\n    return true;\n  },\n  animOpenBar:function(){\n    var\n      graphics=this.graphics,\n      options=this.options,\n      containerX=this.containerX,\n      base=this.base,\n      width=options.width;\n\n    var halfWidth=width/2;\n    var sixthWidth=width/6;\n\n    var linePath = getPathData(graphics.line);\n    var linePoints = linePath.commands;\n\n    var lineStart=linePoints[0];\n    var lineMiddle=linePoints[1];\n    var lineEnd=linePoints[2];\n\n    var baseCurveOffset=(options.buttonSize/4)*3;\n\n    //// expand\n    // x\n    var openDur=0.25;\n    Tween.to(lineStart,openDur,{\n      x:-containerX,\n      ease:Quad.easeOut\n    });\n    Tween.to(lineMiddle,openDur,{\n      x:-containerX+halfWidth,\n      x2:-containerX+sixthWidth,\n      x1:-containerX+sixthWidth+sixthWidth,\n      ease:Quad.easeOut\n    });\n    Tween.to(lineEnd,openDur,{\n      x:-containerX+width,\n      x2:-containerX+halfWidth+sixthWidth,\n      x1:-containerX+halfWidth+sixthWidth+sixthWidth,\n      ease:Quad.easeOut\n    });\n\n    // y\n    tweenTheseTo([\n        {obj:lineStart,prop:\"y\"},\n        {obj:lineMiddle,prop:\"y2\"},\n        {obj:lineEnd,props:[\"y\",\"y1\"]}\n      ],{\n        duration:openDur,\n        value:base,\n        ease:Quad.easeInOut\n      }\n    );\n\n    tweenTheseTo([\n        {obj:lineMiddle,prop:\"y1\"},\n        {obj:lineEnd,prop:\"y2\"}\n      ],{\n        duration:openDur,\n        value:base+baseCurveOffset,\n        ease:Quad.easeInOut\n      }\n    );\n\n    //spring up\n    tweenTheseTo([\n        {obj:lineMiddle,props:[\"y\",\"y1\"]},\n        {obj:lineEnd,prop:\"y2\"}\n      ],{\n        duration:1.05,\n        value:base,\n        delay:0.05,\n        ease:Elastic.easeOut,\n        easeParams:[options.barElasticOvershoot,options.barElasticPeriod]\n      }\n    );\n\n    var updateLinePath=function(){\n      updatePath(graphics.line,linePath)\n    };\n    Tween.to({},1.1,{\n      onUpdate:updateLinePath,\n      onComplete:updateLinePath\n    });\n  },\n  animOpenOverlay:function(){\n    var graphics=this.graphics;\n\n    // \"overlay\" is the the graphic resposible for the \"carving out\" anim\n    // makes overlay visible before setting any of its other properties\n    show(graphics.overlay);\n    // expand the overlay\n    Tween.fromTo(graphics.overlay,0.2,{\n      transformOrigin:\"50% 50%\",\n      scale:0.2\n    },{\n      scale:1,\n      ease:Sine.easeIn,\n      onComplete:function(){\n        hide([graphics.overlay,graphics.bg]);\n      }\n    });\n  },\n  animOpenArrowJump:function(anticipation){\n    var\n      instance=this,\n      graphics=this.graphics,\n      options=this.options;\n\n    if(!isSet(anticipation)) anticipation=true;\n    var delay=anticipation?0.25:0;\n\n    if(anticipation){\n      Tween.to(graphics.arrow,0.4,{\n        y:\"+=\"+(options.buttonSize*0.2),\n        ease:Quad.easeInOut\n      });\n    }\n\n    Tween.to(graphics.arrow,0.75,{\n      x:0,\n      ease:Quad.easeOut,\n      delay:delay\n    });\n    Tween.to(graphics.arrow,0.5,{\n      rotation:0,\n      delay:delay\n    });\n\n    Tween.to(graphics.arrow,0.25,{\n      y:-options.jumpHeight,\n      ease:Quad.easeOut,\n      delay:delay,\n      onComplete:function(){\n        Tween.to(graphics.arrow,0.5,{\n          y:instance.base - (options.barHeight/2),\n          ease:Bounce.easeOut,\n        });\n      }\n    });\n  },\n  animLabelExpand:function(){\n    var\n      instance=this,\n      graphics=this.graphics,\n      options=this.options;\n\n    Tween.to(graphics.arrow,0.5,{\n      scaleX:instance.labelScale,\n      scaleY:instance.labelScale\n    });\n    Tween.to(graphics.arrowHead,0.5,{\n      scale:0.5,\n      ease:Quad.easeInOut\n    });\n    Tween.to(graphics.arrowShaft,0.5,{\n      scaleX:3,\n      y:15,\n      ease:Quad.easeInOut\n    });\n\n    show(graphics.label);\n    this.setText(\"0%\");\n\n    Tween.fromTo(graphics.label,0.5,{\n      scale:0.01,\n      x:0,\n      y:0\n    },{\n      scale:1,\n      x:0,\n      y:15\n    });\n  },\n  resetFillLine:function(){\n    var graphics=this.graphics;\n\n    var fillPath=getPathData(graphics.fillLine);\n    var fillPoints=fillPath.commands;\n\n    fillPoints[0].x = fillPoints[1].x = -this.containerX;\n    fillPoints[0].y = fillPoints[1].y = this.base;\n    updatePath(graphics.fillLine,fillPath);\n\n    show(graphics.fillLine);\n  },\n  close:function(){\n    var\n      options=this.options,\n      state=this.state,\n      graphics=this.graphics;\n\n    if(state.closing || !state.open){\n      return false;\n    }\n    if(state.animating){\n      this.addToQueue(this.close);\n      return false;\n    }\n    this.progress.setAttribute(\"aria-hidden\",true);\n    Tween.killTweensOf(this);\n\n    this.setState([\"animating\",\"closing\"],true);\n\n    this.animCloseArrow();\n    this.animLabelCollapse();\n    this.animCloseBar();\n    Tween.delayedCall(0.31,function(){\n      this.animCloseCircle();\n    },null,this);\n\n    Tween.delayedCall(0.8,function(){\n      this.setState([\"animating\",\"open\",\"closing\",\"failed\",\"canceled\",\"complete\"],false);\n    },null,this);\n\n    return true\n  },\n  animCloseBar:function(){\n    var\n      instance=this,\n      graphics=this.graphics,\n      options=this.options;\n\n    var fillPath=getPathData(graphics.fillLine);\n    var fillPoints=fillPath.commands;\n    Tween.to(fillPoints[0],0.17,{\n      x:fillPoints[1].x,\n      y:fillPoints[1].y,\n      ease:Quad.easeIn,\n      onUpdate:function(){\n        updatePath(graphics.fillLine,fillPath);\n      },\n      onComplete:function(){\n        hide(graphics.fillLine);\n        collapseBar();\n      }\n    });\n\n    var collapseBar=function(){\n      var linePath=getPathData(graphics.line);\n      var linePoints=linePath.commands;\n\n      var t=0.17;\n\n      tweenTheseTo([\n        {obj:linePoints[1],props:[\"y\",\"y1\"]},\n        {obj:linePoints[2],props:[\"y\",\"y2\"]}\n      ],{\n        duration:t/2,\n        value:instance.base,\n        ease:Quad.easeOut\n      });\n\n      tweenTheseTo([\n        {obj:linePoints[0],props:[\"x\"]},\n        {obj:linePoints[1],props:[\"x\",\"x1\",\"x2\"]},\n        {obj:linePoints[2],props:[\"x\",\"x1\",\"x2\"]}\n      ],{\n        duration:t,\n        value:(options.width/2)-instance.containerX,\n        ease:Quad.easeIn,\n      });\n      Tween.to({},t,{\n        onUpdate:function(){\n          updatePath(graphics.line,linePath);\n        },\n        onComplete:collapseBarComplete\n      });\n    }\n    var collapseBarComplete=function(){\n      Tween.delayedCall(0.3,function(){\n        var circlePath=instance.getPathPointsCirclingCircle();\n        updatePath(graphics.line,circlePath);\n      });\n    }\n\n  },\n  animLabelCollapse:function(){\n    var\n      instance=this,\n      graphics=this.graphics,\n      options=this.options;\n\n    Tween.to(graphics.arrow,0.5,{\n      scale:instance.arrowScale\n    });\n    Tween.to(graphics.arrowHead,0.5,{\n      scale:1,\n      ease:Quad.easeInOut\n    });\n    Tween.to(graphics.arrowShaft,0.5,{\n      scaleX:1,\n      y:0,\n      ease:Quad.easeInOut\n    });\n\n    Tween.to(graphics.label,0.5,{\n      scale:0.01,\n      onComplete:function(){\n        hide(graphics.label);\n      }\n    });\n  },\n  animCloseArrow:function(){\n    var\n      instance=this,\n      graphics=this.graphics,\n      options=this.options;\n\n    Tween.to(graphics.arrow,0.5,{\n      x:options.width/2,\n      ease:Quad.easeOut,\n      delay:0,\n      rotation:0\n    });\n\n    Tween.to(graphics.arrow,0.25,{\n      y:-options.jumpHeight,\n      ease:Quad.easeOut,\n      onComplete:function(){\n        Tween.to(graphics.arrow,0.8,{\n          y:instance.arrowPos,\n          scaleY:instance.arrowScale*(instance.arrowUp?-1:1),\n          ease:Elastic.easeOut,\n          easeParams:[1.1,0.6],\n          onComplete:function(){\n            Tween.set(graphics.arrow,{\n              scaleY:instance.arrowScale,\n              rotation:instance.arrowRotation\n            })\n          }\n        });\n      }\n    });\n  },\n  animCloseCircle:function(){\n    var\n      instance=this,\n      graphics=this.graphics;\n\n    show(graphics.bg);\n\n    Tween.fromTo(graphics.bgCircle,0.8,{\n      scale:0.1,\n    },{\n      scale:instance.buttonScale,\n      ease:Elastic.easeOut,\n      easeParams:[1.2,0.7]\n    })\n  },\n  setValue:function(v){\n    var\n      instance=this,\n      options=this.options,\n      graphics=this.graphics,\n      state=this.state;\n\n    if(!state.open){\n      //this.warn(\"The preloader resets the value when it opens. Please call the function 'open' before setting a value.\");\n      return false;\n    }\n    if(state.failed || state.canceled || state.complete || state.animating){\n      return false;\n    }\n\n    // check if the value has changed considering the limits (i.e. do nothing if it goes from 1 to 1.1)\n    var lastValue=this.value;\n    var newValue=cutoff(v,0,1);\n    if(lastValue==newValue){\n      return false;\n    }\n    this.lastValue=lastValue;\n    this.value=newValue;\n    this.progress.setAttribute(\"value\",this.value);\n\n    if(state.opening || state.closing){\n      this.dispatchEvent(\"change\");\n      return true;\n    }\n\n    var d=this.value-this.lastVisibleValue;\n    if(d<0.01 && this.value<1){\n      return true;\n    }\n\n    var t=0.2+(1*Math.abs(d));\n\n    Tween.to(graphics.arrow,t*0.5,{\n      rotation:-d*options.labelWobbliness,\n      ease:Quad.easeOut,\n      onComplete:function(){\n        Tween.to(graphics.arrow,1.5,{\n          rotation:0,\n          ease:Elastic.easeOut,\n          easeParams:[2,0.4]\n        });\n      }\n    });\n\n    Tween.to(this,t*1,{\n      barOverstretch:d*2,\n      ease:Quad.easeInOut,\n      onComplete:function(){\n        Tween.to(instance,1.5,{\n          barOverstretch:0,\n          ease:Elastic.easeOut,\n          easeParams:[2,0.2]\n        });\n      }\n    });\n\n    Tween.to(this,t,{\n      visibleValue:this.value,\n      ease:Quad.easeOut,\n      onUpdate:this.updateValue.bind(this),\n      onComplete:this.updateValue.bind(this)\n    });\n\n    this.dispatchEvent(\"change\");\n    return true;\n  },\n  getValue:function(){\n    return this.value;\n  },\n  updateValue:function(){\n    this.lastVisibleValue=this.visibleValue;\n    this.renderValue(this.visibleValue);\n  },\n  renderValue:function(){\n    var\n      instance=this,\n      state=this.state,\n      options=this.options,\n      graphics=this.graphics,\n      value=this.visibleValue\n\n    if(value>=1 && !state.complete){\n      Tween.killTweensOf(this,{visibleValue:true});\n      this.complete();\n    }else if(value>=1 && state.complete){\n      return false;\n    }\n\n    Tween.to(this,1.5,{\n      onUpdate:this.renderBarStretch.bind(this)\n    })\n\n    this.dispatchEvent(\"valueRender\");\n    this.setPercentage(value);\n  },\n  renderBarStretch:function(v){\n    var\n      instance=this,\n      state=this.state,\n      options=this.options,\n      graphics=this.graphics,\n      value=this.visibleValue\n\n    var stretch=options.barStretch * Math.sin(value*3.14)*(1+this.barOverstretch);\n\n    var middlePoint={\n      x: value * options.width,\n      y: instance.base + stretch\n    };\n\n    var linePath=getPathData(graphics.line);\n    var linePoints=linePath.commands;\n\n    var fillPath=getPathData(graphics.fillLine);\n    var fillPoints=fillPath.commands;\n\n    linePoints[1].x = linePoints[1].x1 = linePoints[2].x2 = fillPoints[1].x = (middlePoint.x - this.containerX);\n    linePoints[1].y = linePoints[1].y1 = linePoints[2].y2 = fillPoints[1].y = middlePoint.y;\n\n    linePoints[1].x2 = linePoints[0].x;\n    linePoints[1].y2 = linePoints[0].y;\n    linePoints[2].x1 = linePoints[2].x;\n    linePoints[2].y1 = linePoints[2].y;\n\n    // avoid line cap bug at the end point\n    if(linePoints[1].x+(options.barHeight/2)>=linePoints[2].x){\n      linePoints[1].x=linePoints[2].x-(options.barHeight/2);\n    }\n\n    updatePath(graphics.fillLine,fillPath);\n    updatePath(graphics.line,linePath);\n\n    Tween.set(graphics.arrow,{\n      x:middlePoint.x,\n      y:middlePoint.y - (options.barHeight/2)\n    });\n  },\n  complete:function(){\n    var\n      instance=this,\n      state=this.state,\n      options=this.options;\n\n    if(!state.open || state.failed || state.complete || state.canceled){\n      return false;\n    }\n    if(state.animating){\n      this.addToQueue(this.complete);\n      return false;\n    }\n    Tween.killTweensOf(this);\n    this.setState([\"animating\",\"completing\",\"complete\"],true);\n    this.dispatchEvent(\"complete\");\n\n    this.changeText(options.textComplete);\n\n    Tween.delayedCall(2.5,function(){\n      instance.setState([\"animating\",\"completing\"],false);\n    });\n\n    return true;\n  },\n  fail:function(){\n    var\n      instance=this,\n      state=this.state,\n      options=this.options;\n\n\n    if(state.failed || state.canceled || state.complete || !state.open || state.closing){\n      return false;\n    }\n\n    if(state.animating){\n      this.addToQueue(this.fail);\n      return false;\n    }\n    Tween.killTweensOf(this);\n    this.setState([\"animating\",\"failed\",\"failing\"],true);\n    this.dispatchEvent(\"fail\");\n\n    if(options.arrowHangOnFail){\n      this.animArrowHang();\n    }\n\n    this.changeText(options.textFail,options.arrowHangOnFail);\n    Tween.delayedCall(2.5,function(){\n      instance.setState([\"animating\",\"failing\"],false);\n    });\n    return true;\n  },\n  cancel:function(){\n    var\n      instance=this,\n      state=this.state,\n      options=this.options;\n\n    if(state.failed || state.complete || state.canceled || !state.open || state.closing){\n      return false;\n    }\n    if(state.animating){\n      this.addToQueue(this.cancel);\n      return false;\n    }\n    Tween.killTweensOf(this);\n    this.setState([\"animating\",\"canceled\",\"canceling\"],true);\n    this.dispatchEvent(\"cancel\");\n\n    if(options.arrowHangOnCancel){\n      this.animArrowHang();\n    }\n\n    this.changeText(options.textCancel,options.arrowHangOnCancel);\n    Tween.delayedCall(2.5,function(){\n      instance.setState([\"canceling\",\"animating\"],false);\n    });\n    return true;\n  },\n  animArrowHang:function(){\n    var\n      instance=this,\n      graphics=this.graphics;\n\n    Tween.killTweensOf(this);\n    Tween.killTweensOf(graphics.arrow);\n\n    Tween.to(graphics.arrow,0.25,{\n      rotation:90,\n      ease:Quad.easeIn,\n      onComplete:function(){\n        Tween.to(graphics.arrow,2,{\n          rotation:180,\n          ease:Elastic.easeOut,\n          easeParams:[1.6,0.4]\n        });\n      }\n    });\n\n    Tween.to(this,0.25,{\n      barOverstretch:1.2,\n      onUpdate:this.renderBarStretch.bind(this),\n      onComplete:function(){\n        Tween.to(instance,1.5,{\n          barOverstretch:0,\n          ease:Elastic.easeOut,\n          easeParams:[1.1,0.4],\n          onUpdate:instance.renderBarStretch.bind(instance)\n        })\n      }\n    });\n  },\n  error:function(msg){\n    console.error(this.logPrefix+\": \"+msg);\n  },\n  warn:function(msg){\n    console.warn(this.logPrefix+\": \"+msg);\n  },\n  log:function(msg){\n    console.log(this.logPrefix+\": \"+msg);\n  }\n});\n\nmodule.exports=ElasticProgress;\n\n},{\"./clone\":28,\"./create-svg\":29,\"./cutoff\":30,\"./gfx-of\":32,\"./is-set\":33,\"./pointer-events\":35,\"./svg/bt.svg\":36,\"extend\":7,\"gsap/src/uncompressed/TweenLite\":3,\"gsap/src/uncompressed/easing/EasePack\":3,\"gsap/src/uncompressed/plugins/CSSPlugin\":3,\"svg-pathdata\":21}],32:[function(require,module,exports){\n// Returns all graphic elements (paths, shapes, text, etc) from a (group of) SVG element(s)\nvar graphicTypes=[\"polygon\",\"polyline\",\"path\",\"circle\",\"rect\",\"text\",\"line\",\"ellipse\"];\n\nmodule.exports=function(elements){\n  if(!Array.isArray(elements)){\n    elements=[elements];\n  }\n  return elements.map(function(svgObj){\n    if(graphicTypes.indexOf(svgObj.nodeName)>-1){\n      return svgObj;\n    }else{\n      return svgObj.querySelectorAll(graphicTypes.join(\",\"));\n    }\n  });\n}\n\n},{}],33:[function(require,module,exports){\nmodule.exports=function(v){\n  return typeof v!=\"undefined\";\n}\n\n},{}],34:[function(require,module,exports){\n// Interface for the actual Elastic Progress\n\n'use strict';\n\nvar extend=require('extend');\nvar toArray=require('./to-array');\nvar isSet=require('./is-set');\nvar ElasticProgressGfx=require('./elastic-progress');\n\nfunction addInstance(instance){\n  instances.push(instance);\n}\n\nvar api={\n  open:function(){\n    return this.instance.open();\n  },\n  close:function(){\n    return this.instance.close();\n  },\n  setValue:function(value){\n    return this.instance.setValue(value);\n  },\n  getValue:function(){\n    return this.instance.getValue();\n  },\n  fail:function(){\n    return this.instance.fail();\n  },\n  complete:function(){\n    return this.instance.complete();\n  },\n  cancel:function(){\n    return this.instance.cancel();\n  },\n  onClick:function(f){\n    this.instance.options.onClick=f;\n  },\n  onOpen:function(f){\n    this.instance.options.onOpen=f;\n  },\n  onClose:function(f){\n    this.instance.options.onClose=f;\n  },\n  onComplete:function(f){\n    this.instance.options.onComplete=f;\n  },\n  onCancel:function(f){\n    this.instance.options.onCancel=f;\n  },\n  onFail:function(f){\n    this.instance.options.onFail=f;\n  },\n  onChange:function(f){\n    this.instance.options.onChange=f;\n  },\n  addEventListener:function(event,handler){\n    this.instance.addEventListener(event,handler);\n  },\n  removeEventListener:function(event,handler){\n    this.instance.removeEventListener(event,handler);\n  }\n};\n\nvar ElasticProgress=function(target,options){\n  if(!isSet(target)){\n    return;\n  }\n  if(target.jquery){\n    target=target.get(0);\n  }\n  this.instance=new ElasticProgressGfx(target,options);\n}\n\nElasticProgress.prototype=extend(\n  {\n    instance:null\n  },\n  api\n);\n\n// jQuery plugin, in case jQuery is available\nif(isSet(jQuery)){\n  (function($){\n    $.fn.ElasticProgress=function(optionsOrMethod){\n      var target=toArray($(this));\n\n      if(typeof optionsOrMethod==\"string\"){\n        var method=optionsOrMethod;\n\n        var f=api[method];\n\n        var args=arguments;\n        // if function exists, calls it. Else, error\n        if(typeof f==\"function\"){\n          var returnValue=null;\n          $(this).each(function(){\n            var instance=$(this).data(\"elastic-progress\");\n\n            if(instance!=null){\n              returnValue=instance[method].apply(instance,toArray(args).slice(1));\n            }\n          });\n          return returnValue;\n        }else{\n          ElasticProgressGfx.prototype.error(\"Unknown function '\"+method+\"'\");\n        }\n      }else{\n        var options=optionsOrMethod;\n\n        $(this).each(function(){\n          var instance=new ElasticProgress($(this),options);\n          $(this).data(\"elastic-progress\",instance);\n\n        })\n\n        return $(this);\n      }\n    }\n  }(jQuery));\n}\n\nmodule.exports=ElasticProgress;\n\n},{\"./elastic-progress\":31,\"./is-set\":33,\"./to-array\":37,\"extend\":7}],35:[function(require,module,exports){\nvar debug=true;\nvar blockedEvents=[];\nvar listeners=[];\n\nfunction blockEvent(el,type,dur){\n  if(typeof dur!=\"number\") dur=1000\n\n  blockedEvents.push({\n    el:el,\n    type:type\n  });\n  setTimeout(function(){\n    blockedEvents.shift();\n  },dur);\n}\nfunction isBlocked(el,type){\n  return blockedEvents.some(function(cur){\n    return cur.type==type && cur.el==el;\n  });\n}\n\nfunction registerEvent(type,el,callback,listener){\n  el.addEventListener(type,listener);\n\n  listeners.push({\n    type:type,\n    el:el,\n    callback:callback,\n    listener:listener\n  });\n}\nfunction unregisterEvent(type,el,callback){\n  listeners.filter(function(listener){\n    return (listener.type==type && listener.el==el && listener.callback==callback);\n  }).forEach(function(listener){\n    console.log(listener);\n    listener.el.removeEventListener(listener.type,listener.listener);\n  });\n\n  listeners=listeners.filter(function(listener){\n    return !(listener.type==type && listener.el==el && listener.callback==callback);\n  })\n}\n\nvar pointerEvents={\n  down:function(add,el,callback){\n    if(add){\n      var touchstartListener=function(event){\n        if(typeof event.touches != \"undefined\"){\n          var touches=event.touches;\n          if(touches.length>0){\n            event.clientX=touches[0].clientX;\n            event.clientY=touches[0].clientY;\n\n            callback.call(el,event);\n            blockEvent(el,\"mousedown\");\n          }\n        }\n      }\n      registerEvent(\"touchstart\",el,callback,touchstartListener);\n\n      var mousedownListener=function(event){\n        if(!isBlocked(el,\"mousedown\")){\n          callback.call(el,event);\n        }\n      }\n      registerEvent(\"mousedown\",el,callback,mousedownListener);\n\n    }else{\n      unregisterEvent(\"touchstart\",el,callback);\n      unregisterEvent(\"mousedown\",el,callback);\n    }\n  },\n\n  up:function(add,el,callback){\n    if(add){\n      var touchendListener=function(event){\n        if(typeof event.touches != \"undefined\"){\n          var touches=event.touches;\n          if(touches.length>0){\n            event.clientX=touches[0].clientX;\n            event.clientY=touches[0].clientY;\n\n          }\n          callback.call(el,event);\n          blockEvent(el,\"mouseup\");\n        }\n      };\n      registerEvent(\"touchend\",el,callback,touchendListener);\n\n      var mouseupListener=function(event){\n        if(!isBlocked(el,\"mouseup\")){\n          callback.call(el,event);\n        }\n      };\n      registerEvent(\"mouseup\",el,callback,mouseupListener);\n    }else{\n      unregisterEvent(\"touchend\",el,callback);\n      unregisterEvent(\"mouseup\",el,callback);\n    }\n  },\n\n  click:function(add,el,callback){\n    if(add){\n      function clickListener(event){\n        if(!isBlocked(el,\"click\")){\n          callback.call(el,event);\n        }\n      };\n      registerEvent('click',el,callback,clickListener)\n    }else{\n      unregisterEvent('click',el,callback);\n    }\n  },\n\n  mouseover:function(add,el,callback){\n    if(add){\n      function mouseoverListener(event){\n        callback.call(el,event);\n      }\n      registerEvent('mouseover',el,callback,mouseoverListener);\n    }else{\n      unregisterEvent('mouseover',el,callback);\n    }\n  },\n  mouseout:function(add,el,callback){\n    if(add){\n      function mouseoutListener(event){\n        callback.call(el,event);\n      }\n      registerEvent('mouseout',el,callback,mouseoutListener);\n    }else{\n      unregisterEvent('mouseout',el,callback);\n    }\n  }\n}\n\nvar api={\n  on:function(eventType,el,callback){\n    pointerEvents[eventType].call(this,true,el,callback);\n  },\n  off:function(eventType,el,callback){\n    pointerEvents[eventType].call(this,false,el,callback);\n  }\n};\n\nmodule.exports=api;\n\n},{}],36:[function(require,module,exports){\nfunction format(text) {return function(x, y) {x = (+x|0);y = (+y|0);var el = document.createElement(\"div\");el.innerHTML = \"<svg><g><g>\" + text + \"</g></g></svg>\";el = el.childNodes[0].childNodes[0];el.childNodes[0].setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");return el}}\nmodule.exports = format(\"\\n<g id=\\\"container\\\">\\n\t<g id=\\\"circle\\\">\\n\t\t<g id=\\\"background\\\">\\n\t\t\t<path id=\\\"bg\\\" fill=\\\"#231F20\\\" d=\\\"M0-50c27.614,0,50,22.386,50,50S27.614,50,0,50c-27.615,0-50-22.386-50-50S-27.615-50,0-50z\\\"/>\\n\t\t</g>\\n\t\t<g id=\\\"overlay\\\">\\n\t\t\t<path fill=\\\"#47FF03\\\" d=\\\"M50,0c0,27.584-22.461,50-50,50c-27.636,0-50-22.416-50-50c0-27.594,22.364-50,50-50\\n\t\t\t\tC27.539-50,50-27.594,50,0z\\\"/>\\n\t\t</g>\\n\t\t<g id=\\\"border\\\">\\n\t\t\t<path fill=\\\"none\\\" stroke=\\\"#231F20\\\" stroke-width=\\\"4\\\" stroke-linecap=\\\"round\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M-23.833,21.445\\n\t\t\t\tc-80.313,1.374,7.956,104.833,89.191,104.833c81.7,0,191.842-105.833,110.142-105.833\\\"/>\\n\t\t</g>\\n\t\t<g id=\\\"fill-line\\\">\\n\t\t\t<path fill=\\\"none\\\" stroke=\\\"#FF00FF\\\" stroke-linecap=\\\"round\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M-138.487,110.945l105,2\\\"/>\\n\t\t</g>\\n\t</g>\\n\t<g id=\\\"arrow\\\">\\n\t\t<g id=\\\"head\\\">\\n\t\t\t<polygon fill=\\\"#FF00FF\\\" points=\\\"-30.035,-31.56 0,0 30.035,-31.56 \t\t\t\\\"/>\\n\t\t</g>\\n\t\t<g id=\\\"line\\\">\\n\t\t\t<rect x=\\\"-12.374\\\" y=\\\"-68.78\\\" fill=\\\"#FF00FF\\\" width=\\\"24.749\\\" height=\\\"41.552\\\"/>\\n\t\t</g>\\n\t\t<g id=\\\"label\\\">\\n\t\t\t<text transform=\\\"matrix(1 0 0 1 -0.7007 -41.584)\\\" fill=\\\"#231F20\\\" font-family=\\\"'Arial-BoldMT'\\\" font-size=\\\"18\\\">1</text>\\n\t\t</g>\\n\t</g>\\n</g>\\n<g id=\\\"hit-area\\\">\\n\t<path fill=\\\"#00FFDA\\\" d=\\\"M50,0c0,27.584-22.461,50-50,50c-27.636,0-50-22.416-50-50c0-27.594,22.364-50,50-50\\n\t\tC27.539-50,50-27.594,50,0z\\\"/>\\n</g>\\n\")\n},{}],37:[function(require,module,exports){\n// Converts NodeList/jQuery collections/etc to array\nfunction toArray(obj){\n  return [].slice.call(obj);\n}\n\nmodule.exports=toArray;\n\n},{}]},{},[34])(34)\n});","markerStore":{"nextMarkerId":325,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":12},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"323":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"324":{"range":{"start":{"row":0,"column":329},"end":{"row":0,"column":330}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/n4z4/Downloads/ElasticProgress/js/elastic-progress.js","digestWhenLastPersisted":"cb6c2ab6e5dcecdace97b8672d1399f787b7d6e3","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":false,"displayBuffer":{"id":9,"softWrapped":false,"scrollTop":2013,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/n4z4/Downloads/ElasticProgress/js/main.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":false,"displayBuffer":{"id":13,"softWrapped":false,"scrollTop":112886,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/n4z4/Downloads/ElasticProgress/js/elastic-progress.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/n4z4/Downloads/ElasticProgress/js/main.js","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/n4z4/Downloads/ElasticProgress/js/main.js":1446015776503,"/Users/n4z4/Downloads/ElasticProgress/js/elastic-progress.js":1446015658014},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/n4z4/Downloads/ElasticProgress/js":{"isExpanded":true,"entries":{}}},"selectedPath":"/Users/n4z4/Downloads/ElasticProgress/js/main.js","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}