{"version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":838,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/n4z4/lavoro/letsencrypt"],"buffers":[{"text":"# https://github.com/letsencrypt/letsencrypt/pull/431#issuecomment-103659297\n# it is more likely developers will already have ubuntu:trusty rather\n# than e.g. debian:jessie and image size differences are negligible\nFROM ubuntu:trusty\nMAINTAINER Jakub Warmuz <jakub@warmuz.org>\nMAINTAINER William Budington <bill@eff.org>\n\n# Note: this only exposes the port to other docker containers. You\n# still have to bind to 443@host at runtime, as per the ACME spec.\nEXPOSE 443\n\n# TODO: make sure --config-dir and --work-dir cannot be changed\n# through the CLI (letsencrypt-docker wrapper that uses standalone\n# authenticator and text mode only?)\nVOLUME /etc/letsencrypt /var/lib/letsencrypt\n\nWORKDIR /opt/letsencrypt\n\n# no need to mkdir anything:\n# https://docs.docker.com/reference/builder/#copy\n# If <dest> doesn't exist, it is created along with all missing\n# directories in its path.\n\n\nCOPY bootstrap/ubuntu.sh /opt/letsencrypt/src/ubuntu.sh\nRUN /opt/letsencrypt/src/ubuntu.sh && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* \\\n           /tmp/* \\\n           /var/tmp/*\n\n# the above is not likely to change, so by putting it further up the\n# Dockerfile we make sure we cache as much as possible\n\n\nCOPY setup.py README.rst CHANGES.rst MANIFEST.in /opt/letsencrypt/src/\n\n# all above files are necessary for setup.py, however, package source\n# code directory has to be copied separately to a subdirectory...\n# https://docs.docker.com/reference/builder/#copy: \"If <src> is a\n# directory, the entire contents of the directory are copied,\n# including filesystem metadata. Note: The directory itself is not\n# copied, just its contents.\" Order again matters, three files are far\n# more likely to be cached than the whole project directory\n\nCOPY letsencrypt /opt/letsencrypt/src/letsencrypt/\nCOPY acme /opt/letsencrypt/src/acme/\nCOPY letsencrypt-apache /opt/letsencrypt/src/letsencrypt-apache/\nCOPY letsencrypt-nginx /opt/letsencrypt/src/letsencrypt-nginx/\n\n\n# py26reqs.txt not installed!\nRUN virtualenv --no-site-packages -p python2 /opt/letsencrypt/venv && \\\n    /opt/letsencrypt/venv/bin/pip install \\\n    -e /opt/letsencrypt/src/acme \\\n    -e /opt/letsencrypt/src \\\n    -e /opt/letsencrypt/src/letsencrypt-apache \\\n    -e /opt/letsencrypt/src/letsencrypt-nginx\n\n# install in editable mode (-e) to save space: it's not possible to\n# \"rm -rf /opt/letsencrypt/src\" (it's stays in the underlaying image);\n# this might also help in debugging: you can \"docker run --entrypoint\n# bash\" and investigate, apply patches, etc.\n\nENV PATH /opt/letsencrypt/venv/bin:$PATH\n\nENTRYPOINT [ \"letsencrypt\" ]\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":4},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/n4z4/lavoro/letsencrypt/Dockerfile","digestWhenLastPersisted":"54771a9e3e6e44f2b781848749bc0c279d560f07","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"# This Dockerfile builds an image for development.\nFROM ubuntu:trusty\nMAINTAINER Jakub Warmuz <jakub@warmuz.org>\nMAINTAINER William Budington <bill@eff.org>\nMAINTAINER Yan <yan@eff.org>\n\n# Note: this only exposes the port to other docker containers. You\n# still have to bind to 443@host at runtime, as per the ACME spec.\nEXPOSE 443\n\n# TODO: make sure --config-dir and --work-dir cannot be changed\n# through the CLI (letsencrypt-docker wrapper that uses standalone\n# authenticator and text mode only?)\nVOLUME /etc/letsencrypt /var/lib/letsencrypt\n\nWORKDIR /opt/letsencrypt\n\n# no need to mkdir anything:\n# https://docs.docker.com/reference/builder/#copy\n# If <dest> doesn't exist, it is created along with all missing\n# directories in its path.\n\n# TODO: Install non-default Python versions for tox.\n# TODO: Install Apache/Nginx for plugin development.\nCOPY bootstrap/ubuntu.sh /opt/letsencrypt/src/ubuntu.sh\nRUN /opt/letsencrypt/src/ubuntu.sh && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* \\\n           /tmp/* \\\n           /var/tmp/*\n\n# the above is not likely to change, so by putting it further up the\n# Dockerfile we make sure we cache as much as possible\n\n# py26reqs.txt not installed!\nCOPY setup.py README.rst CHANGES.rst MANIFEST.in linter_plugin.py tox.cover.sh tox.ini pep8.travis.sh .pep8 .pylintrc /opt/letsencrypt/src/\n\n# all above files are necessary for setup.py, however, package source\n# code directory has to be copied separately to a subdirectory...\n# https://docs.docker.com/reference/builder/#copy: \"If <src> is a\n# directory, the entire contents of the directory are copied,\n# including filesystem metadata. Note: The directory itself is not\n# copied, just its contents.\" Order again matters, three files are far\n# more likely to be cached than the whole project directory\n\nCOPY letsencrypt /opt/letsencrypt/src/letsencrypt/\nCOPY acme /opt/letsencrypt/src/acme/\nCOPY letsencrypt-apache /opt/letsencrypt/src/letsencrypt-apache/\nCOPY letsencrypt-nginx /opt/letsencrypt/src/letsencrypt-nginx/\nCOPY letshelp-letsencrypt /opt/letsencrypt/src/letshelp-letsencrypt/\nCOPY letsencrypt-compatibility-test /opt/letsencrypt/src/letsencrypt-compatibility-test/\nCOPY tests /opt/letsencrypt/src/tests/\n\nRUN virtualenv --no-site-packages -p python2 /opt/letsencrypt/venv && \\\n    /opt/letsencrypt/venv/bin/pip install \\\n    -e /opt/letsencrypt/src/acme \\\n    -e /opt/letsencrypt/src \\\n    -e /opt/letsencrypt/src/letsencrypt-apache \\\n    -e /opt/letsencrypt/src/letsencrypt-nginx \\\n    -e /opt/letsencrypt/src/letshelp-letsencrypt \\\n    -e /opt/letsencrypt/src/letsencrypt-compatibility-test \\\n    -e /opt/letsencrypt/src[dev,docs,testing]\n\n# install in editable mode (-e) to save space: it's not possible to\n# \"rm -rf /opt/letsencrypt/src\" (it's stays in the underlaying image);\n# this might also help in debugging: you can \"docker run --entrypoint\n# bash\" and investigate, apply patches, etc.\n\nENV PATH /opt/letsencrypt/venv/bin:$PATH\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":8},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/n4z4/lavoro/letsencrypt/Dockerfile-dev","digestWhenLastPersisted":"40abe5a80d816fb9fd8bcaed0e5c76cd01785480","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"#!/bin/sh -e\n#\n# A script to run the latest release version of the Let's Encrypt in a\n# virtual environment\n#\n# Installs and updates the letencrypt virtualenv, and runs letsencrypt\n# using that virtual environment.  This allows the client to function decently\n# without requiring specific versions of its dependencies from the operating\n# system.\n\n# Note: you can set XDG_DATA_HOME or VENV_PATH before running this script,\n# if you want to change where the virtual environment will be installed\nXDG_DATA_HOME=${XDG_DATA_HOME:-~/.local/share}\nVENV_NAME=\"letsencrypt\"\nVENV_PATH=${VENV_PATH:-\"$XDG_DATA_HOME/$VENV_NAME\"}\nVENV_BIN=${VENV_PATH}/bin\n# The path to the letsencrypt-auto script.  Everything that uses these might\n# at some point be inlined...\nLEA_PATH=`dirname \"$0\"`\nBOOTSTRAP=${LEA_PATH}/bootstrap\n\n# This script takes the same arguments as the main letsencrypt program, but it\n# additionally responds to --verbose (more output) and --debug (allow support\n# for experimental platforms)\nfor arg in \"$@\" ; do\n  # This first clause is redundant with the third, but hedging on portability\n  if [ \"$arg\" = \"-v\" ] || [ \"$arg\" = \"--verbose\" ] || echo \"$arg\" | grep -E -- \"-v+$\" ; then\n    VERBOSE=1\n  elif [ \"$arg\" = \"--debug\" ] ; then\n    DEBUG=1\n  fi\ndone\n\n# letsencrypt-auto needs root access to bootstrap OS dependencies, and\n# letsencrypt itself needs root access for almost all modes of operation\n# The \"normal\" case is that sudo is used for the steps that need root, but\n# this script *can* be run as root (not recommended), or fall back to using\n# `su`\nif test \"`id -u`\" -ne \"0\" ; then\n  if command -v sudo 1>/dev/null 2>&1; then\n    SUDO=sudo\n  else\n    echo \\\"sudo\\\" is not available, will use \\\"su\\\" for installation steps...\n    # Because the parameters in `su -c` has to be a string,\n    # we need properly escape it\n    su_sudo() {\n      args=\"\"\n      # This `while` loop iterates over all parameters given to this function.\n      # For each parameter, all `'` will be replace by `'\"'\"'`, and the escaped string\n      # will be wrap in a pair of `'`, then append to `$args` string\n      # For example, `echo \"It's only 1\\$\\!\"` will be escaped to:\n      #   'echo' 'It'\"'\"'s only 1$!'\n      #     │       │└┼┘│\n      #     │       │ │ └── `'s only 1$!'` the literal string\n      #     │       │ └── `\\\"'\\\"` is a single quote (as a string)\n      #     │       └── `'It'`, to be concatenated with the strings followed it\n      #     └── `echo` wrapped in a pair of `'`, it's totally fine for the shell command itself\n      while [ $# -ne 0 ]; do\n        args=\"$args'$(printf \"%s\" \"$1\" | sed -e \"s/'/'\\\"'\\\"'/g\")' \"\n        shift\n      done\n      su root -c \"$args\"\n    }\n    SUDO=su_sudo\n  fi\nelse\n  SUDO=\nfi\n\nExperimentalBootstrap() {\n  # Arguments: Platform name, boostrap script name, SUDO command (iff needed)\n  if [ \"$DEBUG\" = 1 ] ; then\n    if [ \"$2\" != \"\" ]  ; then\n      echo \"Bootstrapping dependencies for $1...\"\n      if [ \"$3\" != \"\" ] ; then\n        \"$3\" \"$BOOTSTRAP/$2\"\n      else\n        \"$BOOTSTRAP/$2\"\n      fi\n    fi\n  else\n    echo \"WARNING: $1 support is very experimental at present...\"\n    echo \"if you would like to work on improving it, please ensure you have backups\"\n    echo \"and then run this script again with the --debug flag!\"\n    exit 1\n  fi\n}\n\nDeterminePythonVersion() {\n  if command -v python2.7 > /dev/null ; then\n    export LE_PYTHON=${LE_PYTHON:-python2.7}\n  elif command -v python27 > /dev/null ; then\n    export LE_PYTHON=${LE_PYTHON:-python27}\n  elif command -v python2 > /dev/null ; then\n    export LE_PYTHON=${LE_PYTHON:-python2}\n  elif command -v python > /dev/null ; then\n    export LE_PYTHON=${LE_PYTHON:-python}\n  else\n    echo \"Cannot find any Pythons... please install one!\"\n    exit 1\n  fi\n\n  PYVER=`$LE_PYTHON --version 2>&1 | cut -d\" \" -f 2 | cut -d. -f1,2 | sed 's/\\.//'`\n  if [ $PYVER -eq 26 ] ; then\n    ExperimentalBootstrap \"Python 2.6\"\n  elif [ $PYVER -lt 26 ] ; then\n    echo \"You have an ancient version of Python entombed in your operating system...\"\n    echo \"This isn't going to work; you'll need at least version 2.6.\"\n    exit 1\n  fi\n}\n\n\n# virtualenv call is not idempotent: it overwrites pip upgraded in\n# later steps, causing \"ImportError: cannot import name unpack_url\"\nif [ ! -d $VENV_PATH ]\nthen\n  if [ ! -f $BOOTSTRAP/debian.sh ] ; then\n    echo \"Cannot find the letsencrypt bootstrap scripts in $BOOTSTRAP\"\n    exit 1\n  fi\n\n  if [ -f /etc/debian_version ] ; then\n    echo \"Bootstrapping dependencies for Debian-based OSes...\"\n    $SUDO $BOOTSTRAP/_deb_common.sh\n  elif [ -f /etc/redhat-release ] ; then\n    echo \"Bootstrapping dependencies for RedHat-based OSes...\"\n    $SUDO $BOOTSTRAP/_rpm_common.sh\n  elif `grep -q openSUSE /etc/os-release` ; then\n    echo \"Bootstrapping dependencies for openSUSE-based OSes...\"\n    $SUDO $BOOTSTRAP/_suse_common.sh\n  elif [ -f /etc/arch-release ] ; then\n    if [ \"$DEBUG\" = 1 ] ; then\n      echo \"Bootstrapping dependencies for Archlinux...\"\n      $SUDO $BOOTSTRAP/archlinux.sh\n    else\n      echo \"Please use pacman to install letsencrypt packages:\"\n      echo \"# pacman -S letsencrypt letsencrypt-apache\"\n      echo\n      echo \"If you would like to use the virtualenv way, please run the script again with the\"\n      echo \"--debug flag.\"\n      exit 1\n    fi\n  elif [ -f /etc/manjaro-release ] ; then\n    ExperimentalBootstrap \"Manjaro Linux\" manjaro.sh \"$SUDO\"\n  elif [ -f /etc/gentoo-release ] ; then\n    ExperimentalBootstrap \"Gentoo\" _gentoo_common.sh \"$SUDO\"\n  elif uname | grep -iq FreeBSD ; then\n    ExperimentalBootstrap \"FreeBSD\" freebsd.sh \"$SUDO\"\n  elif uname | grep -iq Darwin ; then\n    ExperimentalBootstrap \"Mac OS X\" mac.sh # homebrew doesn't normally run as root\n  elif grep -iq \"Amazon Linux\" /etc/issue ; then\n    ExperimentalBootstrap \"Amazon Linux\" _rpm_common.sh \"$SUDO\"\n  else\n    echo \"Sorry, I don't know how to bootstrap Let's Encrypt on your operating system!\"\n    echo\n    echo \"You will need to bootstrap, configure virtualenv, and run a pip install manually\"\n    echo \"Please see https://letsencrypt.readthedocs.org/en/latest/contributing.html#prerequisites\"\n    echo \"for more info\"\n  fi\n\n  DeterminePythonVersion\n  echo \"Creating virtual environment...\"\n  if [ \"$VERBOSE\" = 1 ] ; then\n    virtualenv --no-site-packages --python $LE_PYTHON $VENV_PATH\n  else\n    virtualenv --no-site-packages --python $LE_PYTHON $VENV_PATH > /dev/null\n  fi\nelse\n  DeterminePythonVersion\nfi\n\n\nprintf \"Updating letsencrypt and virtual environment dependencies...\"\nif [ \"$VERBOSE\" = 1 ]  ; then\n  echo\n  $VENV_BIN/pip install -U setuptools\n  $VENV_BIN/pip install -U pip\n  $VENV_BIN/pip install -r \"$LEA_PATH\"/py26reqs.txt -U letsencrypt letsencrypt-apache\n  # nginx is buggy / disabled for now, but upgrade it if the user has\n  # installed it manually\n  if $VENV_BIN/pip freeze | grep -q letsencrypt-nginx ; then\n    $VENV_BIN/pip install -U letsencrypt letsencrypt-nginx\n  fi\nelse\n  $VENV_BIN/pip install -U setuptools > /dev/null\n  printf .\n  $VENV_BIN/pip install -U pip > /dev/null\n  printf .\n  # nginx is buggy / disabled for now...\n  $VENV_BIN/pip install -r \"$LEA_PATH\"/py26reqs.txt > /dev/null\n  printf .\n  $VENV_BIN/pip install -U letsencrypt > /dev/null\n  printf .\n  $VENV_BIN/pip install -U letsencrypt-apache > /dev/null\n  if $VENV_BIN/pip freeze | grep -q letsencrypt-nginx ; then\n    printf .\n    $VENV_BIN/pip install -U letsencrypt-nginx > /dev/null\n  fi\n  echo\nfi\n\n# Explain what's about to happen, for the benefit of those getting sudo\n# password prompts...\necho \"Running with virtualenv:\" $SUDO $VENV_BIN/letsencrypt \"$@\"\n$SUDO $VENV_BIN/letsencrypt \"$@\"\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":12},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/n4z4/lavoro/letsencrypt/letsencrypt-auto","digestWhenLastPersisted":"e344a3133f08c136c2762f7b11553216651ad2df","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"scrollRow":38,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/n4z4/lavoro/letsencrypt/Dockerfile","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":8,"softTabs":true,"scrollRow":40,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/n4z4/lavoro/letsencrypt/Dockerfile-dev","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":12,"softTabs":true,"scrollRow":177,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/n4z4/lavoro/letsencrypt/letsencrypt-auto","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/Users/n4z4/lavoro/letsencrypt/letsencrypt-auto","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-shellscript","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"fuzzy-finder":{"/Users/n4z4/lavoro/letsencrypt/Dockerfile":1450605273435,"/Users/n4z4/lavoro/letsencrypt/Dockerfile-dev":1450605289828,"/Users/n4z4/lavoro/letsencrypt/letsencrypt-auto":1450612815831},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/n4z4/lavoro/letsencrypt":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"acme":{"isExpanded":false,"entries":{}},"bootstrap":{"isExpanded":false,"entries":{}},"docs":{"isExpanded":false,"entries":{}},"examples":{"isExpanded":false,"entries":{}},"letsencrypt":{"isExpanded":false,"entries":{}},"letsencrypt-apache":{"isExpanded":false,"entries":{}},"letsencrypt-compatibility-test":{"isExpanded":false,"entries":{}},"letsencrypt-nginx":{"isExpanded":false,"entries":{}},"letshelp-letsencrypt":{"isExpanded":false,"entries":{}},"tests":{"isExpanded":false,"entries":{}},"tools":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/n4z4/lavoro/letsencrypt/letsencrypt","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":365}},"fullScreen":false}